{"type":"settings","kernel":"python3","backend_state":"running","trust":true,"metadata":{"celltoolbar":"Slideshow","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}},"kernel_state":"idle"}
{"type":"cell","id":"167402","pos":29,"input":"randmat[:].shape","output":{"0":{"data":{"text/plain":"(10, 40)"},"output_type":"execute_result","exec_count":50}},"cell_type":"code","exec_count":50}
{"type":"cell","id":"181827","pos":85,"input":"$$\\left(\\begin{array} \n a a & b \\\\\nd & e \n\\end{array}\\right)\\cdot\n\\left(\n\\begin{array}\nx x \\\\\ny\n\\end{array}\n\\right)=\n\\left(\n\\begin{array}\nc c \\\\\nf\n\\end{array}\n\\right)\n$$","cell_type":"markdown"}
{"type":"cell","id":"214812","pos":34,"input":"lista[0:-1]","output":{"0":{"data":{"text/plain":"[[0, 1, 2, 3], [4, 5, 6, 7]]"},"output_type":"execute_result","exec_count":36}},"cell_type":"code","exec_count":36}
{"type":"cell","id":"299882","pos":88,"input":"","cell_type":"code","exec_count":0,"collapsed":true}
{"type":"cell","id":"334977","pos":101,"input":"import numpy as np\nimport matplotlib","cell_type":"code","exec_count":1}
{"type":"cell","id":"572623","pos":95,"input":"[num for num in numeros[0]]","output":{"0":{"data":{"text/plain":"[2.0671098289471224, 1.7690638062514719, 50.0, 2.1288774362328922]"},"output_type":"execute_result","exec_count":100}},"cell_type":"code","exec_count":100}
{"type":"cell","id":"573012","pos":81,"input":"LA.norm(arr2d) # calcula a norma da matriz\n","output":{"0":{"data":{"text/plain":"1083.3655892633844"},"output_type":"execute_result","exec_count":85}},"cell_type":"code","exec_count":85}
{"type":"cell","id":"652673","pos":28,"input":"randmat=np.random.rand(10,40)","cell_type":"code","exec_count":46}
{"type":"cell","id":"712303","pos":60,"input":"numeros>5","output":{"0":{"data":{"text/plain":"array([[False, False,  True, False],\n       [False,  True,  True,  True],\n       [False, False,  True, False]], dtype=bool)"},"output_type":"execute_result","exec_count":66}},"cell_type":"code","exec_count":66}
{"type":"cell","id":"837914","pos":94,"input":"numeros[0,0]","output":{"0":{"data":{"text/plain":"2.0671098289471224"},"output_type":"execute_result","exec_count":99}},"cell_type":"code","exec_count":99}
{"type":"cell","id":"899450","pos":59,"input":"numeros","output":{"0":{"data":{"text/plain":"array([[  1.90657252e-02,   4.28180493e-01,   5.00000000e+01,\n          9.06423263e-02],\n       [  7.35581466e-01,   5.10557350e-01,   5.00000000e+01,\n          3.05358515e-01],\n       [  9.57031620e-02,   4.72088543e-01,   5.00000000e+01,\n          9.70031312e-01]])"},"output_type":"execute_result","exec_count":18}},"cell_type":"code","exec_count":18}
{"type":"cell","id":"e23304","pos":0,"input":"# Numpy","cell_type":"markdown","slide":"slide"}
{"type":"cell","id":"e4c6df","pos":1,"input":"Numpy é a biblioteca essencial para computação científica em Python. Ela fornece um objeto que é essencialmente uma\n_array_ multidimensional e métodos de  alto desempenho para trabalhar com esses _arrays_. ","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"5b2de7","pos":2,"input":"## Arrays\n- Uma matriz numpy é uma tabela de valores, todos do mesmo tipo, e é indexada por uma tupla de inteiros não negativos.\n- O número de dimensões é o grau da matriz.\n- A forma de uma matriz é uma tupla de inteiros que dão o tamanho da matriz ao longo de cada dimensão.\n- Podemos inicializar matrizes numpy de listas concatenadas de Python e acessar elementos usando colchetes:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"bcff3c","pos":3,"input":"import numpy as np","cell_type":"code","exec_count":3,"collapsed":true}
{"type":"cell","id":"74a097","pos":4,"input":"a= [[1,2,3,9], [6,5,4,20],[2,4,5,7]]\nmatriz = np.array(a)\nmatriz\n","output":{"0":{"data":{"text/plain":"array([[ 1,  2,  3,  9],\n       [ 6,  5,  4, 20],\n       [ 2,  4,  5,  7]])"},"output_type":"execute_result","exec_count":4}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"29957c","pos":5,"input":"a","output":{"0":{"data":{"text/plain":"[[1, 2, 3, 9], [6, 5, 4, 20], [2, 4, 5, 7]]"},"output_type":"execute_result","exec_count":5}},"cell_type":"code","exec_count":5}
{"type":"cell","id":"dc3904","pos":6,"input":"type(matriz)\n","output":{"0":{"data":{"text/plain":"numpy.ndarray"},"output_type":"execute_result","exec_count":6}},"cell_type":"code","exec_count":6}
{"type":"cell","id":"9cd6bc","pos":7,"input":"type(a)","output":{"0":{"data":{"text/plain":"list"},"output_type":"execute_result","exec_count":7}},"cell_type":"code","exec_count":7}
{"type":"cell","id":"866d18","pos":8,"input":"matriz1 = np.array(a, float)\nmatriz1","output":{"0":{"data":{"text/plain":"array([[  1.,   2.,   3.,   9.],\n       [  6.,   5.,   4.,  20.],\n       [  2.,   4.,   5.,   7.]])"},"output_type":"execute_result","exec_count":8}},"cell_type":"code","exec_count":8}
{"type":"cell","id":"9f99c5","pos":9,"input":"- Podemos verificar o número de linhas e colunas em nossos dados usando a propriedade `shape` de _arrays_ NumPy:","cell_type":"markdown"}
{"type":"cell","id":"b812e1","pos":10,"input":"matriz.shape","output":{"0":{"data":{"text/plain":"(3, 4)"},"output_type":"execute_result","exec_count":9}},"cell_type":"code","exec_count":9}
{"type":"cell","id":"a47a74","pos":11,"input":"Para criar um vetor linha fazemos:\n","cell_type":"markdown"}
{"type":"cell","id":"35d476","pos":12,"input":"vetor_linha=np.array([[1,2,3]]) # cria um vetor linha","cell_type":"code","exec_count":16}
{"type":"cell","id":"dcc0ec","pos":13,"input":"vetor_linha","output":{"0":{"data":{"text/plain":"array([[1, 2, 3]])"},"output_type":"execute_result","exec_count":17}},"cell_type":"code","exec_count":17}
{"type":"cell","id":"11a764","pos":14,"input":"b=np.array([1,2,3])","cell_type":"code","exec_count":10,"collapsed":true}
{"type":"cell","id":"6ff26e","pos":15,"input":"b","output":{"0":{"data":{"text/plain":"array([1, 2, 3])"},"output_type":"execute_result","exec_count":12}},"cell_type":"code","exec_count":12}
{"type":"cell","id":"3e11e2","pos":16,"input":"Para criar um vetor coluna temos que fazer:\n","cell_type":"markdown"}
{"type":"cell","id":"7e4078","pos":17,"input":"vetor_coluna=np.array([[1],[2],[3]])\n","cell_type":"code","exec_count":13,"collapsed":true}
{"type":"cell","id":"b5e3ec","pos":18,"input":"vetor_coluna","output":{"0":{"data":{"text/plain":"array([[1],\n       [2],\n       [3]])"},"output_type":"execute_result","exec_count":14}},"cell_type":"code","exec_count":14}
{"type":"cell","id":"d84975","pos":19,"input":"vetor_coluna.T","output":{"0":{"data":{"text/plain":"array([[1, 2, 3]])"},"output_type":"execute_result","exec_count":24}},"cell_type":"code","exec_count":24}
{"type":"cell","id":"87f553","pos":20,"input":"vetor_linha.T","output":{"0":{"data":{"text/plain":"array([[1],\n       [2],\n       [3]])"},"output_type":"execute_result","exec_count":25}},"cell_type":"code","exec_count":25}
{"type":"cell","id":"0e7c00","pos":21,"input":"b.T","output":{"0":{"data":{"text/plain":"array([1, 2, 3])"},"output_type":"execute_result","exec_count":23}},"cell_type":"code","exec_count":23}
{"type":"cell","id":"ca69b3","pos":22,"input":"vetor_linha*vetor_coluna","output":{"0":{"data":{"text/plain":"array([[1, 2, 3],\n       [2, 4, 6],\n       [3, 6, 9]])"},"output_type":"execute_result","exec_count":44}},"cell_type":"code","exec_count":44}
{"type":"cell","id":"e49663","pos":23,"input":"### Matriz com zeros\n\n- Para começar, você pode criar uma matriz onde cada elemento é zero. O código a seguir criará uma matriz com 3 linhas e 4 colunas, onde cada elemento é 0 , usando `np.zeros`:","cell_type":"markdown"}
{"type":"cell","id":"e3d2f0","pos":24,"input":"empty_array = np.zeros((3,4))\nempty_array","output":{"0":{"data":{"text/plain":"array([[ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.]])"},"output_type":"execute_result","exec_count":26}},"cell_type":"code","exec_count":26}
{"type":"cell","id":"c15ad3","pos":25,"input":"one_array = np.ones((3,4))\none_array","output":{"0":{"data":{"text/plain":"array([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])"},"output_type":"execute_result","exec_count":27}},"cell_type":"code","exec_count":27}
{"type":"cell","id":"f8149d","pos":26,"input":"- É útil criar uma matriz com todos os elementos zero nos casos em que você precisa de uma matriz de tamanho fixo, mas ainda não tem nenhum valor para ela.","cell_type":"markdown"}
{"type":"cell","id":"9926b8","pos":27,"input":"### Matriz de números aleatórios (Random)\n- É possível criar uma matriz onde cada elemento é um número aleatório usando `numpy.random.rand`. Veja o exemplo a seguir: ","cell_type":"markdown"}
{"type":"cell","id":"0e202b","pos":30,"input":"### Criando matriz com Reshape","cell_type":"markdown"}
{"type":"cell","id":"b8251a","pos":31,"input":"x = np.array(range(12)).reshape(3,4)\nprint(x)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n"}},"cell_type":"code","exec_count":31}
{"type":"cell","id":"37c26e","pos":32,"input":"### Índices e fatias\n- Para acessar um elemento de uma lista de dimensão $n$ é necessário fornecer o valor de n índices, ou seja, 2 índices para uma matriz bidimensional, 3 índices para uma matriz tridimensional e assim por diante.\n- Embora seja possível usar a mesma forma para acessar elementos de um array, uma forma mais eficiente é separando os valores por vírgulas, como a seguir:","cell_type":"markdown"}
{"type":"cell","id":"9c3461","pos":33,"input":"lista = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\nlista","output":{"0":{"data":{"text/plain":"[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]"},"output_type":"execute_result","exec_count":33}},"cell_type":"code","exec_count":33}
{"type":"cell","id":"89dc56","pos":35,"input":"mat = np.array(lista)\nmat","output":{"0":{"data":{"text/plain":"array([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])"},"output_type":"execute_result","exec_count":37}},"cell_type":"code","exec_count":37}
{"type":"cell","id":"7a98b9","pos":36,"input":"mat[0:3] ##Pegando penúltima linha","output":{"0":{"data":{"text/plain":"array([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])"},"output_type":"execute_result","exec_count":42}},"cell_type":"code","exec_count":42}
{"type":"cell","id":"3c780c","pos":37,"input":"mat[:,2]## Pegando a terceira coluna","output":{"0":{"data":{"text/plain":"array([ 2,  6, 10])"},"output_type":"execute_result","exec_count":31}},"cell_type":"code","exec_count":31}
{"type":"cell","id":"63f18f","pos":38,"input":"mat[:,2:]## Duas ultimas colunas e linhas","output":{"0":{"data":{"text/plain":"array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])"},"output_type":"execute_result","exec_count":32}},"cell_type":"code","exec_count":32}
{"type":"cell","id":"ee7c60","pos":39,"input":"### Operações com arrays\n- O NumPy oferece muito mais recursos que listas para operação e manipulação de arrays que facilitam a computação científica.","cell_type":"markdown"}
{"type":"cell","id":"a5684f","pos":40,"input":"a1 = np.array([[1,2],[3,4]])\nb1 = np.array([[0,2],[3,1]])\nsoma=a1+b1\nmultiplicacao=a1*b1\ndivisao=b1/a1\nprint('Soma:',soma)\nprint('Multiplicação:',multiplicacao)\nprint('Divisão:',divisao)","output":{"0":{"name":"stdout","output_type":"stream","text":"Soma: [[1 4]\n [6 5]]\nMultiplicação: [[0 4]\n [9 4]]\nDivisão: [[ 0.    1.  ]\n [ 1.    0.25]]\n"}},"cell_type":"code","exec_count":53}
{"type":"cell","id":"adad16","pos":41,"input":"alista=[1,2,3]\nblista=[1,2,3]\nalista+blista","output":{"0":{"data":{"text/plain":"[1, 2, 3, 1, 2, 3]"},"output_type":"execute_result","exec_count":52}},"cell_type":"code","exec_count":52}
{"type":"cell","id":"4f8244","pos":42,"input":"a=np.array([[1,2,3]])\nnp.dot(a,a.T)","output":{"0":{"data":{"text/plain":"array([[14]])"},"output_type":"execute_result","exec_count":54}},"cell_type":"code","exec_count":54}
{"type":"cell","id":"b055a0","pos":43,"input":"np.dot(a1,b1)-np.dot(b1,a1)","output":{"0":{"data":{"text/plain":"array([[ 0, -4],\n       [ 6,  0]])"},"output_type":"execute_result","exec_count":56}},"cell_type":"code","exec_count":56}
{"type":"cell","id":"c0937d","pos":44,"input":"a1*b1-b1*a1","output":{"0":{"data":{"text/plain":"array([[0, 0],\n       [0, 0]])"},"output_type":"execute_result","exec_count":57}},"cell_type":"code","exec_count":57}
{"type":"cell","id":"75af8b","pos":45,"input":"### Operações entre arrays de tamanhos distintos\n- Em muitos casos, é necessário trabalhar com arrays com um número distinto de elementos, ou de formas diferentes. Nesse caso, é necessário entender as regras do NumPy que difundem as informações do array menor para o array maior.\n- O termo difusão (broadcasting) descreve como NumPy trata arrays de dimensões diferentes em operações aritméticas. O array menor é “difundido” a uma array maior para que tenham as mesmas dimensões. No caso de um escalar, o valor do escalar é difundido para todos os elementos do array maior, como no exemplo:","cell_type":"markdown"}
{"type":"cell","id":"cebacd","pos":46,"input":"a2 = np.array([[1,2],[3,4]])\na2 + 1","output":{"0":{"data":{"text/plain":"array([[2, 3],\n       [4, 5]])"},"output_type":"execute_result","exec_count":36}},"cell_type":"code","exec_count":36}
{"type":"cell","id":"b220ae","pos":47,"input":"a2 * 2","output":{"0":{"data":{"text/plain":"array([[2, 4],\n       [6, 8]])"},"output_type":"execute_result","exec_count":39}},"cell_type":"code","exec_count":39}
{"type":"cell","id":"dd70e9","pos":48,"input":"a2/2","output":{"0":{"data":{"text/plain":"array([[ 0.5,  1. ],\n       [ 1.5,  2. ]])"},"output_type":"execute_result","exec_count":40}},"cell_type":"code","exec_count":40}
{"type":"cell","id":"5b07f9","pos":49,"input":"### Atribuir valores a NumPy Arrays\n- Também podemos usar a indexação para atribuir valores a determinados elementos em arrays. Podemos fazer isso atribuindo diretamente ao valor indexado:","cell_type":"markdown"}
{"type":"cell","id":"bfe24e","pos":50,"input":"numeros=10*np.random.randint(3,4)\nnumeros[ 1 , 1] = 10\nnumeros [:, 2 ] = 50","cell_type":"code","exec_count":62}
{"type":"cell","id":"14f327","pos":51,"input":" np.random.randint(5,10, size=(2, 4))","output":{"0":{"data":{"text/plain":"array([[8, 9, 5, 9],\n       [6, 9, 9, 9]])"},"output_type":"execute_result","exec_count":64}},"cell_type":"code","exec_count":64}
{"type":"cell","id":"82ce9d","pos":52,"input":"numeros","output":{"0":{"data":{"text/plain":"array([[  0.93618615,   0.73192585,  50.        ,   0.60033075],\n       [  0.47147405,  10.        ,  50.        ,   0.97627129],\n       [  0.75683819,   0.19859848,  50.        ,   0.47503371]])"},"output_type":"execute_result","exec_count":61}},"cell_type":"code","exec_count":61}
{"type":"cell","id":"26f126","pos":53,"input":"### Tipos de dados NumPy\n-  NumPy armazena valores usando seus próprios tipos de dados, que são distintos de tipos Python como **float** e **str** . Isso ocorre porque o núcleo do NumPy é escrito em uma linguagem de programação chamada C, que armazena dados de forma diferente dos tipos de dados Python. Os tipos de dados NumPy mapeiam entre Python e C, permitindo-nos usar matrizes NumPy sem nenhum engate de conversão.\n- Você pode encontrar o tipo de dados de uma matriz NumPy acessando a propriedade dtype:","cell_type":"markdown"}
{"type":"cell","id":"1d8a38","pos":54,"input":"numeros.dtype","output":{"0":{"data":{"text/plain":"dtype('float64')"},"output_type":"execute_result","exec_count":16}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"7ed668","pos":55,"input":"- NumPy tem vários tipos de dados diferentes, que mapeiam principalmente para tipos de dados Python, como float e str . Você pode encontrar uma lista completa dos tipos de dados NumPy aqui , mas aqui estão alguns importantes:\n\n- **float** - dados numéricos de ponto flutuante.\n- **int** - dados inteiros.\n- **string** - dados de caracteres.\n- **object** - Objetos Python.\n \n- Os tipos de dados, adicionalmente, terminam com um sufixo que indica quantos bits de memória eles ocupam. Assim, int32 é um tipo de dados inteiros de 32 bits e float64 é um tipo de dados float de 64 bits.","cell_type":"markdown"}
{"type":"cell","id":"c78722","pos":56,"input":"### Convertendo tipos de dados\n- Você pode usar o método **numpy.ndarray.astype** para converter uma matriz em um tipo diferente. O método realmente copiará a matriz e retornará uma nova matriz com o tipo de dados especificado. ","cell_type":"markdown"}
{"type":"cell","id":"579ffb","pos":57,"input":"numeros.astype(int)","output":{"0":{"data":{"text/plain":"array([[ 2,  1, 50,  2],\n       [ 2, 10, 50,  7],\n       [ 1,  0, 50,  0]])"},"output_type":"execute_result","exec_count":65}},"cell_type":"code","exec_count":65}
{"type":"cell","id":"1c4250","pos":58,"input":"### NumPy Array Comparações\n- NumPy torna possível testar para ver se as linhas correspondem a certos valores usando operações de comparação matemática como < , > , >= , <= e == . Por exemplo, se queremos ver quais vinhos têm uma classificação de qualidade superior a 5 , podemos fazer o seguinte:","cell_type":"markdown"}
{"type":"cell","id":"f7fb01","pos":61,"input":"numeros[:, 0 ] > 0.1","output":{"0":{"data":{"text/plain":"array([ True,  True,  True], dtype=bool)"},"output_type":"execute_result","exec_count":67}},"cell_type":"code","exec_count":67}
{"type":"cell","id":"fc0686","pos":62,"input":"numeros[:, 2] == 50.","output":{"0":{"data":{"text/plain":"array([ True,  True,  True], dtype=bool)"},"output_type":"execute_result","exec_count":68}},"cell_type":"code","exec_count":68}
{"type":"cell","id":"997a4c","pos":63,"input":"### Subsetting\n- Uma das operações poderosas que podemos realizar com uma matriz booleana e uma matriz NumPy é selecionar apenas algumas linhas ou colunas na matriz NumPy. Por exemplo, o código abaixo só irá selecionar linhas cuja qualidade é superior a 7 :","cell_type":"markdown"}
{"type":"cell","id":"3f4b1e","pos":64,"input":"high_quality = numeros[:,1] > 2\nnumeros[high_quality,:]","output":{"0":{"data":{"text/plain":"array([[  2.73587053,  10.        ,  50.        ,   7.54433951]])"},"output_type":"execute_result","exec_count":70}},"cell_type":"code","exec_count":70}
{"type":"cell","id":"e70cb1","pos":65,"input":"Para retornar os índices","cell_type":"markdown"}
{"type":"cell","id":"9ccc72","pos":66,"input":"np.argwhere(numeros >40)","output":{"0":{"data":{"text/plain":"array([[0, 2],\n       [1, 2],\n       [2, 2]])"},"output_type":"execute_result","exec_count":95}},"cell_type":"code","exec_count":95}
{"type":"cell","id":"08c9c8","pos":67,"input":"## Operações Diversas","cell_type":"markdown"}
{"type":"cell","id":"dbad1e","pos":68,"input":"- Para achatar os dados, ou seja acabar com sua estrutura interna","cell_type":"markdown"}
{"type":"cell","id":"69ed9f","pos":69,"input":"numeros.ravel().shape","output":{"0":{"data":{"text/plain":"(12,)"},"output_type":"execute_result","exec_count":76}},"cell_type":"code","exec_count":76}
{"type":"cell","id":"e57926","pos":70,"input":"Para inserir uma linha em um `array`:","cell_type":"markdown"}
{"type":"cell","id":"947e72","pos":71,"input":"np.vstack((numeros, [1,2,3,4]))","output":{"0":{"data":{"text/plain":"array([[  2.06710983,   1.76906381,  50.        ,   2.12887744],\n       [  2.73587053,  10.        ,  50.        ,   7.54433951],\n       [  1.68564568,   0.94910583,  50.        ,   0.75461962],\n       [  1.        ,   2.        ,   3.        ,   4.        ]])"},"output_type":"execute_result","exec_count":77}},"cell_type":"code","exec_count":77}
{"type":"cell","id":"63664e","pos":72,"input":"Para inserir uma coluna. Note que temos que criar um vetor coluna.\n","cell_type":"markdown"}
{"type":"cell","id":"ff61dd","pos":73,"input":"np.hstack((numeros,[[1],[2],[3]]))","output":{"0":{"data":{"text/plain":"array([[  2.06710983,   1.76906381,  50.        ,   2.12887744,   1.        ],\n       [  2.73587053,  10.        ,  50.        ,   7.54433951,   2.        ],\n       [  1.68564568,   0.94910583,  50.        ,   0.75461962,   3.        ]])"},"output_type":"execute_result","exec_count":78}},"cell_type":"code","exec_count":78}
{"type":"cell","id":"e91e49","pos":74,"input":"## Álgebra Linear","cell_type":"markdown"}
{"type":"cell","id":"ba6a5b","pos":75,"input":"\nfrom numpy import linalg as LA\narr2d = np.array((  (100,200,300), \n          (111,222,333), \n          (129,461,795) ))\n\n","cell_type":"code","exec_count":80,"collapsed":true}
{"type":"cell","id":"c78dd8","pos":76,"input":"Calcula os autovalores:","cell_type":"markdown"}
{"type":"cell","id":"d6dae7","pos":77,"input":"eig_val, eig_vec = LA.eig(arr2d)","cell_type":"code","exec_count":81}
{"type":"cell","id":"b615df","pos":78,"input":"LA.eig(arr2d)","output":{"0":{"data":{"text/plain":"(array([  1.05664180e+03,   6.03582029e+01,   2.37768608e-14]),\n array([[ 0.34860455,  0.57805139,  0.41356846],\n        [ 0.38695105,  0.64163704, -0.81514943],\n        [ 0.8536649 , -0.50414135,  0.4055768 ]]))"},"output_type":"execute_result","exec_count":82}},"cell_type":"code","exec_count":82}
{"type":"cell","id":"56aba7","pos":79,"input":"eig_val","output":{"0":{"data":{"text/plain":"array([  1.05664180e+03,   6.03582029e+01,   2.37768608e-14])"},"output_type":"execute_result","exec_count":83}},"cell_type":"code","exec_count":83}
{"type":"cell","id":"346e76","pos":80,"input":"eig_vec","output":{"0":{"data":{"text/plain":"array([[ 0.34860455,  0.57805139,  0.41356846],\n       [ 0.38695105,  0.64163704, -0.81514943],\n       [ 0.8536649 , -0.50414135,  0.4055768 ]])"},"output_type":"execute_result","exec_count":84}},"cell_type":"code","exec_count":84}
{"type":"cell","id":"b3ce41","pos":82,"input":"LA.det(arr2d) # calcula determinante\n","output":{"0":{"data":{"text/plain":"1.2808527571905839e-09"},"output_type":"execute_result","exec_count":86}},"cell_type":"code","exec_count":86}
{"type":"cell","id":"14a1c9","pos":83,"input":"LA.inv(arr2d) # calcula inversa","output":{"0":{"data":{"text/plain":"array([[  1.79388301e+13,  -1.61611082e+13,  -5.73046402e-03],\n       [ -3.53576941e+13,   3.18537785e+13,  -3.19792599e-03],\n       [  1.75921860e+13,  -1.58488163e+13,   4.04210533e-03]])"},"output_type":"execute_result","exec_count":87}},"cell_type":"code","exec_count":87}
{"type":"cell","id":"373a5f","pos":84,"input":"Resolve sistemas lineares na forma\n\n$$ a x + b y = c $$\n$$ d x + e y = f $$","cell_type":"markdown"}
{"type":"cell","id":"75e1c2","pos":86,"input":"arr1 = np.array([[2,3], [3,4]])\narr2 = np.array([4,5])\nresults = np.linalg.solve(arr1, arr2)\nresults","output":{"0":{"data":{"text/plain":"array([-1.,  2.])"},"output_type":"execute_result","exec_count":89}},"cell_type":"code","exec_count":89}
{"type":"cell","id":"a4f1e4","pos":87,"input":"## Exercícios para fazer na aula\n- Encontre índices de elementos não nulos de [1,2,0,0,4,0] \n- Extrair a parte inteira de uma matriz aleatória\n- Considere uma matriz aleatória de 10$\\times$2 que represente coordenadas cartesianas, converta-as em coordenadas polares\n- Considere um vetor aleatório com forma (100,2) representando coordenadas, encontre as  distâncias entre todos os pontos \n- Considere o vetor [1, 2, 3, 4, 5], como construir um novo vetor com 3 zeros consecutivos intercalados entre cada valor?","cell_type":"markdown"}
{"type":"cell","id":"bba91d","pos":89,"input":"### Exercício 1 - Jogo da Vida (0.25)\n- O Jogo da Vida (The Game of Life) é um autômato celular (cellular automaton) introduzido por John Horton Conway em 1970. Um automato celular consiste de uma rede de células. Cada célula pode estar em um número finito de estados, como morta ou viva. O “jogo” é na verdade uma simulação que permite observar a evolução de um processo a partir de uma certa condição inicial.\n- O jogo se desenvolve sobre uma matriz bi-dimensional que pode ser tão grande quanto se queira. Vamos chamar essa matriz de mapa. Cada posição ou célula do mapa pode estar vazia (= célula morta) ou ocupada por um agente (= célula viva). Cada posição possui também até 8 posições vizinhas: imediatamente acima, abaixo, aos lados e nas diagonais. Em um determinado instante, o mapa contém uma geração de agentes. A geração no instante seguinte é determinada segundo as regras abaixo:\n- Novos agentes nascem em células vazias que possuam exatamente 3 agentes vizinhos;\n- **Agentes com 2 ou 3 agentes vizinhos sobrevivem;**\n- **Agentes com menos de 2 agentes vizinhos morrem for falta de recursos;**\n- **Agentes com mais de 3 agentes vizinhos morrem por excesso de competição.**","cell_type":"markdown"}
{"type":"cell","id":"b58d5d","pos":90,"input":"from math import atan2","cell_type":"code","exec_count":91,"collapsed":true}
{"type":"cell","id":"fe587d","pos":91,"input":"atan2(2,3)","output":{"0":{"data":{"text/plain":"0.5880026035475675"},"output_type":"execute_result","exec_count":92}},"cell_type":"code","exec_count":92}
{"type":"cell","id":"d9fa64","pos":92,"input":"numeros","output":{"0":{"data":{"text/plain":"array([[  2.06710983,   1.76906381,  50.        ,   2.12887744],\n       [  2.73587053,  10.        ,  50.        ,   7.54433951],\n       [  1.68564568,   0.94910583,  50.        ,   0.75461962]])"},"output_type":"execute_result","exec_count":93}},"cell_type":"code","exec_count":93}
{"type":"cell","id":"7e41f7","pos":93,"input":"np.argwhere(numeros >40)","output":{"0":{"data":{"text/plain":"array([[0, 2],\n       [1, 2],\n       [2, 2]])"},"output_type":"execute_result","exec_count":94}},"cell_type":"code","exec_count":94}
{"type":"cell","id":"4a75a2","pos":96,"input":"mat=np.random.rand(10,2)","cell_type":"code","exec_count":102}
{"type":"cell","id":"9e08f0","pos":97,"input":"np.array([[LA.norm((x-y)) for x in mat] for y in mat])\n","output":{"0":{"output_type":"execute_result"}},"cell_type":"code","exec_count":112}
{"type":"cell","id":"390c2b","pos":98,"input":"size=len(mat)\nmatdist=np.zeros((size,size))\nfor i in range(size):\n    for j in range(size):\n        matdist[i,j]=LA.norm(mat[i]-mat[j])\n","cell_type":"code","exec_count":125}
{"type":"cell","id":"c8dcd2","pos":99,"input":"matdist","output":{"0":{"output_type":"execute_result"}},"cell_type":"code","exec_count":126}
{"type":"cell","id":"8534c1","pos":100,"input":"## Jogo da Vida","cell_type":"markdown"}
{"type":"cell","id":"1ab349","pos":102,"input":"def step(matlife):\n    matviz=np.zeros((size,size))\n    for i in range(size):\n        for j in range(size):        \n            matviz[i,j]=matlife[(i+1)%size,j]+matlife[(i-1)%size,j]+matlife[i,(j+1) % size]+matlife[i,(j-1) % size]+matlife[(i+1)%size,(j+1) % size]+matlife[(i-1)%size,(j-1)% size]+matlife[(i-1)%size,(j+1) % size]+matlife[(i+1)%size,(j-1) % size]\n    matlife2=np.zeros((size,size))\n    bool1=matviz==2\n    bool2=matviz==3\n    matlife2[(bool1|bool2)]=1\n    return matlife2","cell_type":"code","exec_count":2}
{"type":"cell","id":"306b0a","pos":103,"input":"size=20\nmatlife=np.random.randint(2,size=(size,size))\nmatplotlib.pyplot.matshow(matlife)\nL=[]\nfor i in range(100):\n    matlife=step(matlife)\n    matplotlib.pyplot.matshow(matlife)","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.4/dist-packages/matplotlib/pyplot.py:524: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  max_open_warning, RuntimeWarning)\n"},"1":{"data":{"image/png":"a3b606aba5e98b9e478511cd0e2f89c48bb761a9"}},"2":{"data":{"image/png":"887c8f67cdcaefec68da40ce1b7f37a86c666121"}},"3":{"data":{"image/png":"921911d04960118c13cb5b9580a68d3ea9cf6837"}},"4":{"data":{"image/png":"93203b368cb84ba08239cc037b215a749cb67c69"}},"5":{"data":{"image/png":"0698ef4345e987200c8707968b06c74875973876"}},"6":{"data":{"image/png":"f28129d9779f54be8b0669a508e3bb8d388aaf7d"}},"7":{"data":{"image/png":"9069ffc132de6ee3c741bfd4d2fdfe3047e80e14"}},"8":{"data":{"image/png":"7982f91741eaf8791b50a883a770039c215c85f1"}},"9":{"data":{"image/png":"8e9be016f0037e556351989c89a20100d2f7365c"}},"10":{"data":{"image/png":"de1649a548fe1e9046a8e32b9383f46f3ed9a2ee"}},"11":{"data":{"image/png":"b5c15046aa9c7241818463e0ce1a015dd05f07b2"}},"12":{"data":{"image/png":"3728ba8db2130b71abefb152c4dfa526de0afee8"}},"13":{"data":{"image/png":"2f49107d771baeae3d635b902126d8caa4ff311e"}},"14":{"data":{"image/png":"7c70d5dd8a15df8361b806ed1cba4026fe21724a"}},"15":{"data":{"image/png":"892ca068a9c3583cfa1e0026d333d8e51fa794ef"}},"16":{"data":{"image/png":"4bb59ff4620dc72d5dab47d3e6bdfe115bcd5eba"}},"17":{"data":{"image/png":"57b3293a8cdc37a85b0cde5100a2a5d14e91c17f"}},"18":{"data":{"image/png":"aeddc132b436c65c4f86a99d4240e47dea702cd6"}},"19":{"data":{"image/png":"3413dd739c5ae945f175b9f279f4edf4e2ec7055"}},"20":{"data":{"image/png":"b4e5e01812f9e614b24b1ad0226653cfef807bd3"}},"21":{"data":{"image/png":"56670fee45979f9a884c04a6d6d72c0409a03161"}},"22":{"data":{"image/png":"36576c1829b84b41a8b5e658766f47c0f96490b9"}},"23":{"data":{"image/png":"529100dc83bbcc372fdd9af339068dae08991254"}},"24":{"data":{"image/png":"7b7671c7144e148b179d5523731eb30b75ce6263"}},"25":{"data":{"image/png":"ca4cbb2ace51c8dc0795f1b650bb093a212276dc"}},"26":{"data":{"image/png":"750f5af297f55153c6fa6de5506d8c66488140c0"}},"27":{"data":{"image/png":"47f4895791aef1626c8b39d6fa5a24d8fb42e0f1"}},"28":{"data":{"image/png":"6d76e4873248c4e80cc30aef20514b7c14f73c8f"}},"29":{"data":{"image/png":"1b2812e543e3b22d4268d1dbb18d61e85b588229"}},"30":{"data":{"image/png":"9a19318f7248be78ca484980e2fdaa5b1e77df73"}},"31":{"data":{"image/png":"3da1aad6bff37926333e36e58b44971fc277133f"}},"32":{"data":{"image/png":"d357b7f2e2b05ab0b0cf6a6c374444b0c9b95c92"}},"33":{"data":{"image/png":"c717d17a770469d837f8fc05cabfe1898a951cc1"}},"34":{"data":{"image/png":"f1bb12befd73f1facb104c4a9dcdfe81d227e305"}},"35":{"data":{"image/png":"dd1bff83466119cfec6c811cf0b64c6fe48ac102"}},"36":{"data":{"image/png":"645843776eeeeffabd2af3b71d45f08398ae31ab"}},"37":{"data":{"image/png":"776babbb9beeed9a3f0092e3140b811444bc0902"}},"38":{"data":{"image/png":"6e7a2e0d818666d88f6804d25c3c5b112848705a"}},"39":{"data":{"image/png":"2943681524a66703c4f3ca12190b1d6841ace8c6"}},"40":{"data":{"image/png":"b2cf8ba60b16bd9370a57c29c6b1456ff55d9714"}},"41":{"data":{"image/png":"9e0b214847eb273d4ddd95f8ce984959b08c4de9"}},"42":{"data":{"image/png":"6d2cee1e11e7ad72ba9c5dd6393fefce20623ff8"}},"43":{"data":{"image/png":"4b31819a21ff87187bc2af755d3e2331239e3343"}},"44":{"data":{"image/png":"92f3493968c11d556597249a6767029fdb7a3168"}},"45":{"data":{"image/png":"d61bd3acc3a45941413aa73cbc9f1f3cbc7926c9"}},"46":{"data":{"image/png":"d29d2476dad89910e476d9b9f6cabc8b61aec946"}},"47":{"data":{"image/png":"d7bb2bae595d830bda2880187fc4f21c305766aa"}},"48":{"data":{"image/png":"626d93245031360393b2649f02097f40af79a5c3"}},"49":{"data":{"image/png":"12ffdf13a8705639672261348f0f9b5ebf3ced63"}},"50":{"data":{"image/png":"7a390fc1e16f5bc5fff417a00c097d916c4dcf90"}},"51":{"data":{"image/png":"75bbfa7992de5ed2cdf5e9df6b4c05f32322227d"}},"52":{"data":{"image/png":"0edac86fc6e6269c6ea13ec1ed85f94c1d2e6414"}},"53":{"data":{"image/png":"70d016b3d32a55ffc044f8669468ef217b6f506c"}},"54":{"data":{"image/png":"45c5be3b7264b7cd65eb19d1a584234d6e39b86e"}},"55":{"data":{"image/png":"158bb0e6b0b5939bbc3a73119964f9c3d0f5c919"}},"56":{"data":{"image/png":"9f00b6ba1ccf522e5a48b9a432699e8111fcf6e6"}},"57":{"data":{"image/png":"8db7d984328bd514e6ef503c9fe015bb58b90871"}},"58":{"data":{"image/png":"0ff5846ecd7feeeb62a23422f130d4f78cbe7570"}},"59":{"data":{"image/png":"deeef4868aa9cd74d7772a767040224def565e69"}},"60":{"data":{"image/png":"d867dacc2c8318dae30bc8b5424edc3e355ae34b"}},"61":{"data":{"image/png":"d38d10f8d0fd0d13e3093e0a4c9de5736e66ac80"}},"62":{"data":{"image/png":"e3c54b9d4bcc3f26bfc6ae5b87dbab58c4c37845"}},"63":{"data":{"image/png":"bc84ec187c5e9956e669432ac602b4a9f54120ec"}},"64":{"data":{"image/png":"1755f5121565e211540e00c71f3cebf2de86df3e"}},"65":{"data":{"image/png":"f635042ebf29cf3118d0ee43c1e7dd46f04bb548"}},"66":{"data":{"image/png":"84f80519b86c546351d6b5b6571b679cbe15c997"}},"67":{"data":{"image/png":"31179efe94ffeaddcc9c50cc666a28e6ae565f03"}},"68":{"data":{"image/png":"ffd596bf2faaa14ae02ce13e7fec7dbaba44f484"}},"69":{"data":{"image/png":"1b26c7a25be5af33118c85486b1e3bebe18bced0"}},"70":{"data":{"image/png":"2af88a4c6e6c0fa0650e8f9976cf70b48b3262c0"}},"71":{"data":{"image/png":"b5ca80fb0a55279a36c7aca95c43ba6665a64eb3"}},"72":{"data":{"image/png":"e73171162320886315cf9537113a40bd91f39d50"}},"73":{"data":{"image/png":"22e72799b151c30c3119d00863339f26a90fba1a"}},"74":{"data":{"image/png":"f625d352ccca923965bf388035bdb2d4496f1c3d"}},"75":{"data":{"image/png":"3a23b0fe9bfb675deeddcf158961934f81c80b62"}},"76":{"data":{"image/png":"34d371c03d4cbf0feed656a16c8bbbd60ae71ead"}},"77":{"data":{"image/png":"4b84124b0c5444d9f4670a218f7f17bfd4991996"}},"78":{"data":{"image/png":"256c403a057c16b4d941b5c26a8123d931f54113"}},"79":{"data":{"image/png":"f4a5668c86462accb306cd6788ca3a82dbd92438"}},"80":{"data":{"image/png":"0d6f142bcee5d953917da31ffa26c4eb7a6c29f0"}},"81":{"data":{"image/png":"e3162474db62f1f8aa4fb401cd342eabd214ccf4"}},"82":{"data":{"image/png":"84a735504644e7203a58f49c4643254fdd3609d3"}},"83":{"data":{"image/png":"dcd309414fad49d64a675b1170e02b1e9e26bf62"}},"84":{"data":{"image/png":"b9a06da9ef205d68db44462e2f3fc39caff3c6a5"}},"85":{"data":{"image/png":"9ff41d9a718387e5be02a5d7114fb0355bd451ab"}},"86":{"data":{"image/png":"917ae1e3032c4207910b813dcd68ae85940bfe2b"}},"87":{"data":{"image/png":"8d8bfc54906446f6b84fbd92e483abbc5de02045"}},"88":{"data":{"image/png":"1c71b506aa08a89f90420ec0c151af3ee3bc55d4"}},"89":{"data":{"image/png":"a60746640d396a449b7dcaf274fc99d321a0710e"}},"90":{"data":{"image/png":"79b8dcd983d625c94fdcf4ca808005cf4bf266b9"}},"91":{"data":{"image/png":"d8a240718861e1ffe2b7fb38d2f2925f4f8fba86"}},"92":{"data":{"image/png":"e2c61222254fed6155998de821f40bc5177989d0"}},"93":{"data":{"image/png":"715d37b4dcdb16b45348ccc696eee1baad41ac50"}},"94":{"data":{"image/png":"fcde3a38daa5131122a4276609fe358ca4257f1b"}},"95":{"data":{"image/png":"746a0ecf5a0fe6bf449eda5eb7e00530808b4aa3"}},"96":{"data":{"image/png":"57546de9c15ced83ab046c6ffaefb7fb8bf684b5"}},"97":{"data":{"image/png":"f1ce72f0f154770446cbf33538e9048a873b2b2d"}},"98":{"data":{"image/png":"a71a5f375da97cfbcf90ed1b155c58fdee3e8c6e"}},"99":{"data":{"image/png":"b1d736e5e603a98672f193a52fddc1dc385c17c1"}},"100":{"data":{"image/png":"c15bdb2bd5d6757755d9183f438d2ad92471d8fc"}},"101":{"data":{"image/png":"a09fb3e47a343d975c52423f4418adc0ef05e3e6"}}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"c5455e","pos":104,"input":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\n\nfig, ax = plt.subplots()\nxdata, ydata = [], []\nln, = plt.plot([], [], 'ro', animated=True)\n\ndef init():\n    ax.set_xlim(0, 2*np.pi)\n    ax.set_ylim(-1, 1)\n    return ln,\n\ndef update(frame):\n    xdata.append(frame)\n    ydata.append(np.sin(frame))\n    ln.set_data(xdata, ydata)\n    return ln,\n\nani = FuncAnimation(fig, update, frames=np.linspace(0, 2*np.pi, 128),\n                    init_func=init, blit=True)\nplt.show()","output":{"0":{"data":{"image/png":"ec160a1ad96ec03b8350b891496b4cf61148ade7"},"output_type":"display_data"}},"cell_type":"code","exec_count":9}
{"type":"cell","id":"0ea2f3","pos":105,"input":"from matplotlib import animation, rc\nfrom IPython.display import HTML","cell_type":"code","exec_count":12,"collapsed":true}
{"type":"cell","id":"1c9ad7","pos":106,"input":"%matplotlib inline","cell_type":"code","exec_count":15,"collapsed":true}
{"type":"cell","id":"6764f5","pos":107,"input":"\"\"\"\n===========\nRandom data\n===========\n\nAn animation of random data.\n\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nfig, ax = plt.subplots()\nline, = ax.plot(np.random.rand(10))\nax.set_ylim(0, 1)\n\n\ndef update(data):\n    line.set_ydata(data)\n    return line,\n\n\ndef data_gen():\n    while True:\n        yield np.random.rand(10)\n\nani = animation.FuncAnimation(fig, update, data_gen, interval=100)\nplt.show()","output":{"0":{"data":{"image/png":"ce58721d0c43adf7f2a78a7427cc92d096ce6361"},"output_type":"display_data"}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"07e5ca","pos":108,"input":"ani.to_html5_video()","output":{"0":{"ename":"ValueError","evalue":"Invalid file object: <_io.BufferedReader name=173>","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-4d7b92ec167d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mani\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_html5_video\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mto_html5_video\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1157\u001b[0m                                 \u001b[0mbitrate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'animation.bitrate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m                                 fps=1000. / self._interval)\n\u001b[0;32m-> 1159\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwriter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwriter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1161\u001b[0m             \u001b[0;31m# Now open and base64 encode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs)\u001b[0m\n\u001b[1;32m   1011\u001b[0m                         \u001b[0;31m# TODO: See if turning off blit is really necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1012\u001b[0m                         \u001b[0manim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_next_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1013\u001b[0;31m                     \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrab_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1014\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1015\u001b[0m         \u001b[0;31m# Reconnect signal for first draw if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type, value, traceback)\u001b[0m\n\u001b[1;32m     75\u001b[0m                 \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mthrow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraceback\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't stop after throw()\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msaving\u001b[0;34m(self, *args, **kw)\u001b[0m\n\u001b[1;32m    254\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 256\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mfinish\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    274\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    275\u001b[0m         \u001b[0;34m'Finish any processing for writing the movie.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 276\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgrab_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mcleanup\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    309\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m         \u001b[0;34m'Clean-up and collect the process used to write the movie file.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m         \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_proc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommunicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_frame_sink\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         verbose.report('MovieWriter -- '\n","\u001b[0;32m/usr/lib/python3.4/subprocess.py\u001b[0m in \u001b[0;36mcommunicate\u001b[0;34m(self, input, timeout)\u001b[0m\n\u001b[1;32m    960\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    961\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 962\u001b[0;31m                 \u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mendtime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    963\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    964\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communication_started\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/subprocess.py\u001b[0m in \u001b[0;36m_communicate\u001b[0;34m(self, input, endtime, orig_timeout)\u001b[0m\n\u001b[1;32m   1608\u001b[0m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_WRITE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1609\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1610\u001b[0;31m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_READ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1611\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1612\u001b[0m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_READ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36mregister\u001b[0;34m(self, fileobj, events, data)\u001b[0m\n\u001b[1;32m    340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m             \u001b[0mpoll_events\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mevents\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0mEVENT_READ\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36mregister\u001b[0;34m(self, fileobj, events, data)\u001b[0m\n\u001b[1;32m    226\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid events: {!r}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 228\u001b[0;31m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSelectorKey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fileobj_lookup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    229\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfd\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fd_to_key\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36m_fileobj_lookup\u001b[0;34m(self, fileobj)\u001b[0m\n\u001b[1;32m    213\u001b[0m         \"\"\"\n\u001b[1;32m    214\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 215\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0m_fileobj_to_fd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    216\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m             \u001b[0;31m# Do an exhaustive search.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36m_fileobj_to_fd\u001b[0;34m(fileobj)\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mAttributeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m             raise ValueError(\"Invalid file object: \"\n\u001b[0;32m---> 39\u001b[0;31m                              \"{!r}\".format(fileobj)) from None\n\u001b[0m\u001b[1;32m     40\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfd\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid file descriptor: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid file object: <_io.BufferedReader name=173>"]}},"cell_type":"code","exec_count":17}
{"type":"cell","id":"79f874","pos":109,"input":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML","cell_type":"code","exec_count":19,"collapsed":true}
{"type":"cell","id":"82bcb5","pos":110,"input":"rc('animation', html='html5')","cell_type":"code","exec_count":21,"collapsed":true}
{"type":"cell","id":"4bf2c2","pos":111,"input":"# First set up the figure, the axis, and the plot element we want to animate\nfig, ax = plt.subplots()\n\nax.set_xlim(( 0, 2))\nax.set_ylim((-2, 2))\n\nline, = ax.plot([], [], lw=2)\n\n# initialization function: plot the background of each frame\ndef init():\n    line.set_data([], [])\n    return (line,)\n\n# animation function. This is called sequentially\ndef animate(i):\n    x = np.linspace(0, 2, 1000)\n    y = np.sin(2 * np.pi * (x - 0.01 * i))\n    line.set_data(x, y)\n    return (line,)\n\n# call the animator. blit=True means only re-draw the parts that have changed.\nanim = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=100, interval=20, blit=True)\nHTML(anim.to_html5_video())","output":{"0":{"ename":"ValueError","evalue":"Invalid file object: <_io.BufferedReader name=173>","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-16e0cdc1ef1c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m anim = animation.FuncAnimation(fig, animate, init_func=init,\n\u001b[1;32m     23\u001b[0m                                frames=100, interval=20, blit=True)\n\u001b[0;32m---> 24\u001b[0;31m \u001b[0mHTML\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_html5_video\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mto_html5_video\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1157\u001b[0m                                 \u001b[0mbitrate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'animation.bitrate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m                                 fps=1000. / self._interval)\n\u001b[0;32m-> 1159\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwriter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwriter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1161\u001b[0m             \u001b[0;31m# Now open and base64 encode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs)\u001b[0m\n\u001b[1;32m   1011\u001b[0m                         \u001b[0;31m# TODO: See if turning off blit is really necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1012\u001b[0m                         \u001b[0manim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_next_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1013\u001b[0;31m                     \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrab_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1014\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1015\u001b[0m         \u001b[0;31m# Reconnect signal for first draw if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type, value, traceback)\u001b[0m\n\u001b[1;32m     75\u001b[0m                 \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mthrow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraceback\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't stop after throw()\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msaving\u001b[0;34m(self, *args, **kw)\u001b[0m\n\u001b[1;32m    254\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 256\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mfinish\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    274\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    275\u001b[0m         \u001b[0;34m'Finish any processing for writing the movie.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 276\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgrab_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mcleanup\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    309\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m         \u001b[0;34m'Clean-up and collect the process used to write the movie file.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m         \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_proc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommunicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_frame_sink\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         verbose.report('MovieWriter -- '\n","\u001b[0;32m/usr/lib/python3.4/subprocess.py\u001b[0m in \u001b[0;36mcommunicate\u001b[0;34m(self, input, timeout)\u001b[0m\n\u001b[1;32m    960\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    961\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 962\u001b[0;31m                 \u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mendtime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    963\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    964\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communication_started\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/subprocess.py\u001b[0m in \u001b[0;36m_communicate\u001b[0;34m(self, input, endtime, orig_timeout)\u001b[0m\n\u001b[1;32m   1608\u001b[0m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_WRITE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1609\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1610\u001b[0;31m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_READ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1611\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1612\u001b[0m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_READ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36mregister\u001b[0;34m(self, fileobj, events, data)\u001b[0m\n\u001b[1;32m    340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m             \u001b[0mpoll_events\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mevents\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0mEVENT_READ\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36mregister\u001b[0;34m(self, fileobj, events, data)\u001b[0m\n\u001b[1;32m    226\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid events: {!r}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 228\u001b[0;31m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSelectorKey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fileobj_lookup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    229\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfd\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fd_to_key\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36m_fileobj_lookup\u001b[0;34m(self, fileobj)\u001b[0m\n\u001b[1;32m    213\u001b[0m         \"\"\"\n\u001b[1;32m    214\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 215\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0m_fileobj_to_fd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    216\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m             \u001b[0;31m# Do an exhaustive search.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36m_fileobj_to_fd\u001b[0;34m(fileobj)\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mAttributeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m             raise ValueError(\"Invalid file object: \"\n\u001b[0;32m---> 39\u001b[0;31m                              \"{!r}\".format(fileobj)) from None\n\u001b[0m\u001b[1;32m     40\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfd\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid file descriptor: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid file object: <_io.BufferedReader name=173>"]},"1":{"data":{"image/png":"88b44e1c5133b35caa55626b317efd7106036171"},"output_type":"display_data"}},"cell_type":"code","exec_count":22}
{"type":"cell","id":"cb684a","pos":112,"input":"","cell_type":"code","exec_count":0,"collapsed":true}
{"type":"cell","id":"eea527","pos":113,"input":"import numpy as np\n\n%matplotlib inline\nimport matplotlib\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\nmatplotlib.rc('animation', html='html5')\n\nfrom ipywidgets import interact, interactive, widgets\nfrom IPython.display import display","cell_type":"code","exec_count":23,"collapsed":true}
{"type":"cell","id":"0104bf","pos":114,"input":"MyFigure, MyAxes = plt.subplots()\nMyAxes.set_xlim(( 0, 2*np.pi))\nMyAxes.set_ylim((-1.5, 1.5))\nMyLine, = MyAxes.plot([], [], lw=2)","output":{"0":{"data":{"image/png":"35c95723e3a388a18add76037e756450d6867e85"},"output_type":"display_data"}},"cell_type":"code","exec_count":24}
{"type":"cell","id":"8001d0","pos":115,"input":"x=np.linspace(0,2*np.pi)\nAnimationFrames = 100  #total number of frames in animation.\nDelayBetweenFrames = 20 #in msec (20 gives 50 fps)\nAnimationTime = AnimationFrames * DelayBetweenFrames/1000\nprint (\"The animation will be {:.1f} seconds long.\".format(AnimationTime))","cell_type":"raw"}
{"type":"cell","id":"6a685f","pos":116,"input":"def a(i):\n    y = np.sin(x + 2*np.pi*i/AnimationFrames)\n    MyLine.set_data(x, y)\n    return (MyLine,)","cell_type":"code","exec_count":26,"collapsed":true}
{"type":"cell","id":"450d2d","pos":117,"input":"MyAnimation = animation.FuncAnimation(MyFigure, a,\n                               frames=AnimationFrames, interval=DelayBetweenFrames, blit=True)\n","cell_type":"code","exec_count":27,"collapsed":true}
{"type":"cell","id":"903f58","pos":118,"input":"MyAnimation\n","output":{"0":{"ename":"ValueError","evalue":"Invalid file object: <_io.BufferedReader name=175>","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    307\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 309\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    310\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36m_repr_html_\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1183\u001b[0m         \u001b[0mfmt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'animation.html'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1184\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'html5'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1185\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_html5_video\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mto_html5_video\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1157\u001b[0m                                 \u001b[0mbitrate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'animation.bitrate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m                                 fps=1000. / self._interval)\n\u001b[0;32m-> 1159\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwriter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwriter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1161\u001b[0m             \u001b[0;31m# Now open and base64 encode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs)\u001b[0m\n\u001b[1;32m   1011\u001b[0m                         \u001b[0;31m# TODO: See if turning off blit is really necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1012\u001b[0m                         \u001b[0manim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_next_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1013\u001b[0;31m                     \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrab_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1014\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1015\u001b[0m         \u001b[0;31m# Reconnect signal for first draw if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type, value, traceback)\u001b[0m\n\u001b[1;32m     75\u001b[0m                 \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mthrow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraceback\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't stop after throw()\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msaving\u001b[0;34m(self, *args, **kw)\u001b[0m\n\u001b[1;32m    254\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 256\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mfinish\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    274\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    275\u001b[0m         \u001b[0;34m'Finish any processing for writing the movie.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 276\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgrab_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mcleanup\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    309\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m         \u001b[0;34m'Clean-up and collect the process used to write the movie file.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m         \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_proc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommunicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_frame_sink\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         verbose.report('MovieWriter -- '\n","\u001b[0;32m/usr/lib/python3.4/subprocess.py\u001b[0m in \u001b[0;36mcommunicate\u001b[0;34m(self, input, timeout)\u001b[0m\n\u001b[1;32m    960\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    961\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 962\u001b[0;31m                 \u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mendtime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    963\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    964\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communication_started\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/subprocess.py\u001b[0m in \u001b[0;36m_communicate\u001b[0;34m(self, input, endtime, orig_timeout)\u001b[0m\n\u001b[1;32m   1608\u001b[0m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_WRITE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1609\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1610\u001b[0;31m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_READ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1611\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1612\u001b[0m                     \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEVENT_READ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36mregister\u001b[0;34m(self, fileobj, events, data)\u001b[0m\n\u001b[1;32m    340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m             \u001b[0mpoll_events\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mevents\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0mEVENT_READ\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36mregister\u001b[0;34m(self, fileobj, events, data)\u001b[0m\n\u001b[1;32m    226\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid events: {!r}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 228\u001b[0;31m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSelectorKey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fileobj_lookup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    229\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfd\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fd_to_key\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36m_fileobj_lookup\u001b[0;34m(self, fileobj)\u001b[0m\n\u001b[1;32m    213\u001b[0m         \"\"\"\n\u001b[1;32m    214\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 215\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0m_fileobj_to_fd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    216\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m             \u001b[0;31m# Do an exhaustive search.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/selectors.py\u001b[0m in \u001b[0;36m_fileobj_to_fd\u001b[0;34m(fileobj)\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mAttributeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m             raise ValueError(\"Invalid file object: \"\n\u001b[0;32m---> 39\u001b[0;31m                              \"{!r}\".format(fileobj)) from None\n\u001b[0m\u001b[1;32m     40\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfd\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid file descriptor: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid file object: <_io.BufferedReader name=175>"]},"1":{"data":{"text/plain":"<matplotlib.animation.FuncAnimation at 0x7f3da0985b00>"},"output_type":"execute_result","exec_count":28}},"cell_type":"code","exec_count":28}
{"type":"cell","id":"da4128","pos":119,"input":"","cell_type":"code","exec_count":0,"collapsed":true}
{"type":"file","last_load":1497480431866}