{"type":"settings","kernel":"python3","backend_state":"running","trust":true,"metadata":{"celltoolbar":"Slideshow","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}},"kernel_state":"idle"}
{"type":"cell","id":"343a47","pos":22,"input":"### Criando matriz com Reshape","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[  8.32681974e-01,   5.71605994e-01,   5.00000000e+01,\n          4.89933565e-01,   1.00000000e+00],\n       [  3.21883113e-01,   8.89331005e-01,   5.00000000e+01,\n          9.87860389e-01,   2.00000000e+00],\n       [  3.66661641e-02,   1.14896277e-01,   5.00000000e+01,\n          2.17864010e-02,   3.00000000e+00]])"},"exec_count":47}},"exec_count":47,"start":1494869971478,"input":"np.hstack((numeros,[[1],[2],[3]]))","state":"done","pos":59,"cell_type":"code","type":"cell","end":1494869971571,"id":"4c8e7b","kernel":"python3"}
{"type":"cell","id":"04dd29","pos":60,"input":"## Álgebra Linear","cell_type":"markdown"}
{"type":"cell","id":"5f65b8","pos":54,"input":"- Para achatar os dados, ou seja acabar com sua estrutura interna","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[14]])"},"exec_count":32}},"exec_count":32,"start":1494869941712,"input":"a=np.array([[1,2,3]])\nnp.dot(a,a.T)","state":"done","pos":33,"cell_type":"code","type":"cell","end":1494869941721,"id":"b70030","kernel":"python3"}
{"output":{"0":{"text":"[-1.  2.]\n","name":"stdout"}},"exec_count":57,"start":1494870013092,"input":"arr1 = np.array([[2,3], [3,4]])\narr2 = np.array([4,5])\nresults = np.linalg.solve(arr1, arr2)\nprint (results)","state":"done","pos":71,"cell_type":"code","type":"cell","end":1494870013102,"id":"fa41f6","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([ 2,  6, 10])"},"exec_count":22}},"exec_count":22,"start":1494869241318,"input":"mat[:,2]## Pegando a terceira coluna","state":"done","pos":29,"cell_type":"code","type":"cell","end":1494869241359,"id":"f1660f","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[  1.79388301e+13,  -1.61611082e+13,  -5.73046402e-03],\n       [ -3.53576941e+13,   3.18537785e+13,  -3.19792599e-03],\n       [  1.75921860e+13,  -1.58488163e+13,   4.04210533e-03]])"},"exec_count":54}},"exec_count":54,"start":1494869982456,"input":"LA.inv(arr2d) # calcula inversa","state":"done","pos":68,"cell_type":"code","type":"cell","end":1494869982464,"id":"608b36","kernel":"python3"}
{"type":"cell","id":"3851b1","pos":17,"input":"### Matriz com zeros\n\n- Para começar, você pode criar uma matriz onde cada elemento é zero. O código a seguir criará uma matriz com 3 linhas e 4 colunas, onde cada elemento é 0 , usando `np.zeros`:","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]"},"exec_count":18}},"exec_count":18,"start":1494869232255,"input":"lista = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\nlista","state":"done","pos":25,"cell_type":"code","type":"cell","end":1494869232266,"id":"88f3ec","kernel":"python3"}
{"exec_count":9,"start":1494868592101,"input":"vetor_coluna=np.array([[1],[2],[3]])","state":"done","pos":12,"cell_type":"code","type":"cell","end":1494868592159,"id":"d17155","kernel":"python3"}
{"exec_count":58,"start":1494872298577,"input":"numeros=np.random.rand(3,4)\nnumeros[ 1 , 2] = 10\nnumeros [:, 2 ] = 50","state":"done","pos":39,"cell_type":"code","type":"cell","end":1494872298661,"id":"f94388","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([  8.32681974e-01,   5.71605994e-01,   5.00000000e+01,\n         4.89933565e-01,   3.21883113e-01,   8.89331005e-01,\n         5.00000000e+01,   9.87860389e-01,   3.66661641e-02,\n         1.14896277e-01,   5.00000000e+01,   2.17864010e-02])"},"exec_count":45}},"exec_count":45,"start":1494869966456,"input":"numeros.ravel()","state":"done","pos":55,"cell_type":"code","type":"cell","end":1494869966467,"id":"d35a76","kernel":"python3"}
{"type":"cell","id":"53f831","pos":7,"input":"- Podemos verificar o número de linhas e colunas em nossos dados usando a propriedade `shape` de _arrays_ NumPy:","cell_type":"markdown"}
{"type":"cell","id":"784d6f","pos":58,"input":"Para inserir uma coluna. Note que temos que criar um vetor coluna.\n","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"1.2808527571905839e-09"},"exec_count":53}},"exec_count":53,"start":1494869980874,"input":"LA.det(arr2d) # calcula determinante\n","state":"done","pos":67,"cell_type":"code","type":"cell","end":1494869980884,"id":"5492b0","kernel":"python3"}
{"type":"cell","id":"c283f2","pos":51,"input":"### Subsetting\n- Uma das operações poderosas que podemos realizar com uma matriz booleana e uma matriz NumPy é selecionar apenas algumas linhas ou colunas na matriz NumPy. Por exemplo, o código abaixo só irá selecionar linhas cuja qualidade é superior a 7 :","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([ True,  True,  True], dtype=bool)"},"exec_count":43}},"exec_count":43,"start":1494869960709,"input":"numeros[:, 2] == 50.","state":"done","pos":50,"cell_type":"code","type":"cell","end":1494869960758,"id":"9bd836","kernel":"python3"}
{"type":"cell","id":"3ae40c","pos":31,"input":"### Operações com arrays\n- O NumPy oferece muito mais recursos que listas para operação e manipulação de arrays que facilitam a computação científica.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[ 1,  2,  3,  9],\n       [ 6,  5,  4, 20],\n       [ 2,  4,  5,  7]])"},"exec_count":4}},"exec_count":4,"start":1494868573764,"input":"a= [[1,2,3,9], [6,5,4,20],[2,4,5,7]]\nmatriz = np.array(a)\nmatriz\n","state":"done","pos":4,"cell_type":"code","type":"cell","end":1494868573859,"id":"90e7a2","kernel":"python3"}
{"type":"cell","id":"ffbe0a","pos":53,"input":"## Operações Diversas","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[ 0.34860455,  0.57805139,  0.41356846],\n       [ 0.38695105,  0.64163704, -0.81514943],\n       [ 0.8536649 , -0.50414135,  0.4055768 ]])"},"exec_count":51}},"exec_count":51,"start":1494869978957,"input":"eig_vec","state":"done","pos":65,"cell_type":"code","type":"cell","end":1494869978965,"id":"404ffd","kernel":"python3"}
{"type":"cell","id":"c1c6a2","pos":34,"input":"### Operações entre arrays de tamanhos distintos\n- Em muitos casos, é necessário trabalhar com arrays com um número distinto de elementos, ou de formas diferentes. Nesse caso, é necessário entender as regras do NumPy que difundem as informações do array menor para o array maior.\n- O termo difusão (broadcasting) descreve como NumPy trata arrays de dimensões diferentes em operações aritméticas. O array menor é “difundido” a uma array maior para que tenham as mesmas dimensões. No caso de um escalar, o valor do escalar é difundido para todos os elementos do array maior, como no exemplo:","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])"},"exec_count":20}},"exec_count":20,"start":1494869237556,"input":"mat = np.array(lista)\nmat","state":"done","pos":27,"cell_type":"code","type":"cell","end":1494869237562,"id":"8b4596","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"[[0, 1, 2, 3], [4, 5, 6, 7]]"},"exec_count":19}},"exec_count":19,"start":1494869234455,"input":"lista[0:-1]","state":"done","pos":26,"cell_type":"code","type":"cell","end":1494869234464,"id":"04e214","kernel":"python3"}
{"type":"cell","id":"643ef7","pos":73,"input":"### Exercício 1 - Jogo da Vida (0.25)\n- O Jogo da Vida (The Game of Life) é um autômato celular (cellular automaton) introduzido por John Horton Conway em 1970. Um automato celular consiste de uma rede de células. Cada célula pode estar em um número finito de estados, como morta ou viva. O “jogo” é na verdade uma simulação que permite observar a evolução de um processo a partir de uma certa condição inicial.\n- O jogo se desenvolve sobre uma matriz bi-dimensional que pode ser tão grande quanto se queira. Vamos chamar essa matriz de mapa. Cada posição ou célula do mapa pode estar vazia (= célula morta) ou ocupada por um agente (= célula viva). Cada posição possui também até 8 posições vizinhas: imediatamente acima, abaixo, aos lados e nas diagonais. Em um determinado instante, o mapa contém uma geração de agentes. A geração no instante seguinte é determinada segundo as regras abaixo:\n- Novos agentes nascem em células vazias que possuam exatamente 3 agentes vizinhos;\n- **Agentes com 2 ou 3 agentes vizinhos sobrevivem;**\n- **Agentes com menos de 2 agentes vizinhos morrem for falta de recursos;**\n- **Agentes com mais de 3 agentes vizinhos morrem por excesso de competição.**","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"dtype('float64')"},"exec_count":60}},"exec_count":60,"start":1494872302079,"input":"numeros.dtype","state":"done","pos":42,"cell_type":"code","type":"cell","end":1494872302166,"id":"709e27","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[  1.,   2.,   3.,   9.],\n       [  6.,   5.,   4.,  20.],\n       [  2.,   4.,   5.,   7.]])"},"exec_count":6}},"exec_count":6,"start":1494868576765,"input":"matriz1 = np.array(a, float)\nmatriz1","state":"done","pos":6,"cell_type":"code","type":"cell","end":1494868576773,"id":"1c01f9","kernel":"python3"}
{"exec_count":8,"start":1494868585762,"input":"vetor_linha=np.array([[1,2,3]]) # cria um vetor linha","state":"done","pos":10,"cell_type":"code","type":"cell","end":1494868585763,"id":"45161b","kernel":"python3"}
{"type":"cell","id":"5ef56b","pos":24,"input":"### Índices e fatias\n- Para acessar um elemento de uma lista de dimensão n é necessário fornecer o valor de n índices, ou seja, 2 índices para uma matriz bidimensional, 3 índices para uma matriz tridimensional e assim por diante.\n- Embora seja possível usar a mesma forma para acessar elementos de um array, uma forma mais eficiente é separando os valores por vírgulas, como a seguir:","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[1],\n       [2],\n       [3]])"},"exec_count":11}},"exec_count":11,"start":1494868625077,"input":"vetor_coluna","state":"done","pos":13,"cell_type":"code","type":"cell","end":1494868625086,"id":"c6d4fc","kernel":"python3"}
{"exec_count":48,"start":1494869973856,"input":"\nfrom numpy import linalg as LA\narr2d = np.array((  (100,200,300), \n          (111,222,333), \n          (129,461,795) ))\n\n","state":"done","pos":61,"cell_type":"code","type":"cell","end":1494869973860,"id":"cd7187","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"list"},"exec_count":5}},"exec_count":5,"start":1494868575264,"input":"type(matriz)\ntype(a)","state":"done","pos":5,"cell_type":"code","type":"cell","end":1494868575363,"id":"a3c186","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[ 0.76702179,  0.89115127,  0.84197227,  0.01857869],\n       [ 0.49746276,  0.76359131,  0.15500811,  0.53019992],\n       [ 0.02270685,  0.19130087,  0.03127047,  0.29043769]])"},"exec_count":16}},"exec_count":16,"start":1494868966756,"input":"np.random.rand(3,4)","state":"done","pos":21,"cell_type":"code","type":"cell","end":1494868966765,"id":"a1fa85","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[1, 2, 3]])"},"exec_count":12}},"exec_count":12,"start":1494868627512,"input":"vetor_coluna.T","state":"done","pos":14,"cell_type":"code","type":"cell","end":1494868627568,"id":"db0789","kernel":"python3"}
{"type":"cell","id":"a657b1","pos":11,"input":"Para criar um vetor coluna temos que fazer:\n","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[ 0.5,  1. ],\n       [ 1.5,  2. ]])"},"exec_count":35}},"exec_count":35,"start":1494869946458,"input":"a2/2","state":"done","pos":37,"cell_type":"code","type":"cell","end":1494869946469,"id":"e314da","kernel":"python3"}
{"output":{"0":{"text":"Soma: [[1 4]\n [6 5]]\nMultiplicação: [[1 4]\n [6 5]]\nSubtração: [[1 4]\n [6 5]]\n","name":"stdout"}},"exec_count":31,"start":1494869940059,"input":"a1 = np.array([[1,2],[3,4]])\nb1 = np.array([[0,2],[3,1]])\nsoma=a1+b1\nmultiplicacao=a1*b1\nsubtracao=b1/a1\nprint('Soma:',soma)\nprint('Multiplicação:',soma)\nprint('Subtração:',soma)","state":"done","pos":32,"cell_type":"code","type":"cell","end":1494869940070,"id":"500a67","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[1],\n       [2],\n       [3]])"},"exec_count":13}},"exec_count":13,"start":1494868630156,"input":"vetor_linha.T","state":"done","pos":15,"cell_type":"code","type":"cell","end":1494868630166,"id":"47b4ca","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([  1.05664180e+03,   6.03582029e+01,   2.37768608e-14])"},"exec_count":50}},"exec_count":50,"start":1494869977457,"input":"eig_val","state":"done","pos":64,"cell_type":"code","type":"cell","end":1494869977466,"id":"807a4a","kernel":"python3"}
{"type":"cell","id":"f550d5","pos":56,"input":"Para inserir uma linha em um `array`:","cell_type":"markdown"}
{"type":"cell","id":"c3a393","pos":43,"input":"- NumPy tem vários tipos de dados diferentes, que mapeiam principalmente para tipos de dados Python, como float e str . Você pode encontrar uma lista completa dos tipos de dados NumPy aqui , mas aqui estão alguns importantes:\n\n- **float** - dados numéricos de ponto flutuante.\n- **int** - dados inteiros.\n- **string** - dados de caracteres.\n- **object** - Objetos Python.\n \n- Os tipos de dados, adicionalmente, terminam com um sufixo que indica quantos bits de memória eles ocupam. Assim, int32 é um tipo de dados inteiros de 32 bits e float64 é um tipo de dados float de 64 bits.","cell_type":"markdown"}
{"output":{"0":{"text":"[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n","name":"stdout"}},"exec_count":17,"start":1494868970342,"input":"x = np.array(range(12)).reshape(3,4)\nprint(x)","state":"done","pos":23,"cell_type":"code","type":"cell","end":1494868970364,"id":"9cb523","kernel":"python3"}
{"type":"cell","id":"083be8","pos":41,"input":"### Tipos de dados NumPy\n-  NumPy armazena valores usando seus próprios tipos de dados, que são distintos de tipos Python como **float** e **str** . Isso ocorre porque o núcleo do NumPy é escrito em uma linguagem de programação chamada C, que armazena dados de forma diferente dos tipos de dados Python. Os tipos de dados NumPy mapeiam entre Python e C, permitindo-nos usar matrizes NumPy sem nenhum engate de conversão.\n- Você pode encontrar o tipo de dados de uma matriz NumPy acessando a propriedade dtype:","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[  8.32681974e-01,   5.71605994e-01,   5.00000000e+01,\n          4.89933565e-01],\n       [  3.21883113e-01,   8.89331005e-01,   5.00000000e+01,\n          9.87860389e-01],\n       [  3.66661641e-02,   1.14896277e-01,   5.00000000e+01,\n          2.17864010e-02]])"},"exec_count":40}},"exec_count":40,"start":1494869957208,"input":"numeros","state":"done","pos":47,"cell_type":"code","type":"cell","end":1494869957221,"id":"fe2997","kernel":"python3"}
{"type":"cell","id":"86184d","pos":9,"input":"Para criar um vetor linha fazemos:\n","cell_type":"markdown"}
{"type":"cell","id":"4bee55","pos":62,"input":"Calcula os autovalores:","cell_type":"markdown"}
{"type":"cell","id":"b0e6ef","pos":1,"input":"Numpy é a biblioteca essencial para computação científica em Python. Ela fornece um objeto que é essencialmente uma\n_array_ multidimensional e métodos de  alto desempenho para trabalhar com esses _arrays_. ","cell_type":"markdown","slide":"subslide"}
{"output":{"0":{"data":{"text/plain":"array([[2, 3],\n       [4, 5]])"},"exec_count":33}},"exec_count":33,"start":1494869943945,"input":"a2 = np.array([[1,2],[3,4]])\na2 + 1","state":"done","pos":35,"cell_type":"code","type":"cell","end":1494869943970,"id":"1aa6ca","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[  6.23142887e-01,   2.00804020e-02,   5.00000000e+01,\n          9.81234919e-01],\n       [  2.07259796e-01,   1.54920538e-01,   5.00000000e+01,\n          8.76973460e-01],\n       [  6.09481686e-02,   6.62230795e-01,   5.00000000e+01,\n          2.86095953e-01]])"},"exec_count":59}},"exec_count":59,"start":1494872299956,"input":"numeros","state":"done","pos":40,"cell_type":"code","type":"cell","end":1494872299967,"id":"9b3356","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[1, 2, 3],\n       [2, 4, 6],\n       [3, 6, 9]])"},"exec_count":14}},"exec_count":14,"start":1494868632203,"input":"vetor_linha*vetor_coluna","state":"done","pos":16,"cell_type":"code","type":"cell","end":1494868632212,"id":"bd264b","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"(3, 4)"},"exec_count":7}},"exec_count":7,"start":1494868580901,"input":"matriz.shape","state":"done","pos":8,"cell_type":"code","type":"cell","end":1494868580912,"id":"2ccefd","kernel":"python3"}
{"type":"cell","id":"5cbbf7","pos":0,"input":"# Numpy","cell_type":"markdown","slide":"slide"}
{"type":"cell","id":"ce8c1f","pos":46,"input":"### NumPy Array Comparações\n- NumPy torna possível testar para ver se as linhas correspondem a certos valores usando operações de comparação matemática como < , > , >= , <= e == . Por exemplo, se queremos ver quais vinhos têm uma classificação de qualidade superior a 5 , podemos fazer o seguinte:","cell_type":"markdown"}
{"type":"cell","id":"017a9a","pos":38,"input":"### Atribuir valores a NumPy Arrays\n- Também podemos usar a indexação para atribuir valores a determinados elementos em arrays. Podemos fazer isso atribuindo diretamente ao valor indexado:","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([False, False, False], dtype=bool)"},"exec_count":42}},"exec_count":42,"start":1494869959707,"input":"numeros[:, 0 ] == 10","state":"done","pos":49,"cell_type":"code","type":"cell","end":1494869959763,"id":"f975be","kernel":"python3"}
{"type":"cell","id":"814a3e","pos":69,"input":"Resolve sistemas lineares na forma\n\n$$ a x + b y = c $$\n$$ d x + e y = f $$","cell_type":"markdown"}
{"type":"cell","id":"ca5119","pos":20,"input":"### Matriz de números aleatórios (Random)\n- É possível criar uma matriz onde cada elemento é um número aleatório usando `numpy.random.rand`. Veja o exemplo a seguir: ","cell_type":"markdown"}
{"exec_count":49,"start":1494869976356,"input":"eig_val, eig_vec = LA.eig(arr2d)","state":"done","pos":63,"cell_type":"code","type":"cell","end":1494869976359,"id":"afac9d","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"1083.3655892633844"},"exec_count":52}},"exec_count":52,"start":1494869979871,"input":"LA.norm(arr2d) # calcula a norma da matriz\n","state":"done","pos":66,"cell_type":"code","type":"cell","end":1494869979956,"id":"745e81","kernel":"python3"}
{"type":"cell","id":"98b8d4","pos":19,"input":"- É útil criar uma matriz com todos os elementos zero nos casos em que você precisa de uma matriz de tamanho fixo, mas ainda não tem nenhum valor para ela.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[  8.32681974e-01,   5.71605994e-01,   5.00000000e+01,\n          4.89933565e-01],\n       [  3.21883113e-01,   8.89331005e-01,   5.00000000e+01,\n          9.87860389e-01],\n       [  3.66661641e-02,   1.14896277e-01,   5.00000000e+01,\n          2.17864010e-02],\n       [  1.00000000e+00,   2.00000000e+00,   3.00000000e+00,\n          4.00000000e+00]])"},"exec_count":46}},"exec_count":46,"start":1494869968981,"input":"np.vstack((numeros, [1,2,3,4]))","state":"done","pos":57,"cell_type":"code","type":"cell","end":1494869968993,"id":"e9ae5d","kernel":"python3"}
{"type":"cell","id":"d29b63","pos":2,"input":"## Arrays\n- Uma matriz numpy é uma tabela de valores, todos do mesmo tipo, e é indexada por uma tupla de inteiros não negativos.\n- O número de dimensões é o grau da matriz.\n- A forma de uma matriz é uma tupla de inteiros que dão o tamanho da matriz ao longo de cada dimensão.\n- Podemos inicializar matrizes numpy de listas concatenadas de Python e acessar elementos usando colchetes:","cell_type":"markdown","slide":"subslide"}
{"output":{"0":{"data":{"text/plain":"array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])"},"exec_count":23}},"exec_count":23,"start":1494869242956,"input":"mat[:,2:]## Duas ultimas colunas e linhas","state":"done","pos":30,"cell_type":"code","type":"cell","end":1494869242966,"id":"f2fbc5","kernel":"python3"}
{"type":"cell","id":"98f63a","pos":72,"input":"## Exercícios para fazer na aula\n- Encontre índices de elementos não nulos de [1,2,0,0,4,0] \n- Extrair a parte inteira de uma matriz aleatória\n- Considere uma matriz aleatória de 10$\\times$2 que represente coordenadas cartesianas, converta-as em coordenadas polares\n- Considere um vetor aleatório com forma (100,2) representando coordenadas, encontre as  distâncias entre todos os pontos \n- Considere o vetor [1, 2, 3, 4, 5], como construir um novo vetor com 3 zeros consecutivos intercalados entre cada valor?","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[ 0,  0, 50,  0],\n       [ 0,  0, 50,  0],\n       [ 0,  0, 50,  0]])"},"exec_count":39}},"exec_count":39,"start":1494869954958,"input":"numeros.astype(int)","state":"done","pos":45,"cell_type":"code","type":"cell","end":1494869954969,"id":"8322fb","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[4, 5, 6, 7]])"},"exec_count":21}},"exec_count":21,"start":1494869239133,"input":"mat[1:-1] ##Pegando penúltima linha","state":"done","pos":28,"cell_type":"code","type":"cell","end":1494869239140,"id":"8238cd","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([], shape=(0, 4), dtype=float64)"},"exec_count":44}},"exec_count":44,"start":1494869963038,"input":"high_quality = numeros[:,1] > 2\nnumeros[high_quality,:][:3,:]","state":"done","pos":52,"cell_type":"code","type":"cell","end":1494869963064,"id":"309096","kernel":"python3"}
{"exec_count":3,"start":1494868572658,"input":"import numpy as np","state":"done","pos":3,"cell_type":"code","type":"cell","end":1494868572660,"id":"0ba11d","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[2, 4],\n       [6, 8]])"},"exec_count":34}},"exec_count":34,"start":1494869945448,"input":"a2 * 2","state":"done","pos":36,"cell_type":"code","type":"cell","end":1494869945457,"id":"dbb573","kernel":"python3"}
{"type":"cell","id":"97622a","pos":70,"input":"$$\\left(\\begin{array} \n a a & b \\\\\nd & e \n\\end{array}\\right)\\cdot\n\\left(\n\\begin{array}\nx x \\\\\ny\n\\end{array}\n\\right)=\n\\left(\n\\begin{array}\nc c \\\\\nf\n\\end{array}\n\\right)\n$$","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([[ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.]])"},"exec_count":15}},"exec_count":15,"start":1494868963156,"input":"empty_array = np.zeros((3,4))\nempty_array","state":"done","pos":18,"cell_type":"code","type":"cell","end":1494868963166,"id":"8bbc59","kernel":"python3"}
{"output":{"0":{"data":{"text/plain":"array([[False, False,  True, False],\n       [False, False,  True, False],\n       [False, False,  True, False]], dtype=bool)"},"exec_count":41}},"exec_count":41,"start":1494869958710,"input":"numeros> 5","state":"done","pos":48,"cell_type":"code","type":"cell","end":1494869958717,"id":"c2ea0c","kernel":"python3"}
{"type":"cell","id":"80475c","pos":44,"input":"### Convertendo tipos de dados\n- Você pode usar o método **numpy.ndarray.astype** para converter uma matriz em um tipo diferente. O método realmente copiará a matriz e retornará uma nova matriz com o tipo de dados especificado. ","cell_type":"markdown"}
{"type":"file","last_load":1494868227964}
{"exec_count":10,"start":1494868594521,"input":"b=np.array([1,2,3])","state":"done","pos":12.5,"type":"cell","end":1494868594558,"id":"de940e","kernel":"python3"}
{"type":"cell","id":"2c2f9d","pos":74,"input":""}