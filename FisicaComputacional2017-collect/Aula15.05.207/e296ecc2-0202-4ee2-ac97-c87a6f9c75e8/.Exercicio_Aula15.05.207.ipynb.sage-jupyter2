{"type":"settings","kernel":"python2","backend_state":"ready","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1494869610993}
{"exec_count":1,"input":"# Exercícios para fazer na aula\n### 1) Encontre índices de elementos não nulos de [1,2,0,0,4,0]\n","state":"done","pos":0,"cell_type":"markdown","type":"cell","id":"6a56ad","kernel":"python2"}
{"output":{"0":{"text":"Os indices dos elementos não nulos sao: \n[0, 1, 4]\n","name":"stdout"}},"exec_count":11,"start":1494870743220,"input":"m = [1,2,0,0,4,0]\nv = []\nfor i in range (len(m)-1):\n  if m[i] != 0:\n    v.append(i)\n    \nprint (\"Os indices dos elementos não nulos sao: \")\nprint (v)\n","scrolled":true,"state":"done","pos":1,"type":"cell","end":1494870743234,"id":"9d505d","kernel":"python2"}
{"output":{"0":{"text":"[[ 0.01953752  0.92900571  0.72934263  0.54655129]\n [ 0.85603919  0.23016439  0.78519469  0.24678352]\n [ 0.91674096  0.59234787  0.48635739  0.442139  ]]\nOs valores inteiros da matriz acima sao: \n[[0 0 0 0]\n [0 0 0 0]\n [0 0 0 0]]\n","name":"stdout"}},"exec_count":10,"input":"import numpy as np\nm = np.random.rand(3,4)\nprint m\n\nx = m.astype(int)\nprint (\"Os valores inteiros da matriz acima sao: \")\nprint x\n","state":"done","pos":3,"type":"cell","id":"0ecf14","kernel":"python2"}
{"type":"cell","id":"5c1957","pos":4,"input":"### 3) Considere uma matriz aleatória de 10×2 que represente coordenadas cartesianas, converta-as em coordenadas polares\n","cell_type":"markdown"}
{"type":"cell","id":"2ae004","pos":2,"input":"### 2) Extrair a parte inteira de uma matriz aleatória","cell_type":"markdown"}
{"output":{"0":{"text":"[[ 0.79593354  0.75872969]\n [ 0.81503224  0.22286504]\n [ 0.88662784  0.92968017]\n [ 0.10720825  0.01443433]\n [ 0.57475858  0.44843696]\n [ 0.43661668  0.86301106]\n [ 0.04156682  0.08990682]\n [ 0.00314762  0.75941224]\n [ 0.76973057  0.0922387 ]\n [ 0.19901519  0.04203243]]\n[(1.0996276335205251, 0.76147224109661205), (0.84495347349675665, 0.26691831537662075), (1.2846844529536221, 0.80909693843024855), (0.1081755951010511, 0.13383339661801366), (0.72900146067571425, 0.66256178559701351), (0.96717227629722224, 1.1024219802313286), (0.099050675386892953, 1.1377343372900486), (0.75941876055876867, 1.5666515374202097), (0.77523746947578054, 0.11926375493659538), (0.20340543545975992, 0.2081432510269095)]\n","name":"stdout"}},"exec_count":13,"start":1494873784320,"input":"import numpy as np\ndef cart2pol(x, y):\n    rho = np.sqrt(x**2 + y**2)\n    phi = np.arctan2(y, x)\n    return(rho, phi)\nmatrix=np.random.rand(10,2)\nmatrix2pol=[]\nfor i in range(0,10):\n    matrix2pol.append(cart2pol(matrix[i][0],matrix[i][1]))\nprint(matrix)        \nprint(matrix2pol)\n","state":"done","pos":5,"type":"cell","end":1494873784333,"id":"a7f1d6","kernel":"python2"}
{"output":{"0":{"text":"[0.30559783859469969, 0.15106777594823223, 0.20547342707560243, 0.33661139519039984, 0.4874177116979066, 0.62049112897718905, 0.47765618523601205, 0.6288446610924523, 0.6609598621626861, 0.63384218457470276, 0.2161250709353047, 0.1326190666337691, 0.09620123551066842, 0.16878951370270917, 0.4219138842085427, 0.53916732577198923, 0.35376758151877602, 0.43010169066657677, 0.45496174489477886, 0.54827132887779861, 0.22415532933575832, 0.18307936105924025, 0.12996870115238246, 0.14359791893494939, 0.42153727570029753, 0.52914430865411355, 0.334429662382763, 0.3735566992203736, 0.39463886282218524, 0.53651303453345289, 0.3157525294431564, 0.34102635372616841, 0.27816249855719016, 0.1985152192457128, 0.4656040903765637, 0.53958349073976486, 0.34059850371971123, 0.23938492488801019, 0.24059326697801831, 0.54175412025357761, 0.44600856383465082, 0.30717668619444705, 0.36946247981256536, 0.50012407132337566, 0.59470890326311521, 0.72774374428207078, 0.61635247206120503, 0.79707149835084845, 0.83227086884940937, 0.74294937685141538, 0.46727155136764709, 0.33024555238996561, 0.39288864743583285, 0.52333661491901151, 0.61201581551989215, 0.74461239114756383, 0.63695854845285527, 0.82059219064979927, 0.85611466440496531, 0.75999291148424941, 0.29015295254193879, 0.13418716464595809, 0.18565947624815785, 0.31633854493826319, 0.47645693276345819, 0.60890702061573321, 0.46151239721424941, 0.6073817689955322, 0.63896782440714883, 0.62192434793209661, 0.60748437816320733, 0.6719796666281318, 0.60706353296545135, 0.49808508293920439, 0.68237214783274236, 0.69623000835751825, 0.54384018784301924, 0.25720580726213937, 0.18933585496383631, 0.69006803704111308, 0.60327055053991174, 0.66751310116737217, 0.60260490805314104, 0.49375856235659649, 0.67882525305013908, 0.69328690385250402, 0.54023838090037624, 0.25403607282322355, 0.18611922286011262, 0.68720443842582046, 0.69488949663115029, 0.76386683336401251, 0.69882076613124922, 0.58759371714311914, 0.7575212760729424, 0.76011108722526288, 0.62048107446779655, 0.32933071334726632, 0.26395156219044713, 0.75248672076780987]\n","name":"stdout"}},"exec_count":14,"start":1494873795519,"input":"import numpy as np\n\nmatrix=np.random.rand(10,2)\nmatrixD=[]\nfor i in range(len(matrix)):\n    for j in range(len(matrix)):\n        matrixD.append(np.sqrt(((matrix[i][0]-matrix[j][0])**2)+((matrix[i][0]-matrix[j][1])**2)))\nprint matrixD\n","state":"done","pos":7,"type":"cell","end":1494873795526,"id":"f417b1","kernel":"python2"}
{"type":"cell","id":"772e1b","pos":6,"input":"### 4) Considere um vetor aleatório com forma (100,2) representando coordenadas, encontre as distâncias entre todos os pontos","cell_type":"markdown"}
{"output":{"0":{"text":"[0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0]\n","name":"stdout"}},"exec_count":15,"start":1494874333819,"input":"vetor=[0,1,2,3,4,5]\nvetor2=[]\nfor i in range(len(vetor)):\n    vetor2.append(vetor[i])\n    for i in range(0,3):\n        vetor2.append(0)\nprint(vetor2)\n","state":"done","pos":9,"type":"cell","end":1494874333827,"id":"3df750","kernel":"python2"}
{"type":"cell","id":"52085e","pos":8,"input":"### 5) Considere o vetor [1, 2, 3, 4, 5], como construir um novo vetor com 3 zeros consecutivos intercalados entre cada valor?","cell_type":"markdown"}