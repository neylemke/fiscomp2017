{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1494867941445}
{"type":"cell","id":"99183b","pos":0,"input":"## Exercícios para fazer na aula\n- a) Encontre índices de elementos não nulos de [1,2,0,0,4,0] \n- b) Extrair a parte inteira de uma matriz aleatória\n- c) Considere uma matriz aleatória de 10$\\times$2 que represente coordenadas cartesianas, converta-as em coordenadas polares\n- d) Considere um vetor aleatório com forma (100,2) representando coordenadas, encontre as  distâncias entre todos os pontos \n- e) Considere o vetor [1, 2, 3, 4, 5], como construir um novo vetor com 3 zeros consecutivos intercalados entre cada valor?","cell_type":"markdown"}
{"exec_count":1,"start":1495459552082,"input":"import numpy as np","state":"done","pos":1,"type":"cell","end":1495459552084,"id":"c31027","kernel":"python2"}
{"output":{"0":{"text":"Numeros nao nulos de  [[1 2 0 0 4 0]] : [1 2 4]\nIndices dos numeros nao nulos de [[1 2 0 0 4 0]] : (array([0, 1, 4]),)\n","name":"stdout"}},"exec_count":2,"start":1495459553078,"input":"#a) \nnumeros=np.array([[1,2,0,0,4,0]])\naux= numeros>0\nab=np.nonzero(numeros)\na=ab[1:2]\na\nhigh_quity = numeros[:] > 0\nprint 'Numeros nao nulos de ',numeros, ':',numeros[high_quity]\nprint 'Indices dos numeros nao nulos de', numeros, ':', a","state":"done","pos":2,"type":"cell","end":1495459553104,"id":"a638b0","kernel":"python2"}
{"type":"cell","id":"90c4cb","pos":11,"input":"### Exercício 1 - Jogo da Vida (0.25)\n- O Jogo da Vida (The Game of Life) é um autômato celular (cellular automaton) introduzido por John Horton Conway em 1970. Um automato celular consiste de uma rede de células. Cada célula pode estar em um número finito de estados, como morta ou viva. O “jogo” é na verdade uma simulação que permite observar a evolução de um processo a partir de uma certa condição inicial.\n- O jogo se desenvolve sobre uma matriz bi-dimensional que pode ser tão grande quanto se queira. Vamos chamar essa matriz de mapa. Cada posição ou célula do mapa pode estar vazia (= célula morta) ou ocupada por um agente (= célula viva). Cada posição possui também até 8 posições vizinhas: imediatamente acima, abaixo, aos lados e nas diagonais. Em um determinado instante, o mapa contém uma geração de agentes. A geração no instante seguinte é determinada segundo as regras abaixo:\n- Novos agentes nascem em células vazias que possuam exatamente 3 agentes vizinhos;\n- **Agentes com 2 ou 3 agentes vizinhos sobrevivem;**\n- **Agentes com menos de 2 agentes vizinhos morrem for falta de recursos;**\n- **Agentes com mais de 3 agentes vizinhos morrem por excesso de competição.**","cell_type":"markdown"}
{"output":{"0":{"text":"matriz aleatoria:\n[[ 0.22260696  0.8116263 ]\n [ 0.9835234   0.99457793]\n [ 0.27158636  0.41736194]\n [ 0.22319842  0.71245135]\n [ 0.99923276  0.74171627]\n [ 0.59051803  0.83959872]\n [ 0.86093016  0.12222785]\n [ 0.73112647  0.23416471]\n [ 0.48235403  0.29862513]\n [ 0.20362581  0.75052602]]\n","name":"stdout"}},"exec_count":4,"start":1495459559683,"input":"#c)\nmatt=np.random.rand(10,2)\nprint 'matriz aleatoria:\\n', matt\n    \ndef cart2pol(x,y):\n    rho = np.sqrt(x**2 + y**2)\n    phi = np.arctan2(y, x)\n    return [rho, phi]\nlista=[]\nfor elem in matt:\n    lista=lista+[cart2pol(elem[0],elem[1])] \n    \n\n    \n    \n#def pol2cart(rho, phi):\n #x = rho * np.cos(phi) \n    #y = rho * np.sin(phi)\n    # return(x, y) ","state":"done","pos":4,"type":"cell","end":1495459559710,"id":"7700fa","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([[ 0.11346398,  0.18340045],\n       [ 0.94071388,  0.85787365],\n       [ 0.17898745,  0.37295176],\n       [ 0.1193825 ,  0.5084164 ],\n       [ 0.17138191,  0.78407876],\n       [ 0.42476169,  0.54046335],\n       [ 0.19251381,  0.72924757],\n       [ 0.98460899,  0.06240496],\n       [ 0.28585225,  0.74099901],\n       [ 0.59231814,  0.85674534],\n       [ 0.31196201,  0.48678386],\n       [ 0.90073277,  0.03514676],\n       [ 0.27289677,  0.72264516],\n       [ 0.59412545,  0.01717973],\n       [ 0.71138979,  0.9974787 ],\n       [ 0.14854335,  0.90365124],\n       [ 0.24671818,  0.68056511],\n       [ 0.66818661,  0.99976798],\n       [ 0.99662339,  0.53603025],\n       [ 0.96288675,  0.22405746],\n       [ 0.14921891,  0.17879301],\n       [ 0.17912391,  0.58925664],\n       [ 0.01742933,  0.90966437],\n       [ 0.22364574,  0.87507129],\n       [ 0.83148945,  0.14577761],\n       [ 0.19862286,  0.93760997],\n       [ 0.43576869,  0.200808  ],\n       [ 0.78853817,  0.64461115],\n       [ 0.53689362,  0.15708047],\n       [ 0.4610352 ,  0.34417195],\n       [ 0.33520147,  0.08935839],\n       [ 0.61055411,  0.12543934],\n       [ 0.02306944,  0.20506958],\n       [ 0.85823774,  0.5781549 ],\n       [ 0.86422607,  0.35554028],\n       [ 0.66474695,  0.8543925 ],\n       [ 0.11390899,  0.53423178],\n       [ 0.09402066,  0.13064645],\n       [ 0.2944176 ,  0.77711693],\n       [ 0.60934398,  0.10014781],\n       [ 0.41157679,  0.25834008],\n       [ 0.00738382,  0.74666668],\n       [ 0.51665892,  0.16791132],\n       [ 0.96093655,  0.28523504],\n       [ 0.81664671,  0.08814014],\n       [ 0.64460295,  0.74616564],\n       [ 0.26400119,  0.82754186],\n       [ 0.48251432,  0.61300747],\n       [ 0.3083521 ,  0.60434599],\n       [ 0.01714326,  0.72539132],\n       [ 0.66299385,  0.39771628],\n       [ 0.33083191,  0.74168052],\n       [ 0.50888496,  0.69133702],\n       [ 0.78563604,  0.84206575],\n       [ 0.93295072,  0.1037998 ],\n       [ 0.4635723 ,  0.52230405],\n       [ 0.96251196,  0.21046989],\n       [ 0.01935738,  0.98545632],\n       [ 0.53989766,  0.29561465],\n       [ 0.77067738,  0.64198095],\n       [ 0.71742122,  0.99061971],\n       [ 0.38729592,  0.27821369],\n       [ 0.94017034,  0.45297744],\n       [ 0.53345539,  0.22653931],\n       [ 0.5672214 ,  0.98109183],\n       [ 0.24202932,  0.65638934],\n       [ 0.40800967,  0.28066486],\n       [ 0.07037943,  0.98069321],\n       [ 0.15203661,  0.95634963],\n       [ 0.57866997,  0.88867234],\n       [ 0.91377574,  0.90599967],\n       [ 0.56270383,  0.20739275],\n       [ 0.3189642 ,  0.63838545],\n       [ 0.92333173,  0.75777696],\n       [ 0.06138778,  0.27026656],\n       [ 0.5752433 ,  0.16417027],\n       [ 0.28136143,  0.99454829],\n       [ 0.49080709,  0.71225995],\n       [ 0.88366199,  0.03623544],\n       [ 0.66703661,  0.26852418],\n       [ 0.90158427,  0.89689851],\n       [ 0.65778404,  0.76202518],\n       [ 0.96582253,  0.13875395],\n       [ 0.33601407,  0.11378651],\n       [ 0.3038757 ,  0.2517466 ],\n       [ 0.33595842,  0.88633108],\n       [ 0.91488537,  0.89968842],\n       [ 0.00301105,  0.44240765],\n       [ 0.63777374,  0.20864002],\n       [ 0.94419199,  0.82406334],\n       [ 0.0462377 ,  0.7275757 ],\n       [ 0.07827107,  0.51298271],\n       [ 0.57280028,  0.07468124],\n       [ 0.15005882,  0.00493989],\n       [ 0.26444687,  0.23835684],\n       [ 0.53658633,  0.63504346],\n       [ 0.3157625 ,  0.8048764 ],\n       [ 0.22312294,  0.68526297],\n       [ 0.83769985,  0.53758757],\n       [ 0.59769928,  0.54103463]])"},"exec_count":8}},"exec_count":8,"start":1495459567087,"input":"#d)\nimport numpy as np\nfrom numpy import linalg as LA\n\ncoord=np.random.rand(100,2)\ncoord","state":"done","pos":8,"type":"cell","end":1495459567127,"id":"765a6d","kernel":"python2"}
{"output":{"0":{"text":"O vetor [1 2 3 4 5] com 3 zeros consecutivos em cada vetor é: [ 1.  0.  0.  0.  2.  0.  0.  0.  3.  0.  0.  0.  4.  0.  0.  0.  5.  0.\n  0.  0.]\n","name":"stdout"}},"exec_count":10,"start":1495459572192,"input":"#e) \nimport numpy as np\nvetor_linha=np.array([1,2,3,4,5]) \nv1=np.zeros(3)\nintercalado=np.ravel([np.append(vetor_linha[elem],v1)for elem in range(5)])\nprint 'O vetor', vetor_linha, 'com 3 zeros consecutivos em cada vetor é:', intercalado  ","state":"done","pos":10,"type":"cell","end":1495459572292,"id":"467643","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([3, 3, 5, 3, 3, 3, 5, 5, 3, 3])"},"exec_count":3}},"exec_count":3,"start":1495459558183,"input":"#b)\nmat=np.random.uniform(3,6,10)\nmat\nmat.astype(int)","state":"done","pos":3,"type":"cell","end":1495459558188,"id":"167b66","kernel":"python2"}
{"output":{"0":{"text":"[ 0.22260696  0.9835234   0.27158636  0.22319842  0.99923276  0.59051803\n  0.86093016  0.73112647  0.48235403  0.20362581]\n[ 0.8116263   0.99457793  0.41736194  0.71245135  0.74171627  0.83959872\n  0.12222785  0.23416471  0.29862513  0.75052602]\n","name":"stdout"}},"exec_count":6,"start":1495459563978,"input":"x= matt[:,0]\nprint x\ny=matt[:,1]\nprint y","state":"done","pos":6,"type":"cell","end":1495459563994,"id":"11d516","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"[[0.84160033086052588, 1.303106379054775],\n [1.3987507024823425, 0.79098656173268334],\n [0.49794591867124588, 0.99391411349235503],\n [0.74659524328408267, 1.2671988911094969],\n [1.2444312449416026, 0.63854569849573373],\n [1.0264684885803304, 0.95783651734379682],\n [0.86956332837160921, 0.1410293671612472],\n [0.7677102458905759, 0.3099563295876116],\n [0.56731154078966461, 0.55434499403895243],\n [0.77765851738222147, 1.3058631693746254]]"},"exec_count":7}},"exec_count":7,"start":1495459565411,"input":"[cart2pol(elem[0],elem[1]) for elem in matt]","state":"done","pos":7,"type":"cell","end":1495459565427,"id":"0f5b58","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([[ 0.22260696,  0.8116263 ],\n       [ 0.9835234 ,  0.99457793],\n       [ 0.27158636,  0.41736194],\n       [ 0.22319842,  0.71245135],\n       [ 0.99923276,  0.74171627],\n       [ 0.59051803,  0.83959872],\n       [ 0.86093016,  0.12222785],\n       [ 0.73112647,  0.23416471],\n       [ 0.48235403,  0.29862513],\n       [ 0.20362581,  0.75052602]])"},"exec_count":5}},"exec_count":5,"start":1495459561318,"input":"matt","state":"done","pos":5,"type":"cell","end":1495459561332,"id":"d80da2","kernel":"python2"}
{"output":{"0":{"text":"[[0 0 0 0 0 0]\n [0 0 0 1 0 0]\n [0 1 0 1 0 0]\n [0 0 1 1 0 0]\n [0 0 0 0 0 0]\n [0 0 0 0 0 0]]\n\n[[0 0 0 0 0 0]\n [0 0 0 0 0 0]\n [0 0 0 0 1 0]\n [0 0 1 0 1 0]\n [0 0 0 1 1 0]\n [0 0 0 0 0 0]]\n","name":"stdout"}},"exec_count":6,"start":1495460676890,"input":"import numpy as np\n\ndef iterate_1(Z):\n    # Contagem vizinhança\n    N = np.zeros(Z.shape, int)\n    N[1:-1,1:-1] += (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +\n                     Z[1:-1,0:-2]                + Z[1:-1,2:] +\n                     Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])\n    N_ = N.ravel()\n    Z_ = Z.ravel()\n\n    # Aplicação das regras\n    R1 = np.argwhere( (Z_==1) & (N_ < 2) )\n    R2 = np.argwhere( (Z_==1) & (N_ > 3) )\n    R3 = np.argwhere( (Z_==1) & ((N_==2) | (N_==3)) )\n    R4 = np.argwhere( (Z_==0) & (N_==3) )\n\n    # Definir novos valores\n    Z_[R1] = 0\n    Z_[R2] = 0\n    Z_[R3] = Z_[R3]\n    Z_[R4] = 1\n\n    # Garantia de que as fronteiras permaneçam nulas\n    Z[0,:] = Z[-1,:] = Z[:,0] = Z[:,-1] = 0\n\n\ndef iterate_2(Z):\n    # Contagem vizinhança\n    N = (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +\n         Z[1:-1,0:-2]                + Z[1:-1,2:] +\n         Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])\n\n    # Aplicação das regras\n    birth = (N==3) & (Z[1:-1,1:-1]==0)\n    survive = ((N==2) | (N==3)) & (Z[1:-1,1:-1]==1)\n    Z[...] = 0\n    Z[1:-1,1:-1][birth | survive] = 1\n    return Z\n\n\nZ = np.array([[0,0,0,0,0,0],\n              [0,0,0,1,0,0],\n              [0,1,0,1,0,0],\n              [0,0,1,1,0,0],\n              [0,0,0,0,0,0],\n              [0,0,0,0,0,0]])\n\nprint Z\nprint\nfor i in range(4): iterate_2(Z)\nprint Z\n","state":"done","pos":12,"type":"cell","end":1495460676948,"id":"a0fbc3","kernel":"python2"}
{"output":{"0":{"text":"distancia entre os pontos:\n[1.0673595837029568, 0.90298194110300023, 0.14799803280880194, 0.28052392635724938, 0.35149648172713355, 0.29929677408439748, 1.0354196484696998, 0.9740384304746913, 0.32759510511786788, 0.46418860249582988, 0.74204250343816036, 0.93103817968123215, 0.77515762168954583, 0.98728769883371725, 0.57061344766053956, 0.24373287702487659, 0.5287022852358696, 0.56826349970479018, 0.31379161492404151, 0.8149259030823135, 0.4115515741629201, 0.35889587426669178, 0.20909779613152504, 0.94939099321130349, 1.0136659219927278, 0.77402537467912436, 0.56692816501402687, 0.5486448316499567, 0.20188541866194465, 0.28419021472048983, 0.27770651562513993, 0.59285682097569381, 0.91471238790568343, 0.22269514383511996, 0.53725734239656942, 0.63712270967662166, 0.40407507556862782, 0.67681830967935419, 0.74663633549801256, 0.25325216304850018, 0.63390442772327604, 0.77092080800279139, 0.45950784538850048, 0.24426615641601732, 0.68014455310918565, 0.3892040401868947, 0.30622375807218483, 0.17437747154255032, 0.31536416990348209, 0.72421952430686798, 0.47816624180569484, 0.18503339735397362, 0.31513537987103296, 0.75282017908470289, 0.62885761748227331, 0.58837175807183728, 1.2207147647068102, 0.86420120555249402, 0.41620775119293218, 0.35268286212443545, 0.78517835533726166, 0.5798383376063001, 0.46550110690091984, 0.75530765235394759, 0.45954498605047162, 0.41075340659298254, 0.77719615010976872, 0.085208587461492916, 0.43196786830944078, 0.33555344385703767, 0.78185875189113041, 0.49514009635630107, 0.61604743939646633, 0.99025944058215676, 0.52469411694737211, 0.88084857002629968, 0.35150276036983369, 0.78188497301476112, 0.31762338849294225, 0.67072118024786043, 0.27862047113539634, 0.69523718695606274, 0.63030315316813945, 0.14165401803995137, 0.63539496454106137, 0.57908102225304037, 1.0201080688335165, 0.6764399306593053, 0.68748672605594374, 0.90312334552544338, 0.2169707122835926, 0.66080807823804555, 0.42845559468097755, 0.25993863945811063, 0.4810614908446687, 0.27857923530952045, 0.15129263404810958, 0.63207025366297176, 0.24002532648196362]\n","name":"stdout"}},"exec_count":9,"start":1495459568979,"input":"[np.array([[(LA.norm(x-y)-coord)**(0.5)]])]\nprint 'distancia entre os pontos:\\n' , [LA.norm(coord[i+1]-coord[i])for i in range(99)]\n                                         ","scrolled":false,"state":"done","pos":9,"type":"cell","end":1495459568996,"id":"3e5ee7","kernel":"python2"}
{"exec_count":35,"start":1495461332791,"input":"\n#para muitos pontos, visualização gráfica\n","state":"done","pos":13,"type":"cell","end":1495461332803,"id":"985e94","kernel":"python2"}
{"exec_count":31,"start":1495461309313,"input":" for i in range(100): iterate(Z)","state":"done","pos":15,"type":"cell","end":1495461309558,"id":"12c544","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"2008149fe92cde9daf8f09908add8d245830475b"}}},"exec_count":34,"start":1495461318186,"input":"size = np.array(Z.shape)\ndpi = 72.0\nfigsize= size[1]/float(dpi),size[0]/float(dpi)\nfig=plt.figure(figsize=figsize, dpi=dpi,facecolor=\"white\")\nfig.add_axes([0.0, 0.0, 1.0, 1.0], frameon=False)\nplt.imshow(Z,interpolation='nearest', cmap=plt.cm.gray_r)\nplt.xticks([]), plt.yticks([])\nplt.show()","state":"done","pos":17,"type":"cell","end":1495461318522,"id":"c6efe2","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"1089a05410a5593c1c9c65c8d91c1a51550a8102"}}},"exec_count":33,"start":1495461311314,"input":"import matplotlib.pyplot as plt\n\nsize = np.array(Z.shape)\ndpi = 72.0\nfigsize= size[1]/float(dpi),size[0]/float(dpi)\nfig= plt.figure(figsize=figsize, dpi=dpi, facecolor=\"white\")\nfig.add_axes([0.0, 0.0, 1.0, 1.0], frameon=False)\nplt.imshow(U,interpolation='nearest', cmap=plt.cm.Purples)\nplt.xticks([]), plt.yticks([])\nplt.show()","state":"done","pos":16,"type":"cell","end":1495461311699,"id":"a982d0","kernel":"python2"}
{"type":"cell","id":"bd2c68","pos":18,"input":""}