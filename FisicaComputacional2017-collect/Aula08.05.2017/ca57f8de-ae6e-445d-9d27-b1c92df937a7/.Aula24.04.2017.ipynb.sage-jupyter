{"celltoolbar":"Slideshow","kernelspec":{"display_name":"T - Python 3 (Ubuntu Linux)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"slide"}},"source":"#  Manipulação de Arquivos e dados em Python"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"### Arquivos\n\n- Arquivo é um conjunto de dados.\n- Identificados por um caminho (absoluto/relativo)\n- Ao contrário de valores de variáveis, os arquivos são persistentes\n- Para o sistema operacional um arquivo é  uma sequência de bytes\n- Suportes físicos: discos magnéticos, memórias flash, CD-Rs e etc."}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**1.  Métodos sobre arquivos**\n- Inicialmente, como já foi ensinado em aulas anteriores, vamos criar um arquivo de texto que será utilizado nos próximos exemplos."}
{"cell_type":"code","execution_count":23,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Overwriting texto.txt\n"}],"source":"%%writefile texto.txt\nMas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- A função ***open()*** retorna um objeto da classe file, que permite fazer a leitura e escrita em arquivos das mais diversas formas. Na sua forma padrão, o arquivo é aberto somente para leitura."}
{"cell_type":"code","execution_count":24,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Mas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana\n"}],"source":"with open('texto.txt', 'r') as f:\n    print(f.read())"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Também é possível manipular arquivos em modo csv. Veja o exemplo abaixo de uma matriz de dados numéricos."}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"%%writefile matriznum2.csv\n18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283"}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"more "}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Ao abrirmos o arquivo de matriznum, encontramos:"}
{"cell_type":"code","execution_count":27,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283\n"}],"source":"with open('matriznum.csv', 'r') as f:\n    print(f.read())"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**2. Métodos sobre arquivos**\n\n- **f.write(str)**: escrever uma cadeia;\n- **f.read()**: lê todo o conteudo (uma “string”);\n- **f.read(n)**: lê apenas n caracteres;\n- **f.readline()**: lê uma linha de texto;\n- **f.close()**: terminar leitura/escrita no arquivo;"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Podemos definir o modo como esse arquivo pode ser aberto: Em **’r’**  temos somente leitura (arquivo deve já existir). No modo **’w’** escrita (se o arquivo já existir: remove o conteúdo) e **’a’** escrita (se o arquivo já existir: acrescenta ao final).\n- Veja o exemplo a seguir:"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- A seguir podemos ver um exemplo de escrita e leitura de uma arquivo:"}
{"cell_type":"code","execution_count":48,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"f = open(\"test.dat\", \"w\")\nf.write(\"Ola mundo!\\n\")\nf.write(\"Adeus mundo...\\n\")\nf.close()"}
{"cell_type":"code","execution_count":50,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Ola mundo!\r\nAdeus mundo...\r\n"}],"source":"!more test.dat\n"}
{"cell_type":"code","execution_count":52,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'Ola mundo!\\nAdeus mundo...\\n'"},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":"f = open(\"test.dat\", \"r\")\ntxt = f.read()\ntxt\n"}
{"cell_type":"code","execution_count":53,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"f=open(\"test.dat\",\"a\")\ntxt=f.write(\"Mais uma linha\")\nf.close()"}
{"cell_type":"code","execution_count":54,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Ola mundo!\r\nAdeus mundo...\r\nMais uma linha\r\n"}],"source":"!more test.dat"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**3. arquivos de texto vs. binários**\n\n- arquivos de texto: contêm apenas caracteres imprimíveis e espaços, tabulação, etc.\n- arquivos binários: imagens JPEG, audio MP3, programas, etc.\n- Por omissão: open assume que o arquivos é de texto\n- Em linux/unix: não há diferença essencial entre os arquivos de texto e binários; ambos podem ser processados – abertos, lidos, escritos. . . – da mesma forma."}
{"cell_type":"markdown","metadata":{},"source":"**4. Diretórios**\n- Quando você cria um novo arquivo abrindo-o e escrevendo nele, o novo arquivo fica no diretório corrente (seja lá onde for que você esteja quando rodar o programa). Do mesmo modo, quando você abre um arquivo para leitura, Python procura por ele no diretório corrente.\n\n- Se você quiser abrir um arquivo que esteja em algum outro lugar, você tem que especificar o caminho (path) para o arquivo, o qual é o nome do diretório (ou folder) onde o arquivo está localizado:\n\n```python\n f = open(\"Documments/pasta/arquivo\", \"r\")\n   print f.readline()\n```"}
{"cell_type":"code","execution_count":42,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"2017-04-24-140938.ipynb  matriznum2.csv\t\t    test.append.dat\r\nAula24.04.2017.ipynb\t matriznum.csv\t\t    test.dat\r\ncookbook-data\t\t python.dados.pandas.ipynb  texto.txt\r\n"}],"source":"!ls"}
{"cell_type":"code","execution_count":55,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"with open(\"matriznum.csv\",\"r\") as f:\n    lines=f.readlines()"}
{"cell_type":"code","execution_count":58,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"['18576', '182383', '18383', '18383']\n['18383', '183838', '18338', '19933']\n['17273', '173773', '18283', '18283']\n"}],"source":"for line in lines:\n    print(line.split())"}
{"cell_type":"markdown","metadata":{},"source":"### Exercícios\n\n1. Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: \"A minha estação predileta é 'estação', especialmente 'mês'\"  repetida um número aleatório de vezes, entre 5 e 20. \n2. Comprima essas arquivos usando o comando gzip. "}
{"cell_type":"markdown","metadata":{},"source":"## Pandas"}
{"cell_type":"code","execution_count":1,"metadata":{"trusted":false},"outputs":[{"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-7ce6f1f66b35>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mminday\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'day'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'day'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mminday\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}],"source":"minday=df['day'].min()\ndf2=df[df['day']==minday]\n"}
{"cell_type":"code","execution_count":114,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"  day       filename  filesize group   hour month        perm  \\\n9  22  cookbook-data      4096     4  01:09   Apr  drwxr-x---   \n\n                               user                          usercode  \n9  da4b09c773a74027ac2d5fed6d409acf  da4b09c773a74027ac2d5fed6d409acf  "},"execution_count":114,"metadata":{},"output_type":"execute_result"}],"source":"df2"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"### Manipulação de dados com \"Pandas\"\n\n- Pandas nos permite carregar o dados muito facilmente, explorar as variáveis, e fazer gráficos com matplotlib.\n- Este pacote fornece estruturas de dados e funções ricas projetadas para tornar o trabalho dados estruturados rápidos, fáceis e expressivos. E, como você verá, um dos ingredientes críticos permitindo que o Python seja um ambiente de análise de dados poderoso e produtivo."}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**1. Introdução a estrutura de dados**\n- Para começar com pandas, você precisará se sentir confortável com suas estruturas de dados: `Series` e `DataFrame`. Embora não sejam uma solução universal para problema, eles fornecem uma base sólida e fácil de usar para a maioria das aplicações."}
{"cell_type":"markdown","metadata":{},"source":"** 1.1 `Series`**\n- A Series é um objeto de tipo matriz unidimensional contendo uma matriz de dados (de NumPy tipo de dados) e uma matriz associada de rótulos de dados, chamado seu índice. A série mais simples é formada apenas a partir de uma matriz de dados:"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"code","execution_count":60,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"obj = pd.Series([4, 7, -5, 3])"}
{"cell_type":"code","execution_count":61,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"0    4\n1    7\n2   -5\n3    3\ndtype: int64"},"execution_count":61,"metadata":{},"output_type":"execute_result"}],"source":"obj"}
{"cell_type":"markdown","metadata":{},"source":"- A representação de sequência de caracteres de uma série exibida interativamente mostra o índice à esquerda e os valores à direita. Como não especificamos um índice para os dados, é criado um padrão consistindo nos inteiros 0 a N-1 (onde N é o comprimento dos dados). Você pode obter a representação de matriz eo objeto de índice da Série por meio de seus valores e atributos de índice, respectivamente:"}
{"cell_type":"code","execution_count":5,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"array([ 4,  7, -5,  3])"},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":"obj.values"}
{"cell_type":"code","execution_count":62,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"RangeIndex(start=0, stop=4, step=1)"},"execution_count":62,"metadata":{},"output_type":"execute_result"}],"source":"obj.index"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Muitas vezes, será desejável criar uma Série com um índice identificando cada ponto de dados:"}
{"cell_type":"code","execution_count":63,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])"}
{"cell_type":"code","execution_count":64,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"d    4\nb    7\na   -5\nc    3\ndtype: int64"},"execution_count":64,"metadata":{},"output_type":"execute_result"}],"source":"obj2"}
{"cell_type":"markdown","metadata":{},"source":"- Existem pelo menos 3 maneiras de acessar os elementos de uma série:"}
{"cell_type":"code","execution_count":9,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"-5"},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":"obj2['a'] # acessando pela chave usando a notação de dicionários"}
{"cell_type":"code","execution_count":10,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"-5"},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":"obj2.a # acessando pela chave usando a notação de objetos de uma classe"}
{"cell_type":"code","execution_count":11,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"-5"},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":"obj.iloc[2] # acessando pela posição"}
{"cell_type":"markdown","metadata":{},"source":"### Operações com `Series`"}
{"cell_type":"code","execution_count":65,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"d     8\nb    14\na   -10\nc     6\ndtype: int64"},"execution_count":65,"metadata":{},"output_type":"execute_result"}],"source":"obj2 * 2"}
{"cell_type":"code","execution_count":66,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"d    4\nb    7\nc    3\ndtype: int64"},"execution_count":66,"metadata":{},"output_type":"execute_result"}],"source":"obj2[obj2>0] # seleciona os positivos`"}
{"cell_type":"markdown","metadata":{},"source":"\n\n**2. DataFrames**\n\n- São generalizações de Séries, onde temos uma lista de séries concatenadas. "}
{"cell_type":"markdown","metadata":{"collapsed":true},"source":" Estamos basicamente criando o conjunto de dados. Agora vamos usar a biblioteca pandas para exportar este conjunto de dados em um arquivo csv.\n- **df** será um objeto **DataFrame**. Você pode pensar neste objeto mantendo o conteúdo do listaindex  em um formato semelhante a uma tabela sql ou uma planilha do Excel. Vamos dar uma olhada abaixo no conteúdo dentro df ."}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"markdown","metadata":{},"source":"## Criando DataFrames"}
{"cell_type":"code","execution_count":67,"metadata":{"collapsed":true,"scrolled":true,"trusted":false},"outputs":[],"source":"dict=[{'char': chr(i), 'num': i } for i in range(48,122)]"}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"[{\"nome\": \"serie1\", hghg: }\n ,{\"nome\"}]"}
{"cell_type":"code","execution_count":68,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'<'"},"execution_count":68,"metadata":{},"output_type":"execute_result"}],"source":"chr(60)"}
{"cell_type":"code","execution_count":70,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df=pd.DataFrame(dict)"}
{"cell_type":"code","execution_count":71,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::364fac10-12be-4a3e-a0c7-0c51a775d71f"},"execution_count":71,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"code","execution_count":72,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::364fac10-12be-4a3e-a0c7-0c51a775d71f"},"execution_count":72,"metadata":{},"output_type":"execute_result"}],"source":"df[['char','num']]"}
{"cell_type":"markdown","metadata":{},"source":"Para criar uma nova coluna de dados é fácil."}
{"cell_type":"code","execution_count":74,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df['binario']=df['num'].apply(bin)"}
{"cell_type":"markdown","metadata":{},"source":"`apply` nesse caso aplica uma função em cada elemento da série. "}
{"cell_type":"code","execution_count":78,"metadata":{"trusted":false},"outputs":[{"data":{},"metadata":{},"output_type":"execute_result"}],"source":"df[['num','binario']]"}
{"cell_type":"markdown","metadata":{},"source":"Para acessar os dados pelo índice."}
{"cell_type":"code","execution_count":79,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"char              2\nnum              50\nbinario    0b110010\nName: 2, dtype: object"},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":"df.ix[2]"}
{"cell_type":"markdown","metadata":{},"source":"**3. Exportar arquivos em csv com pandas**\n- Exporte o dataframe para um arquivo csv . Podemos nomear o arquivo dicchar.csv . A função to_csv será usada para exportar o arquivo. O arquivo será salvo no mesmo local do notebook, a menos que especificado de outra forma."}
{"cell_type":"code","execution_count":84,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df.to_csv ( 'dicchar.csv' , index = False , header = True)"}
{"cell_type":"code","execution_count":85,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"char,num,binario\n0,48,0b110000\n1,49,0b110001\n2,50,0b110010\n3,51,0b110011\n4,52,0b110100\n5,53,0b110101\n6,54,0b110110\n7,55,0b110111\n8,56,0b111000\n9,57,0b111001\n:,58,0b111010\n;,59,0b111011\n<,60,0b111100\n=,61,0b111101\n>,62,0b111110\n?,63,0b111111\n@,64,0b1000000\nA,65,0b1000001\nB,66,0b1000010\nC,67,0b1000011\nD,68,0b1000100\nE,69,0b1000101\n\u001b[K"}],"source":"!more dicchar.csv\n"}
{"cell_type":"markdown","metadata":{},"source":"- Podemos exportar arquivos em em excel ou leitura colocando no **.xls** ou **.txt** no lugar do csv no exemplo a cima."}
{"cell_type":"markdown","metadata":{},"source":"**4. Obter dados**"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"!ls -la > teste.txt"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"file=open('teste.txt','r')\ndata=[]\nfor line in file:\n    data=data+[line.split()]\ndata=data[1:]"}
{"cell_type":"code","execution_count":90,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"['drwxr-x---',\n '4',\n 'da4b09c773a74027ac2d5fed6d409acf',\n 'da4b09c773a74027ac2d5fed6d409acf',\n '4096',\n 'Apr',\n '24',\n '18:15',\n '.']"},"execution_count":90,"metadata":{},"output_type":"execute_result"}],"source":"data[0]"}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': list[4],\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\ndf"}
{"cell_type":"markdown","metadata":{},"source":"**- Quantos arquivos são escondidos?**"}
{"cell_type":"code","execution_count":9,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"total 604\r\ndrwxr-x---  4 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 Apr 27 14:42 .\r\ndrwx------ 19 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 Apr 27 11:29 ..\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  10949 Apr 24 19:04 2017-04-24-140938.ipynb\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   8972 Apr 24 18:58 .2017-04-24-140938.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   7131 Apr 23 16:59 .Analisedados.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    406 Apr 24 18:53 arq_abr_outuno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1121 Apr 24 18:53 arq_ago_inverno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1220 Apr 24 18:53 arq_dez_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    684 Apr 24 18:53 arq_fev_verao.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1368 Apr 24 18:53 arq_jan_verao.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    885 Apr 24 18:53 arq_jul_inverno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1276 Apr 24 18:53 arq_jun_outuno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1102 Apr 24 18:53 arq_mai_outuno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    342 Apr 24 18:53 arq_mar_verao.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1586 Apr 24 18:53 arq_nov_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    610 Apr 24 18:53 arq_out_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    610 Apr 24 18:53 arq_set_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  19129 Apr 24 00:13 .Aula21.04.2017.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  17908 Apr 23 17:38 .Aula24.03.2017.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf 205847 Apr 27 14:42 Aula24.04.2017.ipynb\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  30152 Apr 27 14:42 .Aula24.04.2017.ipynb.sage-jupyter\r\ndrwxr-x---  4 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 Apr 22 01:09 cookbook-data\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1133 Apr 24 18:14 dicchar.csv\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    571 Apr 24 17:55 file.zip\r\ndrwxr-x---  2 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 Apr 24 17:09 .ipynb_checkpoints\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     74 Apr 24 17:22 matriznum2.csv\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     74 Apr 24 17:21 matriznum.csv\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf 181342 Apr 27 12:51 python.dados.pandas.ipynb\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  19127 Apr 23 19:48 .python.dados.pandas.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     24 Apr 24 16:57 test.append.dat\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     40 Apr 24 17:37 test.dat\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   3969 Apr 27 14:42 teste.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    219 Apr 24 17:21 texto.txt\r\n"}],"source":"!ls -la "}
{"cell_type":"code","execution_count":10,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::c7640dc1-4a6d-4f54-a2f8-97ee57120cf7"},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":"df['filename']"}
{"cell_type":"code","execution_count":11,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"9"},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":"len([filename for filename  in df['filename'] if filename[0]==\".\"])"}
{"cell_type":"markdown","metadata":{},"source":"** - Quantos não são diretórios?**"}
{"cell_type":"code","execution_count":12,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::047d2f61-9683-4b29-830b-f0fbb269882d"},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":"df['perm'] "}
{"cell_type":"code","execution_count":98,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"17"},"execution_count":98,"metadata":{},"output_type":"execute_result"}],"source":"len([perm for perm  in df['perm'] if perm[0]==\"-\"])"}
{"cell_type":"markdown","metadata":{},"source":"**- Qual é o maior arquivo? Qual é o menor?** "}
{"cell_type":"code","execution_count":13,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"0       4096\n1       4096\n2      10949\n3       8972\n4       7131\n5        406\n6       1121\n7       1220\n8        684\n9       1368\n10       885\n11      1276\n12      1102\n13       342\n14      1586\n15       610\n16       610\n17     19129\n18     17908\n19    205847\n20     30152\n21      4096\n22      1133\n23       571\n24      4096\n25        74\n26        74\n27    181342\n28     19127\n29        24\n30        40\n31         0\n32       219\nName: filesize, dtype: object"},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":"df['filesize']"}
{"cell_type":"code","execution_count":14,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"('8972', '0')"},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":"(df['filesize'].max(),df['filesize'].min())"}
{"cell_type":"markdown","metadata":{},"source":"Ops ..."}
{"cell_type":"code","execution_count":101,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': int(list[4]),\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\n\nmaxi,mini=(df['filesize'].max(),df['filesize'].min())"}
{"cell_type":"code","execution_count":102,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'O maior arquivo possui  208678 bytes, o menor 0 bytes'"},"execution_count":102,"metadata":{},"output_type":"execute_result"}],"source":"\"O maior arquivo possui  {} bytes, o menor {} bytes\".format(maxi,mini)"}
{"cell_type":"markdown","metadata":{},"source":"** - Quantos arquivos  são notebooks? **"}
{"cell_type":"code","execution_count":103,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"3"},"execution_count":103,"metadata":{},"output_type":"execute_result"}],"source":"len([filename for filename  in df['filename'] if filename[-6:]==\".ipynb\"])"}
{"cell_type":"code","execution_count":15,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::0f9e1f28-a65e-4c3e-b055-aa6b505c80b6"},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"code","execution_count":23,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'22'"},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":"(df['day'].min())"}
{"cell_type":"code","execution_count":28,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::3a46ce94-fa26-46ef-b5c5-f389d666b26a"},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":"df[df['day']=='22']"}
{"cell_type":"code","execution_count":31,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"day                                       24\nfilename             2017-04-24-140938.ipynb\nfilesize                               10949\ngroup                                      1\nhour                                   19:04\nmonth                                    Apr\nperm                              -rw-r-----\nuser        da4b09c773a74027ac2d5fed6d409acf\nusercode    da4b09c773a74027ac2d5fed6d409acf\nName: 2, dtype: object"},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":"df.ix[2]"}
{"cell_type":"markdown","metadata":{},"source":"## Exercícios\n\n1. Quando foi criado o primeiro arquivo?\n2. Quantos arquivos podem ser apenas editadados pelo proprietário? "}
{"cell_type":"markdown","metadata":{},"source":"## Exercícios (0.25 pts)\n\n1. Com base nos dados de https://pt.wikipedia.org/w/index.php?title=Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon&action=edit construa um dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série\n"}
{"cell_type":"code","execution_count":7,"metadata":{"trusted":false},"outputs":[{"ename":"URLError","evalue":"<urlopen error [Errno 99] Cannot assign requested address>","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/lib/python3.4/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1182\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1183\u001b[0;31m                 \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1184\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# timeout error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/http/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, body, headers)\u001b[0m\n\u001b[1;32m   1136\u001b[0m         \u001b[0;34m\"\"\"Send a complete request to the server.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1137\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_send_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/http/client.py\u001b[0m in \u001b[0;36m_send_request\u001b[0;34m(self, method, url, body, headers)\u001b[0m\n\u001b[1;32m   1181\u001b[0m             \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'iso-8859-1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1182\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendheaders\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/http/client.py\u001b[0m in \u001b[0;36mendheaders\u001b[0;34m(self, message_body)\u001b[0m\n\u001b[1;32m   1132\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mCannotSendHeader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1133\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_send_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage_body\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/http/client.py\u001b[0m in \u001b[0;36m_send_output\u001b[0;34m(self, message_body)\u001b[0m\n\u001b[1;32m    962\u001b[0m             \u001b[0mmessage_body\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 963\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    964\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmessage_body\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/http/client.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    897\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauto_open\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 898\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    899\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/http/client.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1279\u001b[0;31m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1280\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/http/client.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    870\u001b[0m         self.sock = self._create_connection((self.host,self.port),\n\u001b[0;32m--> 871\u001b[0;31m                                             self.timeout, self.source_address)\n\u001b[0m\u001b[1;32m    872\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/socket.py\u001b[0m in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address)\u001b[0m\n\u001b[1;32m    511\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0merr\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 512\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    513\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.4/socket.py\u001b[0m in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address)\u001b[0m\n\u001b[1;32m    502\u001b[0m                 \u001b[0msock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msource_address\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0msock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msa\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msock\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: [Errno 99] Cannot assign requested address","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mURLError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-e6d7c2a8b909>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlispoktab\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_html\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0;34m\"https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlispoktab\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/io/html.py\u001b[0m in \u001b[0;36mread_html\u001b[0;34m(io, match, flavor, header, index_col, skiprows, attrs, parse_dates, tupleize_cols, thousands, encoding, decimal, converters, na_values, keep_default_na)\u001b[0m\n\u001b[1;32m    894\u001b[0m                   \u001b[0mthousands\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mthousands\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    895\u001b[0m                   \u001b[0mdecimal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdecimal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconverters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconverters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_values\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_values\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 896\u001b[0;31m                   keep_default_na=keep_default_na)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/io/html.py\u001b[0m in \u001b[0;36m_parse\u001b[0;34m(flavor, io, match, attrs, encoding, **kwargs)\u001b[0m\n\u001b[1;32m    731\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 733\u001b[0;31m         \u001b[0mraise_with_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretained\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    734\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    735\u001b[0m     \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/compat/__init__.py\u001b[0m in \u001b[0;36mraise_with_traceback\u001b[0;34m(exc, traceback)\u001b[0m\n\u001b[1;32m    338\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtraceback\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mEllipsis\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    339\u001b[0m             \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraceback\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexc_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 340\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraceback\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    341\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    342\u001b[0m     \u001b[0;31m# this version of raise is a syntax error in Python 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mURLError\u001b[0m: <urlopen error [Errno 99] Cannot assign requested address>"]}],"source":"lispoktab=pd.read_html( \"https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon\")\ndf=lispoktab[0]\ndf.ix[2]=np.roll(df.ix[2],2)\ndf.ix[3]=np.roll(df.ix[3],1)\ndf.ix[4]=np.roll(df.ix[4],2)\ndf.ix[5]=np.roll(df.ix[5],2)\ndf.ix[7]=np.roll(df.ix[7],2)\ndf.ix[8]=np.roll(df.ix[8],2)\ndf.ix[9]=np.roll(df.ix[9],2)\ndf.ix[11]=np.roll(df.ix[11],2)\ndf.ix[12]=np.roll(df.ix[12],2)\ndf.ix[13]=np.roll(df.ix[13],2)\ndf.ix[15]=np.roll(df.ix[15],2)\ndf.ix[16]=np.roll(df.ix[16],2)\ndf.ix[18]=np.roll(df.ix[18],2)\ndf.ix[19]=np.roll(df.ix[19],2)\n\n\ndf.columns=df.ix[0] # muda o nome das colunas\ndf=df.drop(0) # elimina a primeira linha\ndf['Série']=preenche(list(df['Série'])) # elimina elementos com Nan\ndf['Geração']=preenche(list(df['Geração']))\ndf['Região']=preenche(list(df['Região']))\ndf['Episódios']=[episodio[0:-7] for episodio in df['Episódios']] # elimina parte final \ndf['Primeiro']=[int(episodio[0:3]) for episodio in df['Episódios']] # separa em duas partes\ndf['Último']=[sint(episodio[4:-1]) for episodio in df['Episódios']]"}
{"cell_type":"markdown","metadata":{},"source":"## Exemplo Tenis"}
{"cell_type":"markdown","metadata":{},"source":"### Para baixar os programas use o comando (não será necessário no SageMathCloud)"}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"%%sh\n\ngit clone https://github.com/ipython-books/cookbook-data.git\ncd cookbook-data\nunzip tennis.zip"}
{"cell_type":"code","execution_count":36,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplayer = 'Roger Federer'\nfilename = \"./cookbook-data/data/{name}.csv\".format(name=player.replace(' ', '-')) \ndf = pd.read_csv(filename)"}
{"cell_type":"code","execution_count":37,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::483e4f06-0139-45d7-bc35-3cd337104429"},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"code","execution_count":38,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"1174    False\n1175     True\n1176     True\n1177     True\n1178    False\nName: win, dtype: bool"},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":"df['win'] = df['winner'] == player\ndf['win'].tail()"}
{"cell_type":"code","execution_count":39,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'Roger Federer has won 82% of his ATP matches.'"},"execution_count":39,"metadata":{},"output_type":"execute_result"}],"source":"(\"{player} has won {vic:.0f}% \"\n               \"of his ATP matches.\").format(\n                player=player, vic=100*df['win'].mean())"}
{"cell_type":"code","execution_count":40,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df['dblfaults'] = (df['player1 double faults'] / \n                   df['player1 total points total'])"}
{"cell_type":"code","execution_count":41,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"1174    0.018116\n1175    0.000000\n1176    0.000000\n1177    0.011561\n1178         NaN\nName: dblfaults, dtype: float64"},"execution_count":41,"metadata":{},"output_type":"execute_result"}],"source":"df['dblfaults'].tail()"}
{"cell_type":"code","execution_count":42,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"gb = df.groupby('year')"}
{"cell_type":"code","execution_count":43,"metadata":{"scrolled":true,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::4bf2cf43-5a1e-4799-8dcb-bb3762860c5d"},"execution_count":43,"metadata":{},"output_type":"execute_result"}],"source":"plt.plot_date(gb['start date'].max(), gb['dblfaults'].mean(), '-', lw=3)\nplt.plot_date(df['start date'], df['dblfaults'], alpha=.25, lw=0)\nplt.ylabel('Proportion of double faults per match.')\nplt.xlabel('Year')\nplt.show()"}
{"cell_type":"markdown","metadata":{},"source":"**Exercício:**\n\n1. Construa uma tabela com o número de vitórias e derrotas de Federer para cada tipo de terreno. "}