{"celltoolbar":"Slideshow","kernelspec":{"display_name":"T - Python 3 (Ubuntu Linux)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"slide"}},"source":"#  Manipulação de Arquivos e dados em Python"}
{"cell_type":"markdown","metadata":{},"source":"\n\n**2. DataFrames**\n\n- São generalizações de Séries, onde temos uma lista de séries concatenadas. "}
{"cell_type":"markdown","metadata":{"collapsed":true},"source":" Estamos basicamente criando o conjunto de dados. Agora vamos usar a biblioteca pandas para exportar este conjunto de dados em um arquivo csv.\n- **df** será um objeto **DataFrame**. Você pode pensar neste objeto mantendo o conteúdo do listaindex  em um formato semelhante a uma tabela sql ou uma planilha do Excel. Vamos dar uma olhada abaixo no conteúdo dentro df ."}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"markdown","metadata":{},"source":"## Criando DataFrames"}
{"cell_type":"code","execution_count":3,"metadata":{"scrolled":true,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"[{'char': '0', 'num': 48}, {'char': '1', 'num': 49}, {'char': '2', 'num': 50}, {'char': '3', 'num': 51}, {'char': '4', 'num': 52}, {'char': '5', 'num': 53}, {'char': '6', 'num': 54}, {'char': '7', 'num': 55}, {'char': '8', 'num': 56}, {'char': '9', 'num': 57}, {'char': ':', 'num': 58}, {'char': ';', 'num': 59}, {'char': '<', 'num': 60}, {'char': '=', 'num': 61}, {'char': '>', 'num': 62}, {'char': '?', 'num': 63}, {'char': '@', 'num': 64}, {'char': 'A', 'num': 65}, {'char': 'B', 'num': 66}, {'char': 'C', 'num': 67}, {'char': 'D', 'num': 68}, {'char': 'E', 'num': 69}, {'char': 'F', 'num': 70}, {'char': 'G', 'num': 71}, {'char': 'H', 'num': 72}, {'char': 'I', 'num': 73}, {'char': 'J', 'num': 74}, {'char': 'K', 'num': 75}, {'char': 'L', 'num': 76}, {'char': 'M', 'num': 77}, {'char': 'N', 'num': 78}, {'char': 'O', 'num': 79}, {'char': 'P', 'num': 80}, {'char': 'Q', 'num': 81}, {'char': 'R', 'num': 82}, {'char': 'S', 'num': 83}, {'char': 'T', 'num': 84}, {'char': 'U', 'num': 85}, {'char': 'V', 'num': 86}, {'char': 'W', 'num': 87}, {'char': 'X', 'num': 88}, {'char': 'Y', 'num': 89}, {'char': 'Z', 'num': 90}, {'char': '[', 'num': 91}, {'char': '\\\\', 'num': 92}, {'char': ']', 'num': 93}, {'char': '^', 'num': 94}, {'char': '_', 'num': 95}, {'char': '`', 'num': 96}, {'char': 'a', 'num': 97}, {'char': 'b', 'num': 98}, {'char': 'c', 'num': 99}, {'char': 'd', 'num': 100}, {'char': 'e', 'num': 101}, {'char': 'f', 'num': 102}, {'char': 'g', 'num': 103}, {'char': 'h', 'num': 104}, {'char': 'i', 'num': 105}, {'char': 'j', 'num': 106}, {'char': 'k', 'num': 107}, {'char': 'l', 'num': 108}, {'char': 'm', 'num': 109}, {'char': 'n', 'num': 110}, {'char': 'o', 'num': 111}, {'char': 'p', 'num': 112}, {'char': 'q', 'num': 113}, {'char': 'r', 'num': 114}, {'char': 's', 'num': 115}, {'char': 't', 'num': 116}, {'char': 'u', 'num': 117}, {'char': 'v', 'num': 118}, {'char': 'w', 'num': 119}, {'char': 'x', 'num': 120}, {'char': 'y', 'num': 121}]\n"}],"source":"dict=[{'char': chr(i), 'num': i } for i in range(48,122)]\nprint(dict)"}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"[{\"nome\": \"serie1\", hghg: }\n ,{\"nome\"}]"}
{"cell_type":"code","execution_count":68,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'<'"},"execution_count":68,"metadata":{},"output_type":"execute_result"}],"source":"chr(60)"}
{"cell_type":"code","execution_count":70,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df=pd.DataFrame(dict)"}
{"cell_type":"code","execution_count":71,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::364fac10-12be-4a3e-a0c7-0c51a775d71f"},"execution_count":71,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"code","execution_count":72,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::364fac10-12be-4a3e-a0c7-0c51a775d71f"},"execution_count":72,"metadata":{},"output_type":"execute_result"}],"source":"df[['char','num']]"}
{"cell_type":"markdown","metadata":{},"source":"Para criar uma nova coluna de dados é fácil."}
{"cell_type":"code","execution_count":74,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df['binario']=df['num'].apply(bin)"}
{"cell_type":"markdown","metadata":{},"source":"`apply` nesse caso aplica uma função em cada elemento da série. "}
{"cell_type":"code","execution_count":78,"metadata":{"trusted":false},"outputs":[{"data":{},"metadata":{},"output_type":"execute_result"}],"source":"df[['num','binario']]"}
{"cell_type":"markdown","metadata":{},"source":"Para acessar os dados pelo índice."}
{"cell_type":"code","execution_count":79,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"char              2\nnum              50\nbinario    0b110010\nName: 2, dtype: object"},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":"df.ix[2]"}
{"cell_type":"markdown","metadata":{},"source":"**3. Exportar arquivos em csv com pandas**\n- Exporte o dataframe para um arquivo csv . Podemos nomear o arquivo dicchar.csv . A função to_csv será usada para exportar o arquivo. O arquivo será salvo no mesmo local do notebook, a menos que especificado de outra forma."}
{"cell_type":"code","execution_count":84,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df.to_csv ( 'dicchar.csv' , index = False , header = True)"}
{"cell_type":"code","execution_count":85,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"char,num,binario\n0,48,0b110000\n1,49,0b110001\n2,50,0b110010\n3,51,0b110011\n4,52,0b110100\n5,53,0b110101\n6,54,0b110110\n7,55,0b110111\n8,56,0b111000\n9,57,0b111001\n:,58,0b111010\n;,59,0b111011\n<,60,0b111100\n=,61,0b111101\n>,62,0b111110\n?,63,0b111111\n@,64,0b1000000\nA,65,0b1000001\nB,66,0b1000010\nC,67,0b1000011\nD,68,0b1000100\nE,69,0b1000101\n\u001b[K"}],"source":"!more dicchar.csv\n"}
{"cell_type":"markdown","metadata":{},"source":"- Podemos exportar arquivos em em excel ou leitura colocando no **.xls** ou **.txt** no lugar do csv no exemplo a cima."}
{"cell_type":"markdown","metadata":{},"source":"**4. Obter dados**"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"!ls -la > teste.txt"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"file=open('teste.txt','r')\ndata=[]\nfor line in file:\n    data=data+[line.split()]\ndata=data[1:]"}
{"cell_type":"code","execution_count":7,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"['drwxr-x---',\n '4',\n 'da4b09c773a74027ac2d5fed6d409acf',\n 'da4b09c773a74027ac2d5fed6d409acf',\n '4096',\n 'May',\n '7',\n '12:21',\n '.']"},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":"data[0]"}
{"cell_type":"code","execution_count":8,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::e995eb6a-9e6d-41f5-be2e-e9809f9d289d"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': list[4],\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\ndf"}
{"cell_type":"markdown","metadata":{},"source":"**- Quantos arquivos são escondidos?**"}
{"cell_type":"code","execution_count":9,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"total 688\r\ndrwxr-x---  4 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 May  7 12:21 .\r\ndrwx------ 24 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 May  7 10:16 ..\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  10949 Apr 24 19:04 2017-04-24-140938.ipynb\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   8972 Apr 24 18:58 .2017-04-24-140938.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   7131 Apr 23 16:59 .Analisedados.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    406 Apr 24 18:53 arq_abr_outuno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1121 Apr 24 18:53 arq_ago_inverno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1220 Apr 24 18:53 arq_dez_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    684 Apr 24 18:53 arq_fev_verao.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1368 Apr 24 18:53 arq_jan_verao.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    885 Apr 24 18:53 arq_jul_inverno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1276 Apr 24 18:53 arq_jun_outuno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1102 Apr 24 18:53 arq_mai_outuno.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    342 Apr 24 18:53 arq_mar_verao.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1586 Apr 24 18:53 arq_nov_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    610 Apr 24 18:53 arq_out_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    610 Apr 24 18:53 arq_set_primavera.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  19129 Apr 24 00:13 .Aula21.04.2017.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  17908 Apr 23 17:38 .Aula24.03.2017.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf 234990 May  5 16:34 Aula24.04.2017.ipynb\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  33113 Apr 28 16:24 .Aula24.04.2017.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf      0 May  7 12:21 .Aula24.04.2017.ipynb.sage-jupyter2\r\ndrwxr-x---  4 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 Apr 22 01:09 cookbook-data\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   1133 Apr 24 18:14 dicchar.csv\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    571 Apr 24 17:55 file.zip\r\ndrwxr-x---  2 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4096 May  3 01:08 .ipynb_checkpoints\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     74 Apr 24 17:22 matriznum2.csv\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     74 Apr 24 17:21 matriznum.csv\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  13914 May  3 01:08 .Notas.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     38 May  6 13:37 .Notas.ipynb.sage-jupyter2\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf 181342 Apr 27 12:51 python.dados.pandas.ipynb\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  19127 Apr 23 19:48 .python.dados.pandas.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf  26048 May  3 17:01 .Tabelas.ipynb.sage-jupyter\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     24 Apr 24 16:57 test.append.dat\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf     40 Apr 24 17:37 test.dat\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf   4486 May  7 12:23 teste.txt\r\n-rw-r-----  1 da4b09c773a74027ac2d5fed6d409acf da4b09c773a74027ac2d5fed6d409acf    219 Apr 24 17:21 texto.txt\r\n"}],"source":"!ls -la "}
{"cell_type":"code","execution_count":10,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::7d8f0476-6d79-487e-84c8-469dff693d64"},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":"df['filename']"}
{"cell_type":"code","execution_count":11,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"13"},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":"len([filename for filename  in df['filename'] if filename[0]==\".\"])"}
{"cell_type":"markdown","metadata":{},"source":"** - Quantos não são diretórios?**"}
{"cell_type":"code","execution_count":12,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::cde6ad60-a3f5-45f2-86a6-9bbb808c3de9"},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":"df['perm'] "}
{"cell_type":"code","execution_count":13,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"33"},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":"len([perm for perm  in df['perm'] if perm[0]==\"-\"])"}
{"cell_type":"markdown","metadata":{},"source":"**- Qual é o maior arquivo? Qual é o menor?** "}
{"cell_type":"code","execution_count":14,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::50174ceb-1a3a-4c9a-8fd5-f2cf8f3c0eec"},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":"df['filesize']"}
{"cell_type":"code","execution_count":15,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"('8972', '0')"},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":"(df['filesize'].max(),df['filesize'].min())"}
{"cell_type":"markdown","metadata":{},"source":"Ops ..."}
{"cell_type":"code","execution_count":16,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': int(list[4]),\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\n\nmaxi,mini=(df['filesize'].max(),df['filesize'].min())"}
{"cell_type":"code","execution_count":17,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'O maior arquivo possui  234990 bytes, o menor 0 bytes'"},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":"\"O maior arquivo possui  {} bytes, o menor {} bytes\".format(maxi,mini)"}
{"cell_type":"markdown","metadata":{},"source":"** - Quantos arquivos  são notebooks? **"}
{"cell_type":"code","execution_count":18,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"3"},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":"len([filename for filename  in df['filename'] if filename[-6:]==\".ipynb\"])"}
{"cell_type":"code","execution_count":19,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::e995eb6a-9e6d-41f5-be2e-e9809f9d289d"},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"code","execution_count":20,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'22'"},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":"(df['day'].min())"}
{"cell_type":"code","execution_count":21,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::e91d75b4-793f-47de-8203-b10bc6ed9646"},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":"df[df['day']=='22']"}
{"cell_type":"code","execution_count":22,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"day                                       24\nfilename             2017-04-24-140938.ipynb\nfilesize                               10949\ngroup                                      1\nhour                                   19:04\nmonth                                    Apr\nperm                              -rw-r-----\nuser        da4b09c773a74027ac2d5fed6d409acf\nusercode    da4b09c773a74027ac2d5fed6d409acf\nName: 2, dtype: object"},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":"df.ix[2]"}
{"cell_type":"markdown","metadata":{},"source":"## Exercícios\n\n1. Quando foi criado o primeiro arquivo?\n2. Quantos arquivos podem ser apenas editadados pelo proprietário? "}
{"cell_type":"markdown","metadata":{},"source":"## Datas"}
{"cell_type":"markdown","metadata":{},"source":"### Trabalhar com datas \nO módulo datetime possui dentro de si uma classe date definida. Nessa classe, existem alguns métodos para manipulação de datas, como a função today, que retorna um objeto do tipo `datetime.date`"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"from datetime import date, timedelta,datetime"}
{"cell_type":"code","execution_count":4,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"2017-05-08\n"}],"source":"hj=date.today()\nprint(hj)"}
{"cell_type":"markdown","metadata":{"collapsed":true},"source":"Um comando útil para ordenar datas é: "}
{"cell_type":"code","execution_count":5,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"736457\n"}],"source":"print(hj.toordinal())"}
{"cell_type":"markdown","metadata":{},"source":"### Trabalhar com  Tempos"}
{"cell_type":"markdown","metadata":{},"source":"Para instantes do tempo, temos  que trabalhar com a classe `datetime`. "}
{"cell_type":"code","execution_count":6,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"1494264479.724102"},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":"agora=datetime.now()\nagora.timestamp()\n"}
{"cell_type":"code","execution_count":7,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"datetime.datetime(2017, 5, 8, 17, 27, 59, 724102)"},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":"agora"}
{"cell_type":"markdown","metadata":{},"source":"Para descobrir uma data no futuro. "}
{"cell_type":"code","execution_count":8,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"2017-06-22\n"}],"source":"futuro=hj+timedelta(days=45) # hoje + 45 dias\nprint(futuro)"}
{"cell_type":"markdown","metadata":{},"source":"Para descobrir um dia da semana:"}
{"cell_type":"code","execution_count":152,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Hoje é Domingo\n"}],"source":"dias = ('Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado', 'Domingo')\nprint (\"Hoje é\", dias[hj.weekday()])"}
{"cell_type":"code","execution_count":153,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'Faltam 137 dias para o meu aniversário. E ele vai cair em uma  Quinta-feira'"},"execution_count":153,"metadata":{},"output_type":"execute_result"}],"source":"\"Faltam {} dias para o meu aniversário. E ele vai cair em uma  {}\".format((niver-hj).days  ,dias[niver.weekday()])"}
{"cell_type":"markdown","metadata":{},"source":"## Impressão de Datas"}
{"cell_type":"markdown","metadata":{},"source":"Para descobrir as datas das próximas aulas de Física Computracional"}
{"cell_type":"code","execution_count":154,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"aula=date(2017,5,8)\nlisdatas=[aula+timedelta(weeks=delay)  for delay in range(1,9) ]"}
{"cell_type":"markdown","metadata":{},"source":"Interessante mas difícil de ler. Para esses e muitas outras coisas é que temos \no comando `strftime`. "}
{"cell_type":"code","execution_count":155,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'15/05/17'"},"execution_count":155,"metadata":{},"output_type":"execute_result"}],"source":"datetime.strftime(lisdatas[0], \"%d/%m/%y\")"}
{"cell_type":"markdown","metadata":{},"source":"O segundo argumento é misterioso mas ele indica o formato que será impressa a data. Nesse\ncaso dia/mes/ano. "}
{"cell_type":"code","execution_count":156,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"['08/05/17',\n '15/05/17',\n '22/05/17',\n '29/05/17',\n '05/06/17',\n '12/06/17',\n '19/06/17',\n '26/06/17',\n '03/07/17']"},"execution_count":156,"metadata":{},"output_type":"execute_result"}],"source":"\nlisdatas=[datetime.strftime(aula+timedelta(weeks=delay), \"%d/%m/%y\")  for delay in range(0,9) ]\nlisdatas"}
{"cell_type":"markdown","metadata":{},"source":"A tabela abaixo mostra as opções para formatação. \n\n| Directive | \tMeaning | \tExample |\n|------------------------------------\n| %a| \tWeekday as locale’s abbreviated name | Sun, Mon, ..., Sat (en_US)|  So, Mo, ..., Sa (de_DE)  |\n| %A| \tWeekday as locale’s full name.\t| Sunday, Monday, ..., Saturday (en_US);| Sonntag, Montag, ..., Samstag (de_DE)|\n| %w| \tWeekday as a decimal number, where 0 is Sunday and 6 is Saturday.|\t0, 1, ..., 6\t |\n| %d|\tDay of the month as a zero-padded decimal number..|\t01, 02, ..., 31\t |\n| %b|\tMonth as locale’s abbreviated name.\t Jan, Feb, ..., Dec (en_US);| Jan, Feb, ..., Dez (de_DE)|\n| %B|\tMonth as locale’s full name.|\t January, February, ..., December (en_US); Januar, Februar, ..., Dezember (de_DE)|\n| %m|\tMonth as a zero-padded decimal number.|\t01, 02, ..., 12\t  %y\tYear without century as a zero-padded decimal number.\t00, 01, ..., 99\t | %Y|\tYear with century as a decimal number.|\t0001, 0002, ..., 2013, 2014, ..., 9998, 9999\t(2) %H\tHour (24-hour clock) as a zero-padded decimal number.|\t00, 01, ..., 23\t |\n| %I|\tHour (12-hour clock) as a zero-padded decimal number.|\t01, 02, ..., 12\t  %p\tLocale’s equivalent of either AM or PM.\t AM, PM (en_US); am, pm (de_DE)|\n| %M|\tMinute as a zero-padded decimal number.|\t00, 01, ..., 59\t |\n| %S|\tSecond as a zero-padded decimal number.|\t00, 01, ..., 59\t|\n| %f|\tMicrosecond as a decimal number, zero-padded on the left.|\t000000, 000001, ..., 999999\t|\n| %z|\tUTC offset in the form +HHMM or -HHMM (empty string if the object is naive).\t(empty),| +0000, -0400, +1030|\n| %Z|\tTime zone name (empty string if the object is naive).\t(empty),| UTC, EST, CST\t |\n| %j|\tDay of the year as a zero-padded decimal number.|\t001, 002, ..., 366\t |\n| %U|\tWeek number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.|\t00, 01, ..., 53\t|\n| %W|\tWeek number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.|\t00, 01, ..., 53\t|\n| %c|\tLocale’s appropriate date and time representation.|\t Tue Aug 16 21:30:00 1988 (en_US); Di 16 Aug 21:30:00 1988 (de_DE)|\n| %x|\tLocale’s appropriate date representation.|\t 08/16/88 (None); 08/16/1988 (en_US); 16.08.1988 (de_DE)|\n| %X|\tLocale’s appropriate time representation.|\t 21:30:00 (en_US); 21:30:00 (de_DE)|\n| %%|\tA literal '%' character.|\t%\t |"}
{"cell_type":"markdown","metadata":{},"source":"A função  `strptime` faz o caminho reverso e importa dados com um determinado formato. "}
{"cell_type":"code","execution_count":157,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"datetime.datetime(2006, 11, 21, 16, 30)"},"execution_count":157,"metadata":{},"output_type":"execute_result"}],"source":"datetime.strptime(\"21/11/06 16:30\", \"%d/%m/%y %H:%M\")"}
{"cell_type":"code","execution_count":158,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'May'"},"execution_count":158,"metadata":{},"output_type":"execute_result"}],"source":"mydate = datetime.now()\nmydate.strftime(\"%B\") \nmydate.strftime(\"%b\") "}
{"cell_type":"markdown","metadata":{},"source":"##  Arquivo mais Antigo Revisitado"}
{"cell_type":"markdown","metadata":{},"source":"Primeiro crio uma coluna extra nos dados combinando day, month e hour. \n"}
{"cell_type":"code","execution_count":159,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df['stringdata']=(\"2017\"+\" \"+ df[\"month\"]+\" \"+df[\"day\"]+ \" \"+df[\"hour\"])"}
{"cell_type":"markdown","metadata":{},"source":"Depois gero outra coluna transformando em `timestamp`.  "}
{"cell_type":"code","execution_count":160,"metadata":{"ExecuteTime":{"end_time":"2017-05-02T01:22:04.815Z","start_time":"2017-05-02T01:22:04.692Z"},"collapsed":true,"trusted":false},"outputs":[],"source":"df['floatdate']=[datetime.strptime(str, \"%Y %b %d %H:%M\").timestamp() for str in df['stringdata']]"}
{"cell_type":"markdown","metadata":{},"source":"O golpe final é achar o indice do mínimo e imprimir o arquivo. "}
{"cell_type":"code","execution_count":161,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'cookbook-data'"},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":"index=df['floatdate'].idxmin()\ndf.ix[index][1]"}
{"cell_type":"markdown","metadata":{},"source":"## Exercícios (0.25 pts)\n\n1. Com base nos dados de https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon Construa um  dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série\n"}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import pandas as pd\nimport numpy as np\n"}
{"cell_type":"code","execution_count":155,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"def preenche(lis):\n    for elem in range(1,len(lis)):\n        if lis[elem]!=lis[elem]: #truque sujo!\n            lis[elem]=lis[elem-1]\n    return lis\n    \n        "}
{"cell_type":"code","execution_count":186,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"def sint(x):\n    try: \n        return int(x)\n    except:\n        return 947+20+1"}
{"cell_type":"code","execution_count":187,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"lispoktab=pd.read_html( \"https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon\")\ndf=lispoktab[0]\ndf.ix[2]=np.roll(df.ix[2],2)\ndf.ix[3]=np.roll(df.ix[3],1)\ndf.ix[4]=np.roll(df.ix[4],2)\ndf.ix[5]=np.roll(df.ix[5],2)\ndf.ix[7]=np.roll(df.ix[7],2)\ndf.ix[8]=np.roll(df.ix[8],2)\ndf.ix[9]=np.roll(df.ix[9],2)\ndf.ix[11]=np.roll(df.ix[11],2)\ndf.ix[12]=np.roll(df.ix[12],2)\ndf.ix[13]=np.roll(df.ix[13],2)\ndf.ix[15]=np.roll(df.ix[15],2)\ndf.ix[16]=np.roll(df.ix[16],2)\ndf.ix[18]=np.roll(df.ix[18],2)\ndf.ix[19]=np.roll(df.ix[19],2)\n\n\ndf.columns=df.ix[0] # muda o nome das colunas\ndf=df.drop(0) # elimina a primeira linha\ndf['Série']=preenche(list(df['Série'])) # elimina elementos com Nan\ndf['Geração']=preenche(list(df['Geração']))\ndf['Região']=preenche(list(df['Região']))\ndf['Episódios']=[episodio[0:-7] for episodio in df['Episódios']] # elimina parte final \ndf['Primeiro']=[int(episodio[0:3]) for episodio in df['Episódios']] # separa em duas partes\ndf['Último']=[sint(episodio[4:-1]) for episodio in df['Episódios']]"}
{"cell_type":"code","execution_count":190,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df[\"# Episódios\"]=df[\"Último\"]-df[\"Primeiro\"]+1\n"}
{"cell_type":"code","execution_count":191,"metadata":{"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::81ba3b96-adc4-472d-ab67-e7d067d3a4ff"},"execution_count":191,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"markdown","metadata":{},"source":"## Exemplo Tenis"}
{"cell_type":"markdown","metadata":{},"source":"### Para baixar os programas use o comando (não será necessário no SageMathCloud)"}
{"cell_type":"code","execution_count":162,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Archive:  tennis.zip\n"},{"name":"stderr","output_type":"stream","text":"fatal: destination path 'cookbook-data' already exists and is not an empty directory.\nreplace data/Andy-Murray.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename:  NULL\n(EOF or read error, treating as \"[N]one\" ...)\n"}],"source":"%%sh\n\ngit clone https://github.com/ipython-books/cookbook-data.git\ncd cookbook-data\nunzip tennis.zip"}
{"cell_type":"code","execution_count":163,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplayer = 'Roger Federer'\nfilename = \"./cookbook-data/data/{name}.csv\".format(name=player.replace(' ', '-')) \ndf = pd.read_csv(filename)"}
{"cell_type":"code","execution_count":164,"metadata":{"scrolled":true,"trusted":false},"outputs":[{"name":"stderr","output_type":"stream","text":"WARNING: Some output was deleted.\n"}],"source":"df"}
{"cell_type":"code","execution_count":165,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"1174    False\n1175     True\n1176     True\n1177     True\n1178    False\nName: win, dtype: bool"},"execution_count":165,"metadata":{},"output_type":"execute_result"}],"source":"df['win'] = df['winner'] == player\ndf['win'].tail()"}
{"cell_type":"code","execution_count":166,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"'Roger Federer has won 82% of his ATP matches.'"},"execution_count":166,"metadata":{},"output_type":"execute_result"}],"source":"(\"{player} has won {vic:.0f}% \"\n               \"of his ATP matches.\").format(\n                player=player, vic=100*df['win'].mean())"}
{"cell_type":"code","execution_count":167,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df['dblfaults'] = (df['player1 double faults'] / \n                   df['player1 total points total'])"}
{"cell_type":"code","execution_count":168,"metadata":{"trusted":false},"outputs":[{"data":{"text/plain":"1174    0.018116\n1175    0.000000\n1176    0.000000\n1177    0.011561\n1178         NaN\nName: dblfaults, dtype: float64"},"execution_count":168,"metadata":{},"output_type":"execute_result"}],"source":"df['dblfaults'].tail()"}
{"cell_type":"code","execution_count":169,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"gb = df.groupby('year')"}
{"cell_type":"code","execution_count":170,"metadata":{"scrolled":true,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::4bf2cf43-5a1e-4799-8dcb-bb3762860c5d"},"execution_count":170,"metadata":{},"output_type":"execute_result"}],"source":"plt.plot_date(gb['start date'].max(), gb['dblfaults'].mean(), '-', lw=3)\nplt.plot_date(df['start date'], df['dblfaults'], alpha=.25, lw=0)\nplt.ylabel('Proportion of double faults per match.')\nplt.xlabel('Year')\nplt.show()"}
{"cell_type":"markdown","metadata":{},"source":"**Exercício:**\n\n1. Construa uma tabela com o número de vitórias e derrotas de Federer para cada tipo de terreno. "}