{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1497112135764}
{"type":"cell","id":"7b9f2e","pos":0,"input":"#### Exercício 1\n###### Até agora, na nossa exploração dos dados automotivos com gráficos de dispersão, focamos a relação entre preço e mpg da cidade. Neste exercício, você criará gráficos para algumas colunas adicionais:\n\n- Mude pelo menos uma das opções de cores.\n- Ligue para a função auto_color com uma lista de colunas diferentes: ***['engine-size', 'curb-weight']***.\n- Examine os plots resultantes. O que você pode aprender com essas plots?","cell_type":"markdown"}
{"type":"cell","id":"cf1d02","pos":1,"input":"#### Exercício 2\n###### Você já viu vários exemplos de usar a estética do gráfico para destacar vários relacionamentos no conjunto de dados. Você pode continuar a explorar o conjunto de dados usando a estética. Experimente o seguinte:\n\n- Copie o código usado para o plano de violino em uma nova célula.\n- Altere o grupo x por variável para \"wheel-base\".\n- Examine o plot resultante. Qual a nova informação agora aparente?","cell_type":"markdown"}
{"type":"cell","id":"f34434","pos":2,"input":"#### Exercício 3\n###### Agora é sua vez de tentar alguns plots com densidades nas margens. Faça o seguinte:\n\n- Altere a variável do eixo x para 'city-mpg'.\n- Examine o plot resultante. Qual a nova informação agora aparente?","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.JointGrid at 0x7f1f210cf590>"},"exec_count":28},"1":{"data":{"image/png":"f39e7094bc070981734611b07a13a195bdf722ce"}}},"exec_count":28,"start":1497228730463,"input":"sns.set_style(\"whitegrid\")\nsns.jointplot('city-mpg', 'price', data = auto_prices, alpha = 0.3)","state":"done","pos":3,"type":"cell","end":1497228731144,"id":"cfafc3","kernel":"python2"}
{"exec_count":1,"start":1497227176317,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()","state":"done","pos":0.5,"type":"cell","end":1497227176993,"id":"1b3cbe","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f1f20abcd50>"},"exec_count":27},"1":{"data":{"image/png":"1404bf3a6c5d9636b5f03ef52e6daf90f035859e"}}},"exec_count":27,"start":1497228558769,"input":"fig = plt.figure(figsize=(20,10)) # define plot area\nax = fig.gca() # define axis \nsns.set_style(\"whitegrid\")\nsns.violinplot(x = 'wheel-base', y = 'engine-size', data = auto_prices, ax = ax)\nax.set_title('Violine plots of auto engine size by wheel-base') # Give the plot a main title\nax.set_xlabel('Wheel-base') # Set text for the x axis\nax.set_ylabel('Engine size')# Set text for y axis","state":"done","pos":1.5,"type":"cell","end":1497228559717,"id":"8e3ab6","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f1f2e5ff1d0>"},"exec_count":8},"1":{"data":{"image/png":"11e2fba120adabdec8d4fed5704ddd952bd0e14c"}}},"exec_count":8,"start":1497227687374,"input":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis \nsns.set_style(\"whitegrid\")\nsns.kdeplot(auto_prices[['engine-size', 'curb-weight']], ax = ax, cmap=\"Blues_d\")\nax.set_title('KDE plot of auto engine size and price') # Give the plot a main title\nax.set_xlabel('Engine Size') # Set text for the x axis\nax.set_ylabel('curb-weight')# Set text for y axis","state":"done","pos":0.75,"type":"cell","end":1497227688369,"id":"58c600","kernel":"python2"}
{"type":"cell","id":"1e6990","pos":1.96875,"input":""}
{"output":{"0":{"data":{"text/plain":"'Done'"},"exec_count":21},"1":{"data":{"image/png":"76b70745b4d348ba358f6b4c7b987e8675931626"}}},"exec_count":21,"start":1497228331868,"input":"def auto_color(df, plot_cols):\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as mpatches\n    for col in plot_cols:\n        fig = plt.figure(figsize=(10, 10))\n        ax = fig.gca()\n        temp1 = df.ix[df['fuel-type'] == 'gas']       \n        temp2 = df.ix[df['fuel-type'] == 'diesel']\n        if temp1.shape[0] > 0:                    \n            temp1.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'DarkBlue')                          \n        if temp2.shape[0] > 0:                    \n            temp2.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'Red') \n    ax.set_title('Scatter plot of price vs. ' + col)\n    red_patch = mpatches.Patch(color='Red', label='Diesel')   \n    blue_patch = mpatches.Patch(color='DarkBlue', label='Gas')\n    plt.legend(handles=[red_patch, blue_patch])\n    return 'Done'\nauto_color(auto_prices, ['engine-size'])","state":"done","pos":0.8125,"type":"cell","end":1497228332152,"id":"8e30b2","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"'Done'"},"exec_count":22},"1":{"data":{"image/png":"06b32e42d052195fd322419317ca5bb20fe5fe56"}}},"exec_count":22,"start":1497228363064,"input":"auto_color(auto_prices, ['curb-weight'])","state":"done","pos":0.84375,"type":"cell","end":1497228363332,"id":"d6f923","kernel":"python2"}
{"output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>fuel-type</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>...</th>\n      <th>engine-size</th>\n      <th>fuel-system</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>...</td>\n      <td>152</td>\n      <td>mpfi</td>\n      <td>2.68</td>\n      <td>3.47</td>\n      <td>9.0</td>\n      <td>154</td>\n      <td>5000</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>...</td>\n      <td>109</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>10.0</td>\n      <td>102</td>\n      <td>5500</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>...</td>\n      <td>136</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>8.0</td>\n      <td>115</td>\n      <td>5500</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 26 columns</p>\n</div>"},"exec_count":2}},"exec_count":2,"start":1497227193458,"input":"auto_prices.head()","state":"done","pos":0.625,"type":"cell","end":1497227193508,"id":"22e78f","kernel":"python2"}
{"type":"cell","id":"a9b728","pos":0.6875,"input":""}
{"type":"cell","id":"9ae244","pos":4,"input":"O gráfico mostra que quanto mais caro o carro, mais combustível ele gastará, e que a maioria dos carros é intermediária no preço e no consumo de combustível","cell_type":"markdown"}
{"type":"cell","id":"466566","pos":5,"input":""}