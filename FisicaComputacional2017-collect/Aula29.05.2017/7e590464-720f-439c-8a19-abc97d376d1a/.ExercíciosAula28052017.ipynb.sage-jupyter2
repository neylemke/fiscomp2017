{"type":"settings","kernel":"python2","backend_state":"ready","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1496079736888}
{"type":"cell","id":"769f2c","pos":0,"input":"### Exercício1\n- A “classificação” de uma palavra é a sua posição em uma lista de palavras classificadas por frequência: a palavra mais comum tem a classificação 1, a segunda mais comum é 2 etc.\n- A lei de Zipf descreve a relação entre classificações e frequências das palavras em linguagens naturais (http://en.wikipedia.org/wiki/Zipf’s_law). Ela prevê especificamente que a frequência, $f$, da palavra com classificação $ r $ é:\n\n  $$ f = cr−s $$ \n- onde s e c são parâmetros que dependem do idioma e do texto. Se você tomar o logaritmo de ambos os lados desta equação, obtemos:\n\n  $$\\log f = \\log c − s\\log r$$\n  \n- Se você traçar o log de f contra o log de r, terá uma linha reta com uma elevação -s e interceptar o log de c.\n\n\n**- Escreva um programa que leia um texto em um arquivo, conte as frequências das palavras e exiba uma linha para cada palavra, em ordem descendente da frequência, com log de f e log de r. Use o programa gráfico de sua escolha para traçar os resultados e verifique se formam uma linha reta. Você pode estimar o valor de s?**\n","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f5f7146d290>]"},"exec_count":27},"1":{"data":{"image/png":"323b867db054a62c87300659848c512c6770f11a"}}},"exec_count":27,"start":1496082567172,"input":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfobj = open(\"NikolaTesla.txt\", \"r\")\ndict = {}\n\nfor i in fobj.readlines():\n    for word in i.split():\n        if word in dict:\n            dict[word] = dict[word]+1\n        else:\n            dict[word] = 1\n\noc = dict.values()\noc.sort()\nX=np.array(range(len(oc)))+1\nY=np.array(oc)\nlogx = np.log(X)\nlogy = np.log(Y)\nfig=plt.figure(figsize=(10,10))\nax = fig.gca()\nx = plt.gca()\nax.set_title(\"Frequencia de palavras da Historia de Nikola Tesla\")\nax.set_xlabel(\"Ranking\")\nax.set_ylabel(\"Frequencia\")\nplt.plot(logx, logy)\n","state":"done","pos":1,"type":"cell","end":1496082567476,"id":"2b8569","kernel":"python2"}
{"exec_count":11,"input":"### Exercício 2\n###### Agora que você já viu como criar alguns plots  simples, é sua vez de realizar uma visualização. Crie o seguinte gráfico de dispersão:\n\n- Traçar o tamanho do motor contra o preço.\n- Defina o tamanho da figura como 8 x 8.\n- Forneça um título significativo, rótulo do eixo x e rótulo do eixo y.","state":"done","pos":2,"cell_type":"markdown","type":"cell","id":"2d2beb","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f5f6e2d90d0>"},"exec_count":37},"1":{"data":{"image/png":"99a23cab8bbeeb8b3ad104e0e0cf6537114bac26"}}},"exec_count":37,"start":1496083711478,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    auto_prices = pd.read_csv(fileName)\n    \n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n        \n    return auto_prices\nauto_prices = read_auto_data()\n\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8))\nax = fig.gca()\nauto_prices.plot(kind = 'scatter', x = 'engine-size', y = 'price', ax = ax)\nax.set_title('Scatter plot de preco vs tamanho do motor')\nax.set_xlabel('Tamanho do motor')\nax.set_ylabel('Preco')\n","state":"done","pos":3,"type":"cell","end":1496083711715,"id":"2e1ef9","kernel":"python2"}
{"type":"cell","id":"f6e9a7","pos":4,"input":"### Exercício 3\n- Faça um gráfico de Barras com os dados contidos no DataFrame do exercício dos epsódios do Pokemon. Represente o número de episódios para cada Temporada. Neste exercicio o gráfico deve conter legenda, titulo, nome dos eixos e cada barra deve conter uma cor diferente.","cell_type":"markdown"}
{"type":"cell","id":"e39ddd","pos":5,"input":""}