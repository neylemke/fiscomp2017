{"kernelspec":{"display_name":"Python 3 (Anaconda)","language":"python","name":"anaconda3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.3"}}
{"cell_type":"markdown","metadata":{},"source":"# Visualização de dados em Python com Matplotlib "}
{"cell_type":"markdown","metadata":{},"source":"**1. Introdução**\n- Matplotlib é provavelmente o pacote Python mais utilizado para gráficos 2D. Ele fornece uma maneira muito rápida de visualizar dados de Python e números de qualidade de publicação em vários formatos. \n- O Matplotlib vem com um conjunto de configurações padrão que permitem personalizar todos os tipos de propriedades. Você pode controlar os padrões de quase todas as propriedades em matplotlib: tamanho de figura e dpi, largura de linha, cor e estilo, eixos, propriedades de eixo e grade, texto e propriedades de fonte e assim por diante. Enquanto os padrões de matplotlib são bastante bons na maioria dos casos, você pode querer modificar algumas propriedades para casos específicos."}
{"cell_type":"markdown","metadata":{},"source":"**Exemplo 1**"}
{"cell_type":"code","execution_count":29,"metadata":{"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::f5b07c66-adda-4011-a583-509069c84124","text/plain":"<matplotlib.figure.Figure at 0x7fc6f024bc18>"},"metadata":{"image/png":{"height":248,"width":382}},"output_type":"display_data"}],"source":"import numpy as np\nimport matplotlib.pyplot as plt\n\nX = np.linspace(-np.pi, np.pi, 256, endpoint=True)\nC,S = np.cos(X), np.sin(X)\n\nplt.plot(X,C)\nplt.plot(X,S)\n\nplt.show()"}
{"cell_type":"markdown","metadata":{},"source":"**Alterando as cores e as larguras de linha, legenda:**\n- Primeiro passo, queremos ter o cosseno em azul eo seno em vermelho e uma linha ligeiramente mais grossa para ambos. Também alteraremos ligeiramente o tamanho da figura para torná-lo mais horizontal.\n- Vamos adicionar uma legenda no canto superior esquerdo. Isso só requer a adição do rótulo de argumento de palavra-chave (que será usado na caixa de legenda) para os comandos de plotagem."}
{"cell_type":"code","execution_count":9,"metadata":{"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::5f304956-3fc3-46cf-bda1-5ae31151afc7","text/plain":"<matplotlib.figure.Figure at 0x7fc7052b2f28>"},"metadata":{"image/png":{"height":397,"width":679}},"output_type":"display_data"}],"source":"plt.figure(figsize=(10,6), dpi=80)\nplt.plot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\", label=\"cosseno\")\nplt.plot(X, S, color=\"red\",  linewidth=2.5, linestyle=\"-\", label=\"seno\")\nplt.legend(loc='upper left', frameon=False)\nplt.show()"}
{"cell_type":"markdown","metadata":{},"source":"Para ajustar os tamanhos das fontes"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":"SMALL_SIZE = 8\nMEDIUM_SIZE = 10\nBIGGER_SIZE = 18\nplt.rc('font', size=SMALL_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=BIGGER_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title\n"}
{"cell_type":"code","execution_count":11,"metadata":{"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::531c7e89-af40-4daa-b38a-46280a5638f3","text/plain":"<matplotlib.figure.Figure at 0x7fc7054ebda0>"},"metadata":{"image/png":{"height":396,"width":672}},"output_type":"display_data"}],"source":"plt.figure(figsize=(10,6), dpi=80)\nplt.plot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\", label=\"cosseno\")\nplt.plot(X, S, color=\"red\",  linewidth=2.5, linestyle=\"-\", label=\"seno\")\nplt.legend(loc='upper left', frameon=False)\n\nplt.show()"}
{"cell_type":"markdown","metadata":{},"source":"**2. Carregar e examinar o conjunto de dados**\n- Vamos começar. A função mostrada na célula abaixo carrega os dados do arquivo .csv. Uma limpeza mínima é realizada nos dados. As linhas com valores em falta são eliminadas e algumas colunas são convertidas a partir de cadeias contendo números para dados numéricos utilizando-se do Pandas."}
{"cell_type":"code","execution_count":28,"metadata":{"trusted":true},"outputs":[],"source":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()\n"}
{"cell_type":"code","execution_count":27,"metadata":{"scrolled":true,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::54de8f4e-ddca-413a-9030-38b0cadf6d27","text/plain":"smc-blob::6049ef18-b46a-49cd-ac84-ff7e01641433"},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":"auto_prices.head()"}
{"cell_type":"markdown","metadata":{},"source":"- Você pode ver que há tipos de variáveis ​​numéricas e de string (categóricas). \n- Como uma próxima etapa examine algumas estatísticas de resumo das colunas numéricas usando o método Pandas descrever.\n- Note que as unidades de medida são americanas e não métricas."}
{"cell_type":"code","execution_count":26,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::29ed2335-1ffb-41f7-96e9-87b6d1d4b0c7","text/plain":"smc-blob::ec296ed9-8274-4ea4-86d3-b4cb906582a2"},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":"auto_prices.describe()"}
{"cell_type":"markdown","metadata":{},"source":"**2.1- Tipos de gráficos básicos**\n- Agora que nós carregamos e tivemos um primeiro olhar para os dados, vamos começar a trabalhar fazendo alguns gráficos.\n- Existem tipos de gráfico enumeráveis que são usados para a exploração de dados."}
{"cell_type":"markdown","metadata":{},"source":"Nesta disciplina focaremos nos seguintes tipos de gráficos:\na) Gráfico de dispersão\nb) Gráficos em Linha\nc) Gráficos em Barras\nd) Histogramas\ne) BoxPlot\nf) BoxPlot usando  Densidade do Kernel\ng) ViolinPlot"}
{"cell_type":"markdown","metadata":{},"source":"** a) Gráficos de dispersão**\n- Os gráficos de dispersão mostram a relação entre duas variáveis sob a forma de pontos no gráfico. Em termos simples, os valores ao longo de um eixo horizontal são plotados contra um eixo vertical.\n- O pacote Pandas contém um número de métodos de plotagem úteis que operam em dataframes. A receita simples para traçar a partir de um dataframe Pandas \n- Use o método de plotagem, especificando o argumento de tipo ou use um método de plotagem gráfico-específico.\n- Especifique as colunas com os valores para os eixos x e y."}
{"cell_type":"code","execution_count":21,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fc70529d278>"},"execution_count":21,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::5c796b07-8216-46f6-84bd-3b1cda85e854","text/plain":"<matplotlib.figure.Figure at 0x7fc700c204e0>"},"metadata":{"image/png":{"height":261,"width":396}},"output_type":"display_data"}],"source":"%matplotlib inline \nauto_prices.plot(kind = 'scatter', x = 'city-mpg', y = 'price')"}
{"cell_type":"markdown","metadata":{},"source":"- Nossa receita básica funcionou, mas não nos dá muito controle sobre o resultado.\n- Aproveitamos o fato de que os métodos Pandas plot são construídos em matplotlib. Assim, podemos especificar uma figura e um ou mais eixos dentro dessa figura. Podemos controlar muitos atributos do plot  uma vez especificados os eixos. Nossa receita melhorada se parece com isto:"}
{"cell_type":"markdown","metadata":{},"source":"**- Especifique uma figura, incluindo um tamanho.**\n\n**- Defina um ou mais eixos dentro da figura.**\n\n**- Use o método de escolha de panda. Certifique-se de especificar o eixo que você está usando.**\n\n**Use métodos nos eixos para controlar atributos como títulos e rótulos de eixo.**"}
{"cell_type":"code","execution_count":24,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"<matplotlib.text.Text at 0x7fc6f034ff60>"},"execution_count":24,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::043cddb2-772e-447b-bd99-6b975425ab9f","text/plain":"<matplotlib.figure.Figure at 0x7fc6f02c9940>"},"metadata":{"image/png":{"height":598,"width":620}},"output_type":"display_data"}],"source":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10, 10)) # define plot area\nax = fig.gca() # define axis                   \nauto_prices.plot(kind = 'scatter', x = 'city-mpg', y = 'price', ax = ax)\nax.set_title('Scatter plot de preço vs consumo') # Give the plot a main title\nax.set_xlabel('Consumo (m/g)') # Set text for the x axis\nax.set_ylabel('Preço (US/$)')# Set text for y axis"}
{"cell_type":"markdown","metadata":{},"source":"- Na trama acima, podemos ver que os carros mais caros têm a menor eficiência de combustível, enquanto carros relativamente baratos também são mais econômicos para a unidade."}
{"cell_type":"markdown","metadata":{},"source":"**b) Gráficosr em Linha**\n- Os gráficos de linhas são semelhantes aos gráficos de pontos. Em traçados de linha os pontos discretos são conectados por linhas.\n- Primeiro, vamos criar um dataframe, com uma relação simples entre x e y."}
{"cell_type":"code","execution_count":31,"metadata":{"trusted":true},"outputs":[],"source":"import pandas as pd\nx = list(range(100))\ny = [z * z for z in range(100)]\ndf = pd.DataFrame({'x':x, 'y':y})"}
{"cell_type":"markdown","metadata":{},"source":"- Agora aplique a receita anterior para plotar x vs y e gerar um gráfico em linha."}
{"cell_type":"code","execution_count":30,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"<matplotlib.text.Text at 0x7fc6f01ec940>"},"execution_count":30,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::7a69e777-8f52-4d4c-924e-f5ed3fcb70af","text/plain":"<matplotlib.figure.Figure at 0x7fc6f02810b8>"},"metadata":{"image/png":{"height":600,"width":621}},"output_type":"display_data"}],"source":"fig = plt.figure(figsize=(10, 10)) # define área do plot \nax = fig.gca() # define eixo               \ndf.plot(x = 'x', y = 'y', ax = ax) ## linha é o formato padrão\nax.set_title('Line plot de $x^2$ vs. $x$') # Título Principal\nax.set_xlabel('$x$') # Eixo x\nax.set_ylabel('$x^2$')# Eixo y"}
{"cell_type":"markdown","metadata":{},"source":"**c) Gráfico de Barras**\n- Gráficos de barras são usados para exibir as contagens de valores exclusivos de uma variável categórica. A altura da barra representa a contagem para cada categoria única da variável.\n- É improvável que o quadro de dados do pandas inclua contagens por categoria de uma variável. Assim, o primeiro passo para fazer um gráfico de barras é calcular as contagens. Felizmente, pandas tem um método ***value_counts***. O código abaixo usa esse método para criar um novo quadro de dados contendo as contagens por marca do carro."}
{"cell_type":"code","execution_count":32,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"toyota           32\nnissan           18\nmazda            13\nhonda            13\nmitsubishi       13\nvolkswagen       12\nsubaru           12\nvolvo            11\npeugot           11\ndodge             9\nmercedes-benz     8\nbmw               8\nplymouth          7\nsaab              6\naudi              6\nporsche           4\nalfa-romero       3\njaguar            3\nchevrolet         3\nisuzu             2\nmercury           1\nName: make, dtype: int64"},"execution_count":32,"metadata":{},"output_type":"execute_result"}],"source":"counts = auto_prices['make'].value_counts() # encontre a contagem para cada categoria\ncounts"}
{"cell_type":"markdown","metadata":{},"source":"- Você pode ver a lista ordenada de contagens descrita acima. Observe que esse quadro de dados é muito menor do que o original, uma vez que só precisa de uma linha para cada valor exclusivo da marca.\n- Agora, faça o gráfico de barras usando o quadro de dados de contagens, crie o gráfico de barras do número de carros por marca. Observe que a receita para este gráfico é a mesma que usamos para gráficos de dispersão e gráficos de linha, usando apenas o método .plot.bar."}
{"cell_type":"code","execution_count":33,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"<matplotlib.text.Text at 0x7fc6f01dd470>"},"execution_count":33,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::f022dfca-a227-488a-b7fb-d2aca35eb074","text/plain":"<matplotlib.figure.Figure at 0x7fc6f0168470>"},"metadata":{"image/png":{"height":652,"width":604}},"output_type":"display_data"}],"source":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \ncounts.plot.bar(ax = ax) # Use the plot.bar method on the counts data frame\nax.set_title('Modelos por Montadora') # Give the plot a main title\nax.set_xlabel('Montadora') # Set text for the x axis\nax.set_ylabel('Modelos')# Set text for y axis"}
{"cell_type":"markdown","metadata":{},"source":"- O gráfico de barra mostra claramente quais fabricantes de automóveis têm o maior número de modelos. As marcas mais especializadas têm relativamente menos modelos."}
{"cell_type":"markdown","metadata":{},"source":"### Exercício1\n- A “classificação” de uma palavra é a sua posição em uma lista de palavras classificadas por frequência: a palavra mais comum tem a classificação 1, a segunda mais comum é 2 etc.\n- A lei de Zipf descreve a relação entre classificações e frequências das palavras em linguagens naturais (http://en.wikipedia.org/wiki/Zipf’s_law). Ela prevê especificamente que a frequência, $f$, da palavra com classificação $ r $ é:\n\n  $$ f = cr−s $$ \n- onde s e c são parâmetros que dependem do idioma e do texto. Se você tomar o logaritmo de ambos os lados desta equação, obtemos:\n\n  $$\\log f = \\log c − s\\log r$$\n  \n- Se você traçar o log de f contra o log de r, terá uma linha reta com uma elevação -s e interceptar o log de c.\n\n\n**- Escreva um programa que leia um texto em um arquivo, conte as frequências das palavras e exiba uma linha para cada palavra, em ordem descendente da frequência, com log de f e log de r. Use o programa gráfico de sua escolha para traçar os resultados e verifique se formam uma linha reta. Você pode estimar o valor de s?**"}
{"cell_type":"markdown","metadata":{},"source":"### Exercício 2\n###### Agora que você já viu como criar alguns plots  simples, é sua vez de realizar uma visualização. Crie o seguinte gráfico de dispersão:\n\n- Traçar o tamanho do motor contra o preço.\n- Defina o tamanho da figura como 8 x 8.\n- Forneça um título significativo, rótulo do eixo x e rótulo do eixo y."}
{"cell_type":"markdown","metadata":{},"source":"### Exercício 3\n- Faça um gráfico de Barras com os dados contidos no DataFrame do exercício dos epsódios do Pokemon. Represente o número de episódios para cada Temporada. Neste exercicio o gráfico deve conter legenda, titulo, nome dos eixos e cada barra deve conter uma cor diferente."}
{"cell_type":"code","execution_count":0,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":""}