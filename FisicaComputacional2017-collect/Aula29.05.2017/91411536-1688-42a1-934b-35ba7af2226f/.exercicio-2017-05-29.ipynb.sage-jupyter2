{"type":"settings","backend_state":"running","trust":true,"kernel":"python2","kernel_state":"idle"}
{"type":"file","last_load":1496082397387}
{"exec_count":10,"start":1496085353785,"input":"#Exercício 1\nimport sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")","state":"done","pos":0,"type":"cell","end":1496085353786,"id":"bd080d","kernel":"python2"}
{"exec_count":3,"start":1496084872189,"input":"import numpy as np\nimport matplotlib.pyplot as plt","state":"done","pos":1,"type":"cell","end":1496084872191,"id":"c8dcb8","kernel":"python2"}
{"output":{"0":{"ename":"IOError","evalue":"[Errno 2] No such file or directory: 'caio.txt'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIOError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-c1c2f893d0c7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"caio.txt\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIOError\u001b[0m: [Errno 2] No such file or directory: 'caio.txt'"]}},"exec_count":12,"start":1496085361186,"input":"file = open(\"caio.txt\", \"r\")","state":"done","pos":2,"type":"cell","end":1496085361198,"id":"0ae970","kernel":"python2"}
{"output":{"0":{"ename":"TypeError","evalue":"descriptor 'readlines' of 'file' object needs an argument","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-f53170c8a7ae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtexto\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: descriptor 'readlines' of 'file' object needs an argument"]}},"exec_count":6,"start":1496084925287,"input":"texto = file.readlines()","state":"done","pos":3,"type":"cell","end":1496084925302,"id":"a4317a","kernel":"python2"}
{"output":{"0":{"ename":"NameError","evalue":"name 'texto' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-cbe5b02f9bfc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtexto\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m             \u001b[0mdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'texto' is not defined"]}},"exec_count":7,"start":1496084931137,"input":"dict={}\nfor line in texto:\n    for word in line.split():\n        if word in dict:\n            dict[word]=dict[word]+1\n        else:\n                dict[word]=1","state":"done","pos":4,"type":"cell","end":1496084931191,"id":"25b773","kernel":"python2"}
{"exec_count":8,"start":1496084956572,"input":"oco=dict.values()\noco.sort()\nX=np.array(range(len(oco)))\nY=np.array(oco)","state":"done","pos":5,"type":"cell","end":1496084956574,"id":"21d8a0","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7fe09b122d90>"},"exec_count":9},"1":{"data":{"image/png":"5d93c5522f4266fccb652f2e643ae53c98d657db"}}},"exec_count":9,"start":1496085023274,"input":"fig = plt.figure(figsize=(10,10)) #define plot área\nax = fig.gca() #define axis\nx = fig.gca()\nplt.plot(X,Y)\nax.set_title('Frequencia de palavras da caio')\nax.set_xlabel('Rank')\nax.set_ylabel('Freq')","state":"done","pos":6,"type":"cell","end":1496085023517,"id":"a777ff","kernel":"python2"}
{"exec_count":13,"start":1496085652087,"input":"oco=dict.values()\noco.sort()\noco.reverse()\nX=np.array(range(len(oco)))+1\nY=np.array(oco)","state":"done","pos":7,"type":"cell","end":1496085652088,"id":"56bef4","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7fe096533790>"},"exec_count":14},"1":{"data":{"image/png":"4e936365089a1289f778a7dbee8b7542f10dec5b"}}},"exec_count":14,"start":1496085673093,"input":"logx=np.log(X)\nlogy=np.log(Y)\nfig = plt.figure(figsize=(10,10)) #define plot área\nax = fig.gca() #define axis\nx = fig.gca()\nplt.plot(logx,logy)\nax.set_title('Frequencia de palavras da Poesiatrabson')\nax.set_xlabel('Rank')\nax.set_ylabel('Freq')","state":"done","pos":8,"type":"cell","end":1496085673336,"id":"8e8cc4","kernel":"python2"}
{"exec_count":15,"start":1496085717304,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()","state":"done","pos":9,"type":"cell","end":1496085718050,"id":"d30738","kernel":"python2"}
{"type":"cell","id":"ede974","pos":10,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8)) # define plot area\nax = fig.gca() # define axis                   \nauto_prices.plot(kind = 'scatter', x = 'engine-size', y = 'price', ax = ax)\nax.set_title('Scatter plot de tamanho do motor vs preco') # Give the plot a main title\nax.set_xlabel('tamanho do motor') # Set text for the x axis\nax.set_ylabel('Preco (US/$)')# Set text for y axis"}