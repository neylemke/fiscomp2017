{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1496079546643}
{"type":"cell","id":"74bc58","pos":0,"input":"\n","cell_type":"markdown"}
{"type":"cell","id":"c6b7aa","pos":1,"input":"##Exercício1\n#A “classificação” de uma palavra é a sua posição em uma lista de palavras classificadas por frequência: a palavra mais comum tem a classificação 1, a segunda mais comum é 2 etc.\n#A lei de Zipf descreve a relação entre classificações e frequências das palavras em linguagens naturais (http://en.wikipedia.org/wiki/Zipf’s_law). #Ela prevê especificamente que a frequência, , da palavra com classificação  é:\n#onde s e c são parâmetros que dependem do idioma e do texto. Se você tomar o logaritmo de ambos os lados desta equação, obtemos:\n#Se você traçar o log de f contra o log de r, terá uma linha reta com uma elevação -s e interceptar o log de c.\n\n#Escreva um programa que leia um texto em um arquivo, conte as frequências das palavras e exiba uma linha para cada palavra, em ordem descendente da frequência, com log de f e log de r. Use o programa gráfico de sua escolha para traçar os resultados e verifique se formam uma linha reta. Você pode estimar o valor de s?\n"}
{"output":{"0":{"text":"/projects/sage/sage-7.5/local/lib/python2.7/site-packages/ipykernel/__main__.py:18: RuntimeWarning: divide by zero encountered in log\n","name":"stderr"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f0429a98fd0>]"},"exec_count":9},"2":{"data":{"image/png":"13ba1599ceea18eef04244fee0af47b570a2f331"}}},"exec_count":9,"start":1496082854178,"input":"import numpy as np\nimport matplotlib.pyplot as plt\n\narquivo = open(\"blabla.txt\", 'r')  # abre o arquivo para leitura\ndict={}\n\nfor i in arquivo.readlines():\n    for word in i.split():\n        if word in dict:\n            dict[word] = dict[word]+1\n        else:\n            dict[word]=1\nic=dict.values()\nic.sort()\nic.reverse()\nX=np.array(range(len(ic)))\nY=np.array(ic)\nlogx = np.log(X)\nlogy = np.log(Y)\nfig=plt.figure(figsize=(10,10))\nax = fig.gca()\nx = fig.gca()\nax.set_title('Frequencia de plavras da biblia')\nax.set_xlabel('rank')\nax.set_ylabel('Freq')\nplt.plot(logx,logy)","state":"done","pos":2,"type":"cell","end":1496082854715,"id":"1fe4e1","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f040ed22750>"},"exec_count":20},"1":{"data":{"image/png":"38786f8f0296828f01ad9629a46bf00925e71634"}}},"exec_count":20,"start":1496084029018,"input":"### Exercício 2\n# Agora que você já viu como criar alguns plots  simples, é sua vez de realizar uma visualização. Crie o seguinte gráfico de dispersão:\n\n#- Traçar o tamanho do motor contra o preço.\n#- Defina o tamanho da figura como 8 x 8.\n#- Forneça um título significativo, rótulo do eixo x e rótulo do eixo y.\ndef read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()\n\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8))\nax = fig.gca()\nauto_prices.plot(kind = 'scatter', x = 'engine-size', y = 'price', ax = ax)\nax.set_title('Scatter plot de preco vs consumo')\nax.set_xlabel('Consumo') # Set text for the x axis\nax.set_ylabel('Preco')# Set text for y axis\n","state":"done","pos":3,"type":"cell","end":1496084029271,"id":"7518d0","kernel":"python2"}
{"type":"cell","id":"b0f021","pos":4,"input":""}