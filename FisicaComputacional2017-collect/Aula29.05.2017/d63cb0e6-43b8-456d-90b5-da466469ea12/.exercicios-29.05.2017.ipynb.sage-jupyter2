{"type":"settings","kernel":"python2","backend_state":"ready","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"file","last_load":1498760797933}
{"type":"cell","id":"277467","pos":3,"input":"file=open(\"livro.txt\",\"r\")","cell_type":"code","exec_count":4}
{"type":"cell","id":"789e17","pos":12,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()","cell_type":"code","exec_count":13}
{"type":"cell","id":"650381","pos":0,"input":"### Exercicio 1","cell_type":"markdown"}
{"type":"cell","id":"d77900","pos":1,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"04c7de","pos":8,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10,10))\nax = fig.gca()\nx = fig.gca()\nplt.plot(oco)\nax.set_title('Frequencia de palavras')\nax.set_xlabel('rank')\nax.set_ylabel('Frank')","output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f5c5e82de50>"},"output_type":"execute_result","exec_count":9},"1":{"data":{"image/png":"7a7b7a2c4cbdfee84104811446452a2498ba4bfa"},"output_type":"execute_result","exec_count":9}},"cell_type":"code","exec_count":9}
{"type":"cell","id":"d72e0a","pos":10,"input":"logx=np.log(x)\nlogy=np.log(y)\nfig = plt.figure(figsize=(10, 10)) # define plot area\nax = fig.gca() # define axis\nx=fig.gca()\nplt.plot(logx,logy)\nax.set_title('frequencia de palavras das Lusiadas') # TÃ­tulo Principal\nax.set_xlabel('rank') # Eixo x\nax.set_ylabel('Freq')# Eixo y","output":{"0":{"ename":"AttributeError","evalue":"'AxesSubplot' object has no attribute 'log'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-f456f762c9f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlogx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mlogy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# define plot area\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# define axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'AxesSubplot' object has no attribute 'log'"]}},"cell_type":"code","exec_count":12}
{"type":"cell","id":"91c9c5","pos":14,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"96a871","pos":5,"input":"dict={}\nfor line in texto:\n    for word in line.split():\n        if word in dict:\n            dict [word]=dict[word]+1\n        else:\n            dict[word]=1","cell_type":"code","exec_count":6}
{"type":"cell","id":"5a5c8a","pos":4,"input":"texto=file.readlines()","cell_type":"code","exec_count":5}
{"type":"cell","id":"891faf","pos":7,"input":"import numpy as np\noco=dict.values()\noco.sort()\nx= np.array(range(len(oco)))+1\ny = np.array(oco)","cell_type":"code","exec_count":8}
{"type":"cell","id":"caf575","pos":11,"input":"### Exercicio 2","cell_type":"markdown"}
{"type":"cell","id":"a37fd1","pos":9,"input":"oco=dict.values()\noco.sort()\noco.reverse()\nx=np.array(range(len(oco)))+1\ny=np.array(oco)","cell_type":"code","exec_count":10}
{"type":"cell","id":"1f49a2","pos":2,"input":"import numpy as np\nimport matplotlib.pyplot as plt","cell_type":"code","exec_count":3}
{"type":"cell","id":"ac7a7b","pos":6,"input":"dict","cell_type":"code","exec_count":0}
{"type":"cell","id":"9ceb47","pos":13,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8,8)) # define plot area\nax = fig.gca() # define axis                   \nauto_prices.plot(kind = 'scatter', x = 'engine-size', y = 'price', ax = ax)\nax.set_title('Scatter plot de preco vs tamanho do motor') # Give the plot a main title\nax.set_xlabel('Tamanho do motor') # Set text for the x axis\nax.set_ylabel('Preco')# Set text for y axis","output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f5c54582ed0>"},"output_type":"execute_result","exec_count":16},"1":{"data":{"image/png":"99a23cab8bbeeb8b3ad104e0e0cf6537114bac26"},"output_type":"execute_result","exec_count":16}},"cell_type":"code","exec_count":16}