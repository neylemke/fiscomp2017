{"type":"settings","kernel":"anaconda3","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.3"}},"kernel_state":"idle"}
{"type":"file","last_load":1497226532768}
{"output":{"0":{"metadata":{"image/png":{"height":413,"width":723}},"data":{"image/png":"ed784615dba12272d68ef07c495b616ce98ea98b"}}},"exec_count":5,"start":1497294473106,"input":"import numpy as np\nimport matplotlib.pyplot as plt\n\nX = np.linspace(-np.pi, np.pi, 256, endpoint=True)\nC,S = np.cos(X), np.sin(X)\n\nplt.plot(X,C)\nplt.plot(X,S)\n\nplt.show()","state":"done","pos":3,"cell_type":"code","type":"cell","end":1497294474339,"id":"08cc88","kernel":"anaconda3"}
{"type":"cell","id":"3a7dff","pos":29,"input":"**c) Gráfico de Barras**\n- Gráficos de barras são usados para exibir as contagens de valores exclusivos de uma variável categórica. A altura da barra representa a contagem para cada categoria única da variável.\n- É improvável que o quadro de dados do pandas inclua contagens por categoria de uma variável. Assim, o primeiro passo para fazer um gráfico de barras é calcular as contagens. Felizmente, pandas tem um método ***value_counts***. O código abaixo usa esse método para criar um novo quadro de dados contendo as contagens por marca do carro.","cell_type":"markdown"}
{"type":"cell","id":"e7beb9","pos":18,"input":"Nesta disciplina focaremos nos seguintes tipos de gráficos:\na) Gráfico de dispersão\nb) Gráficos em Linha\nc) Gráficos em Barras\nd) Histogramas\ne) BoxPlot\nf) BoxPlot usando  Densidade do Kernel\ng) ViolinPlot","cell_type":"markdown"}
{"type":"cell","id":"71564e","pos":36,"input":"### Exercício 3\n- Faça um gráfico de Barras com os dados contidos no DataFrame do exercício dos epsódios do Pokemon. Represente o número de episódios para cada Temporada. Neste exercicio o gráfico deve conter legenda, titulo, nome dos eixos e cada barra deve conter uma cor diferente.","cell_type":"markdown"}
{"type":"cell","id":"35473d","pos":35,"input":"### Exercício 2\n###### Agora que você já viu como criar alguns plots  simples, é sua vez de realizar uma visualização. Crie o seguinte gráfico de dispersão:\n\n- Traçar o tamanho do motor contra o preço.\n- Defina o tamanho da figura como 8 x 8.\n- Forneça um título significativo, rótulo do eixo x e rótulo do eixo y.","cell_type":"markdown"}
{"exec_count":10,"start":1497294480479,"input":"SMALL_SIZE = 8\nMEDIUM_SIZE = 10\nBIGGER_SIZE = 18\nplt.rc('font', size=SMALL_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=BIGGER_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title\n","state":"done","pos":10,"cell_type":"code","type":"cell","end":1497294480481,"id":"62c165","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.794872</td>\n      <td>98.896410</td>\n      <td>174.256923</td>\n      <td>65.886154</td>\n      <td>53.861538</td>\n      <td>2559.000000</td>\n      <td>127.938462</td>\n      <td>3.329385</td>\n      <td>3.250308</td>\n      <td>10.194974</td>\n      <td>103.271795</td>\n      <td>5099.487179</td>\n      <td>25.374359</td>\n      <td>30.841026</td>\n      <td>13248.015385</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.230612</td>\n      <td>6.132038</td>\n      <td>12.476443</td>\n      <td>2.132484</td>\n      <td>2.396778</td>\n      <td>524.715799</td>\n      <td>41.433916</td>\n      <td>0.271866</td>\n      <td>0.314115</td>\n      <td>4.062109</td>\n      <td>37.869730</td>\n      <td>468.271381</td>\n      <td>6.401382</td>\n      <td>6.829315</td>\n      <td>8056.330093</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-2.000000</td>\n      <td>86.600000</td>\n      <td>141.100000</td>\n      <td>60.300000</td>\n      <td>47.800000</td>\n      <td>1488.000000</td>\n      <td>61.000000</td>\n      <td>2.540000</td>\n      <td>2.070000</td>\n      <td>7.000000</td>\n      <td>48.000000</td>\n      <td>4150.000000</td>\n      <td>13.000000</td>\n      <td>16.000000</td>\n      <td>5118.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>94.500000</td>\n      <td>166.300000</td>\n      <td>64.050000</td>\n      <td>52.000000</td>\n      <td>2145.000000</td>\n      <td>98.000000</td>\n      <td>3.150000</td>\n      <td>3.110000</td>\n      <td>8.500000</td>\n      <td>70.000000</td>\n      <td>4800.000000</td>\n      <td>19.500000</td>\n      <td>25.000000</td>\n      <td>7756.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>97.000000</td>\n      <td>173.200000</td>\n      <td>65.400000</td>\n      <td>54.100000</td>\n      <td>2414.000000</td>\n      <td>120.000000</td>\n      <td>3.310000</td>\n      <td>3.290000</td>\n      <td>9.000000</td>\n      <td>95.000000</td>\n      <td>5100.000000</td>\n      <td>25.000000</td>\n      <td>30.000000</td>\n      <td>10245.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>102.400000</td>\n      <td>184.050000</td>\n      <td>66.900000</td>\n      <td>55.650000</td>\n      <td>2943.500000</td>\n      <td>145.500000</td>\n      <td>3.590000</td>\n      <td>3.410000</td>\n      <td>9.400000</td>\n      <td>116.000000</td>\n      <td>5500.000000</td>\n      <td>30.000000</td>\n      <td>35.000000</td>\n      <td>16509.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>120.900000</td>\n      <td>208.100000</td>\n      <td>72.000000</td>\n      <td>59.800000</td>\n      <td>4066.000000</td>\n      <td>326.000000</td>\n      <td>3.940000</td>\n      <td>4.170000</td>\n      <td>23.000000</td>\n      <td>262.000000</td>\n      <td>6600.000000</td>\n      <td>49.000000</td>\n      <td>54.000000</td>\n      <td>45400.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":14}},"exec_count":14,"start":1497294485351,"input":"auto_prices.describe()","scrolled":true,"state":"done","pos":16,"cell_type":"code","type":"cell","end":1497294485430,"id":"61be02","kernel":"anaconda3"}
{"type":"cell","id":"701fea","pos":31,"input":"- Você pode ver a lista ordenada de contagens descrita acima. Observe que esse quadro de dados é muito menor do que o original, uma vez que só precisa de uma linha para cada valor exclusivo da marca.\n- Agora, faça o gráfico de barras usando o quadro de dados de contagens, crie o gráfico de barras do número de carros por marca. Observe que a receita para este gráfico é a mesma que usamos para gráficos de dispersão e gráficos de linha, usando apenas o método .plot.bar.","cell_type":"markdown"}
{"output":{"0":{"metadata":{"image/png":{"height":397,"width":679}},"data":{"image/png":"0a9f31cc5723612582c2ab3cd3d68b1d24401b06"}}},"exec_count":9,"start":1497294479447,"input":"plt.figure(figsize=(10,6), dpi=80)\nplt.plot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\", label=\"cosseno\")\nplt.plot(X, S, color=\"red\",  linewidth=2.5, linestyle=\"--\", label=\"seno\")\nplt.legend(loc='upper left', frameon=False)\nplt.show()","state":"done","pos":8,"cell_type":"code","type":"cell","end":1497294480382,"id":"468f08","kernel":"anaconda3"}
{"type":"cell","id":"9c0949","pos":34,"input":"### Exercício1\n- A “classificação” de uma palavra é a sua posição em uma lista de palavras classificadas por frequência: a palavra mais comum tem a classificação 1, a segunda mais comum é 2 etc.\n- A lei de Zipf descreve a relação entre classificações e frequências das palavras em linguagens naturais (http://en.wikipedia.org/wiki/Zipf’s_law). Ela prevê especificamente que a frequência, $f$, da palavra com classificação $ r $ é:\n\n  $$ f = cr−s $$ \n- onde s e c são parâmetros que dependem do idioma e do texto. Se você tomar o logaritmo de ambos os lados desta equação, obtemos:\n\n  $$\\log f = \\log c − s\\log r$$\n  \n- Se você traçar o log de f contra o log de r, terá uma linha reta com uma elevação -s e interceptar o log de c.\n\n\n**- Escreva um programa que leia um texto em um arquivo, conte as frequências das palavras e exiba uma linha para cada palavra, em ordem descendente da frequência, com log de f e log de r. Use o programa gráfico de sua escolha para traçar os resultados e verifique se formam uma linha reta. Você pode estimar o valor de s?**","cell_type":"markdown"}
{"type":"cell","id":"c05119","pos":9,"input":"Para ajustar os tamanhos das fontes","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"array([-3.14159265, -3.11695271, -3.09231277, -3.06767283, -3.04303288,\n       -3.01839294, -2.993753  , -2.96911306, -2.94447311, -2.91983317,\n       -2.89519323, -2.87055329, -2.84591335, -2.8212734 , -2.79663346,\n       -2.77199352, -2.74735358, -2.72271363, -2.69807369, -2.67343375,\n       -2.64879381, -2.62415386, -2.59951392, -2.57487398, -2.55023404,\n       -2.52559409, -2.50095415, -2.47631421, -2.45167427, -2.42703432,\n       -2.40239438, -2.37775444, -2.3531145 , -2.32847456, -2.30383461,\n       -2.27919467, -2.25455473, -2.22991479, -2.20527484, -2.1806349 ,\n       -2.15599496, -2.13135502, -2.10671507, -2.08207513, -2.05743519,\n       -2.03279525, -2.0081553 , -1.98351536, -1.95887542, -1.93423548,\n       -1.90959553, -1.88495559, -1.86031565, -1.83567571, -1.81103577,\n       -1.78639582, -1.76175588, -1.73711594, -1.712476  , -1.68783605,\n       -1.66319611, -1.63855617, -1.61391623, -1.58927628, -1.56463634,\n       -1.5399964 , -1.51535646, -1.49071651, -1.46607657, -1.44143663,\n       -1.41679669, -1.39215674, -1.3675168 , -1.34287686, -1.31823692,\n       -1.29359698, -1.26895703, -1.24431709, -1.21967715, -1.19503721,\n       -1.17039726, -1.14575732, -1.12111738, -1.09647744, -1.07183749,\n       -1.04719755, -1.02255761, -0.99791767, -0.97327772, -0.94863778,\n       -0.92399784, -0.8993579 , -0.87471795, -0.85007801, -0.82543807,\n       -0.80079813, -0.77615819, -0.75151824, -0.7268783 , -0.70223836,\n       -0.67759842, -0.65295847, -0.62831853, -0.60367859, -0.57903865,\n       -0.5543987 , -0.52975876, -0.50511882, -0.48047888, -0.45583893,\n       -0.43119899, -0.40655905, -0.38191911, -0.35727916, -0.33263922,\n       -0.30799928, -0.28335934, -0.2587194 , -0.23407945, -0.20943951,\n       -0.18479957, -0.16015963, -0.13551968, -0.11087974, -0.0862398 ,\n       -0.06159986, -0.03695991, -0.01231997,  0.01231997,  0.03695991,\n        0.06159986,  0.0862398 ,  0.11087974,  0.13551968,  0.16015963,\n        0.18479957,  0.20943951,  0.23407945,  0.2587194 ,  0.28335934,\n        0.30799928,  0.33263922,  0.35727916,  0.38191911,  0.40655905,\n        0.43119899,  0.45583893,  0.48047888,  0.50511882,  0.52975876,\n        0.5543987 ,  0.57903865,  0.60367859,  0.62831853,  0.65295847,\n        0.67759842,  0.70223836,  0.7268783 ,  0.75151824,  0.77615819,\n        0.80079813,  0.82543807,  0.85007801,  0.87471795,  0.8993579 ,\n        0.92399784,  0.94863778,  0.97327772,  0.99791767,  1.02255761,\n        1.04719755,  1.07183749,  1.09647744,  1.12111738,  1.14575732,\n        1.17039726,  1.19503721,  1.21967715,  1.24431709,  1.26895703,\n        1.29359698,  1.31823692,  1.34287686,  1.3675168 ,  1.39215674,\n        1.41679669,  1.44143663,  1.46607657,  1.49071651,  1.51535646,\n        1.5399964 ,  1.56463634,  1.58927628,  1.61391623,  1.63855617,\n        1.66319611,  1.68783605,  1.712476  ,  1.73711594,  1.76175588,\n        1.78639582,  1.81103577,  1.83567571,  1.86031565,  1.88495559,\n        1.90959553,  1.93423548,  1.95887542,  1.98351536,  2.0081553 ,\n        2.03279525,  2.05743519,  2.08207513,  2.10671507,  2.13135502,\n        2.15599496,  2.1806349 ,  2.20527484,  2.22991479,  2.25455473,\n        2.27919467,  2.30383461,  2.32847456,  2.3531145 ,  2.37775444,\n        2.40239438,  2.42703432,  2.45167427,  2.47631421,  2.50095415,\n        2.52559409,  2.55023404,  2.57487398,  2.59951392,  2.62415386,\n        2.64879381,  2.67343375,  2.69807369,  2.72271363,  2.74735358,\n        2.77199352,  2.79663346,  2.8212734 ,  2.84591335,  2.87055329,\n        2.89519323,  2.91983317,  2.94447311,  2.96911306,  2.993753  ,\n        3.01839294,  3.04303288,  3.06767283,  3.09231277,  3.11695271,\n        3.14159265])"},"exec_count":7}},"exec_count":7,"start":1497294477450,"input":"X","state":"done","pos":5,"cell_type":"code","type":"cell","end":1497294477466,"id":"afcaa5","kernel":"anaconda3"}
{"type":"cell","id":"6907db","pos":33,"input":"- O gráfico de barra mostra claramente quais fabricantes de automóveis têm o maior número de modelos. As marcas mais especializadas têm relativamente menos modelos.","cell_type":"markdown"}
{"type":"cell","id":"f8f545","pos":7,"input":"**Alterando as cores e as larguras de linha, legenda:**\n- Primeiro passo, queremos ter o cosseno em azul eo seno em vermelho e uma linha ligeiramente mais grossa para ambos. Também alteraremos ligeiramente o tamanho da figura para torná-lo mais horizontal.\n- Vamos adicionar uma legenda no canto superior esquerdo. Isso só requer a adição do rótulo de argumento de palavra-chave (que será usado na caixa de legenda) para os comandos de plotagem.","cell_type":"markdown"}
{"type":"cell","id":"209cba","pos":12,"input":"**2. Carregar e examinar o conjunto de dados**\n- Vamos começar. A função mostrada na célula abaixo carrega os dados do arquivo .csv. Uma limpeza mínima é realizada nos dados. As linhas com valores em falta são eliminadas e algumas colunas são convertidas a partir de cadeias contendo números para dados numéricos utilizando-se do Pandas.","cell_type":"markdown"}
{"type":"cell","id":"11318a","pos":27,"input":"- Agora aplique a receita anterior para plotar x vs y e gerar um gráfico em linha.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>fuel-type</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>...</th>\n      <th>engine-size</th>\n      <th>fuel-system</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>...</td>\n      <td>152</td>\n      <td>mpfi</td>\n      <td>2.68</td>\n      <td>3.47</td>\n      <td>9.0</td>\n      <td>154</td>\n      <td>5000</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>...</td>\n      <td>109</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>10.0</td>\n      <td>102</td>\n      <td>5500</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>...</td>\n      <td>136</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>8.0</td>\n      <td>115</td>\n      <td>5500</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 26 columns</p>\n</div>"},"exec_count":13}},"exec_count":13,"start":1497294484453,"input":"auto_prices.head()","scrolled":true,"state":"done","pos":14,"cell_type":"code","type":"cell","end":1497294484489,"id":"fa9c98","kernel":"anaconda3"}
{"type":"cell","id":"86787c","pos":24,"input":"- Na trama acima, podemos ver que os carros mais caros têm a menor eficiência de combustível, enquanto carros relativamente baratos também são mais econômicos para a unidade.","cell_type":"markdown"}
{"output":{"0":{"metadata":{"image/png":{"height":413,"width":717}},"data":{"image/png":"0b2d35f355639cb9aed4751c2afb4a064fdf64e8"}}},"exec_count":8,"start":1497294478494,"input":"test=np.cos(X)+np.sin(X)\nplt.plot(X,test)\nplt.show()","state":"done","pos":6,"cell_type":"code","type":"cell","end":1497294479369,"id":"58c67a","kernel":"anaconda3"}
{"type":"cell","id":"3de02b","pos":21,"input":"- Nossa receita básica funcionou, mas não nos dá muito controle sobre o resultado.\n- Aproveitamos o fato de que os métodos Pandas plot são construídos em matplotlib. Assim, podemos especificar uma figura e um ou mais eixos dentro dessa figura. Podemos controlar muitos atributos do plot  uma vez especificados os eixos. Nossa receita melhorada se parece com isto:","cell_type":"markdown"}
{"exec_count":12,"start":1497294483835,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()\n","state":"done","pos":13,"cell_type":"code","type":"cell","end":1497294484449,"id":"7028fe","kernel":"anaconda3"}
{"type":"cell","id":"44691e","pos":15,"input":"- Você pode ver que há tipos de variáveis ​​numéricas e de string (categóricas). \n- Como uma próxima etapa examine algumas estatísticas de resumo das colunas numéricas usando o método Pandas descrever.\n- Note que as unidades de medida são americanas e não métricas.","cell_type":"markdown"}
{"type":"cell","id":"7b164a","pos":2,"input":"**Exemplo 1**","cell_type":"markdown"}
{"type":"cell","id":"d35127","pos":0,"input":"# Visualização de dados em Python com Matplotlib ","cell_type":"markdown"}
{"output":{"0":{"metadata":{"image/png":{"height":396,"width":672}},"data":{"image/png":"0bfae4c9500378d11bdafdf8b6a54d814fa98032"}}},"exec_count":11,"start":1497294482349,"input":"plt.figure(figsize=(10,6), dpi=80)\nplt.plot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\", label=\"cosseno\")\nplt.plot(X, S, color=\"red\",  linewidth=2.5, linestyle=\"-\", label=\"seno\")\nplt.legend(loc='upper left', frameon=False)\n\nplt.show()","state":"done","pos":11,"cell_type":"code","type":"cell","end":1497294483325,"id":"c77e2f","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"toyota           32\nnissan           18\nmazda            13\nmitsubishi       13\nhonda            13\nsubaru           12\nvolkswagen       12\npeugot           11\nvolvo            11\ndodge             9\nbmw               8\nmercedes-benz     8\nplymouth          7\naudi              6\nsaab              6\nporsche           4\njaguar            3\nchevrolet         3\nalfa-romero       3\nisuzu             2\nmercury           1\nName: make, dtype: int64"},"exec_count":19}},"exec_count":19,"start":1497294494307,"input":"counts = auto_prices['make'].value_counts() # encontre a contagem para cada categoria\ncounts","state":"done","pos":30,"cell_type":"code","type":"cell","end":1497294494311,"id":"105253","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"array([-1.        , -0.99969645, -0.99878599, -0.99726917, -0.99514692,\n       -0.99242051, -0.98909161, -0.98516223, -0.98063477, -0.97551197,\n       -0.96979694, -0.96349314, -0.95660442, -0.94913494, -0.94108925,\n       -0.93247223, -0.92328911, -0.91354546, -0.9032472 , -0.89240058,\n       -0.88101219, -0.86908895, -0.85663808, -0.84366715, -0.83018403,\n       -0.81619691, -0.80171428, -0.78674494, -0.77129796, -0.75538273,\n       -0.73900892, -0.72218645, -0.70492555, -0.68723669, -0.66913061,\n       -0.6506183 , -0.63171101, -0.6124202 , -0.5927576 , -0.57273514,\n       -0.55236497, -0.53165947, -0.51063119, -0.48929292, -0.46765759,\n       -0.44573836, -0.42354851, -0.40110153, -0.37841105, -0.35549083,\n       -0.3323548 , -0.30901699, -0.28549159, -0.26179286, -0.2379352 ,\n       -0.21393308, -0.18980109, -0.16555388, -0.14120615, -0.1167727 ,\n       -0.09226836, -0.067708  , -0.04310654, -0.0184789 ,  0.00615995,\n        0.03079506,  0.05541147,  0.07999425,  0.10452846,  0.12899922,\n        0.15339165,  0.17769097,  0.20188241,  0.22595129,  0.24988299,\n        0.27366299,  0.29727685,  0.32071024,  0.34394892,  0.36697879,\n        0.38978587,  0.41235632,  0.43467642,  0.45673264,  0.47851157,\n        0.5       ,  0.52118488,  0.54205336,  0.56259275,  0.5827906 ,\n        0.60263464,  0.62211282,  0.64121331,  0.65992453,  0.67823512,\n        0.69613395,  0.71361015,  0.73065313,  0.74725253,  0.76339828,\n        0.77908057,  0.79428989,  0.80901699,  0.82325295,  0.83698911,\n        0.85021714,  0.862929  ,  0.87511698,  0.88677369,  0.89789203,\n        0.90846527,  0.91848699,  0.92795109,  0.93685184,  0.94518383,\n        0.952942  ,  0.96012165,  0.9667184 ,  0.97272827,  0.9781476 ,\n        0.9829731 ,  0.98720184,  0.99083125,  0.99385914,  0.99628365,\n        0.99810333,  0.99931706,  0.99992411,  0.99992411,  0.99931706,\n        0.99810333,  0.99628365,  0.99385914,  0.99083125,  0.98720184,\n        0.9829731 ,  0.9781476 ,  0.97272827,  0.9667184 ,  0.96012165,\n        0.952942  ,  0.94518383,  0.93685184,  0.92795109,  0.91848699,\n        0.90846527,  0.89789203,  0.88677369,  0.87511698,  0.862929  ,\n        0.85021714,  0.83698911,  0.82325295,  0.80901699,  0.79428989,\n        0.77908057,  0.76339828,  0.74725253,  0.73065313,  0.71361015,\n        0.69613395,  0.67823512,  0.65992453,  0.64121331,  0.62211282,\n        0.60263464,  0.5827906 ,  0.56259275,  0.54205336,  0.52118488,\n        0.5       ,  0.47851157,  0.45673264,  0.43467642,  0.41235632,\n        0.38978587,  0.36697879,  0.34394892,  0.32071024,  0.29727685,\n        0.27366299,  0.24988299,  0.22595129,  0.20188241,  0.17769097,\n        0.15339165,  0.12899922,  0.10452846,  0.07999425,  0.05541147,\n        0.03079506,  0.00615995, -0.0184789 , -0.04310654, -0.067708  ,\n       -0.09226836, -0.1167727 , -0.14120615, -0.16555388, -0.18980109,\n       -0.21393308, -0.2379352 , -0.26179286, -0.28549159, -0.30901699,\n       -0.3323548 , -0.35549083, -0.37841105, -0.40110153, -0.42354851,\n       -0.44573836, -0.46765759, -0.48929292, -0.51063119, -0.53165947,\n       -0.55236497, -0.57273514, -0.5927576 , -0.6124202 , -0.63171101,\n       -0.6506183 , -0.66913061, -0.68723669, -0.70492555, -0.72218645,\n       -0.73900892, -0.75538273, -0.77129796, -0.78674494, -0.80171428,\n       -0.81619691, -0.83018403, -0.84366715, -0.85663808, -0.86908895,\n       -0.88101219, -0.89240058, -0.9032472 , -0.91354546, -0.92328911,\n       -0.93247223, -0.94108925, -0.94913494, -0.95660442, -0.96349314,\n       -0.96979694, -0.97551197, -0.98063477, -0.98516223, -0.98909161,\n       -0.99242051, -0.99514692, -0.99726917, -0.99878599, -0.99969645, -1.        ])"},"exec_count":6}},"exec_count":6,"start":1497294476405,"input":"np.cos(X)","state":"done","pos":4,"cell_type":"code","type":"cell","end":1497294476428,"id":"6f0e77","kernel":"anaconda3"}
{"type":"cell","id":"768f99","pos":25,"input":"**b) Gráfico em Linha**\n- Os gráficos de linhas são semelhantes aos gráficos de pontos. Em traçados de linha os pontos discretos são conectados por linhas.\n- Primeiro, vamos criar um dataframe, com uma relação simples entre x e y.","cell_type":"markdown"}
{"type":"cell","id":"2b6e88","pos":19,"input":"** a) Gráficos de dispersão**\n- Os gráficos de dispersão mostram a relação entre duas variáveis sob a forma de pontos no gráfico. Em termos simples, os valores ao longo de um eixo horizontal são plotados contra um eixo vertical.\n- O pacote Pandas contém um número de métodos de plotagem úteis que operam em dataframes. A receita simples para traçar a partir de um dataframe Pandas \n- Use o método de plotagem, especificando o argumento de tipo ou use um método de plotagem gráfico-específico.\n- Especifique as colunas com os valores para os eixos x e y.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fa4456a5160>"},"exec_count":15},"1":{"metadata":{"image/png":{"height":261,"width":396}},"data":{"image/png":"aa34796aa576ff35040d20446762be3c82bc62b8"}}},"exec_count":15,"start":1497294487249,"input":"%matplotlib inline \nauto_prices.plot(kind = 'scatter', x = 'city-mpg', y = 'price')","state":"done","pos":20,"cell_type":"code","type":"cell","end":1497294488000,"id":"1a6c00","kernel":"anaconda3"}
{"exec_count":17,"start":1497294490908,"input":"import pandas as pd\nx = list(range(100))\ny = [z * z for z in range(100)]\ndf = pd.DataFrame({'x':x, 'y':y})","state":"done","pos":26,"cell_type":"code","type":"cell","end":1497294490951,"id":"200688","kernel":"anaconda3"}
{"type":"cell","id":"3a2b82","pos":17,"input":"**2.1- Tipos de gráficos básicos**\n- Agora que nós carregamos e tivemos um primeiro olhar para os dados, vamos começar a trabalhar fazendo alguns gráficos.\n- Existem tipos de gráfico enumeráveis que são usados para a exploração de dados.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7fa452e73f98>"},"exec_count":18},"1":{"metadata":{"image/png":{"height":600,"width":621}},"data":{"image/png":"dde3b7c890e3064e4aa0981718daa1e046c891e3"}}},"exec_count":18,"start":1497294492598,"input":"fig = plt.figure(figsize=(10, 10)) # define área do plot \nax = fig.gca() # define eixo               \ndf.plot(x = 'x', y = 'y', ax = ax) ## linha é o formato padrão\nax.set_title('Line plot de $x^2$ vs. $x$') # Título Principal\nax.set_xlabel('$x$') # Eixo x\nax.set_ylabel('$x^2$')# Eixo y","state":"done","pos":28,"cell_type":"code","type":"cell","end":1497294494301,"id":"b1b8f0","kernel":"anaconda3"}
{"type":"cell","id":"09575f","pos":1,"input":"**1. Introdução**\n- Matplotlib é provavelmente o pacote Python mais utilizado para gráficos 2D. Ele fornece uma maneira muito rápida de visualizar dados de Python e números de qualidade de publicação em vários formatos. \n- O Matplotlib vem com um conjunto de configurações padrão que permitem personalizar todos os tipos de propriedades. Você pode controlar os padrões de quase todas as propriedades em matplotlib: tamanho de figura e dpi, largura de linha, cor e estilo, eixos, propriedades de eixo e grade, texto e propriedades de fonte e assim por diante. Enquanto os padrões de matplotlib são bastante bons na maioria dos casos, você pode querer modificar algumas propriedades para casos específicos.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7fa4453e9f98>"},"exec_count":16},"1":{"metadata":{"image/png":{"height":598,"width":620}},"data":{"image/png":"e811d1ab98ae55770118bbb91f9becfcfd288a23"}}},"exec_count":16,"start":1497294489173,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10, 10)) # define plot area\nax = fig.gca() # define axis\nauto_prices.plot(kind = 'scatter', x = 'city-mpg', y = 'price', ax = ax)\nax.set_title('Scatter plot de preço vs consumo') # Give the plot a main title\nax.set_xlabel('Consumo (m/g)') # Set text for the x axis\nax.set_ylabel('Preço (US$)')# Set text for y axis","state":"done","pos":23,"cell_type":"code","type":"cell","end":1497294490399,"id":"a4b603","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7fa44433e358>"},"exec_count":20},"1":{"metadata":{"image/png":{"height":652,"width":604}},"data":{"image/png":"3fc6c3ad4681341a8e3c9ee6167b64efeb4c1342"}}},"exec_count":20,"start":1497294495402,"input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \ncounts.plot.bar(ax = ax) # Use the plot.bar method on the counts data frame\nax.set_title('Modelos por Montadora') # Give the plot a main title\nax.set_xlabel('Montadora') # Set text for the x axis\nax.set_ylabel('Modelos')# Set text for y axis","state":"done","pos":32,"cell_type":"code","type":"cell","end":1497294496671,"id":"728327","kernel":"anaconda3"}
{"type":"cell","id":"f163d5","pos":22,"input":"**- Especifique uma figura, incluindo um tamanho.**\n\n**- Defina um ou mais eixos dentro da figura.**\n\n**- Use o método de escolha de panda. Certifique-se de especificar o eixo que você está usando.**\n\n**Use métodos nos eixos para controlar atributos como títulos e rótulos de eixo.**","cell_type":"markdown"}
{"type":"cell","id":"dd6d90","pos":37,"input":""}