{"type":"file","last_load":1496082668242}
{"type":"settings","backend_state":"running","trust":true,"kernel":"python2-ubuntu","kernel_state":"idle"}
{"type":"cell","id":"b00322","pos":0,"input":"### Exercício1\n- A “classificação” de uma palavra é a sua posição em uma lista de palavras classificadas por frequência: a palavra mais comum tem a classificação 1, a segunda mais comum é 2 etc.\n- A lei de Zipf descreve a relação entre classificações e frequências das palavras em linguagens naturais (http://en.wikipedia.org/wiki/Zipf’s_law). Ela prevê especificamente que a frequência, $f$, da palavra com classificação $ r $ é:\n\n  $$ f = cr−s $$ \n- onde s e c são parâmetros que dependem do idioma e do texto. Se você tomar o logaritmo de ambos os lados desta equação, obtemos:\n\n  $$\\log f = \\log c − s\\log r$$\n  \n- Se você traçar o log de f contra o log de r, terá uma linha reta com uma elevação -s e interceptar o log de c.\n\n\n**- Escreva um programa que leia um texto em um arquivo, conte as frequências das palavras e exiba uma linha para cada palavra, em ordem descendente da frequência, com log de f e log de r. Use o programa gráfico de sua escolha para traçar os resultados e verifique se formam uma linha reta. Você pode estimar o valor de s?**","cell_type":"markdown"}
{"type":"cell","id":"9c6bbe","pos":1,"input":"### Exercício 2\n###### Agora que você já viu como criar alguns plots  simples, é sua vez de realizar uma visualização. Crie o seguinte gráfico de dispersão:\n\n- Traçar o tamanho do motor contra o preço.\n- Defina o tamanho da figura como 8 x 8.\n- Forneça um título significativo, rótulo do eixo x e rótulo do eixo y.","cell_type":"markdown"}
{"type":"cell","id":"bc8104","pos":2,"input":"### Exercício 3\n- Faça um gráfico de Barras com os dados contidos no DataFrame do exercício dos epsódios do Pokemon. Represente o número de episódios para cada Temporada. Neste exercicio o gráfico deve conter legenda, titulo, nome dos eixos e cada barra deve conter uma cor diferente.","cell_type":"markdown"}
{"exec_count":1,"start":1497359866870,"input":"import sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\nimport matplotlib.pyplot as plt","state":"done","pos":0.5,"type":"cell","end":1497359866959,"id":"16de6b","kernel":"python2-ubuntu"}
{"output":{"0":{"ename":"NameError","evalue":"name 'texto' is not defined","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mNameError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-4-ec9f42a05d50>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtexto\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m             \u001b[0mdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'texto' is not defined"]}},"exec_count":4,"start":1497359868955,"input":"dict={}\nfor line in texto:\n    for word in line.split():\n        if word in dict:\n            dict[word]=dict[word]+1\n        else:\n            dict[word]=1","state":"done","pos":0.9375,"type":"cell","end":1497359868966,"id":"147f9f","kernel":"python2-ubuntu"}
{"output":{"0":{"ename":"TypeError","evalue":"descriptor 'readlines' of 'file' object needs an argument","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mTypeError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-3-78a6de2e9a6f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtexto\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: descriptor 'readlines' of 'file' object needs an argument"]}},"exec_count":3,"start":1497359868450,"input":"texto= file.readlines()","state":"done","pos":0.875,"type":"cell","end":1497359868458,"id":"ec3747","kernel":"python2-ubuntu"}
{"output":{"0":{"ename":"IOError","evalue":"[Errno 2] No such file or directory: 'os-lus\\xc3\\xadadas.txt'","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mIOError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-2-2b7f4e4c8804>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfile\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'os-lusíadas.txt'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIOError\u001b[0m: [Errno 2] No such file or directory: 'os-lus\\xc3\\xadadas.txt'"]}},"exec_count":2,"start":1497359867952,"input":"file=open('os-lusíadas.txt','r')","state":"done","pos":0.75,"type":"cell","end":1497359867992,"id":"584cf7","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"{}"},"exec_count":5}},"exec_count":5,"start":1497359869876,"input":"dict","state":"done","pos":0.96875,"type":"cell","end":1497359869883,"id":"c1d19c","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7ff295986c50>"},"exec_count":7},"1":{"data":{"image/png":"543224db63f4d6f03189d3f76d345f6b44df9b3d"}}},"exec_count":7,"start":1497359870951,"input":"\nfig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \nx=fig.gca() \nplt.plot(oco)\nax.set_title('Frequência de palavras das Lusíadas')\nax.set_xlabel('rank') #Eixo X\nax.set_ylabel('Freq') #Eixo Y","state":"done","pos":0.9921875,"type":"cell","end":1497359871357,"id":"496eeb","kernel":"python2-ubuntu"}
{"exec_count":6,"start":1497359870453,"input":"import numpy as np\noco=dict.values()\noco.sort()\nX= np.array(range(len(oco)))+1\nY=np.array(oco)","state":"done","pos":0.984375,"type":"cell","end":1497359870454,"id":"cdf98b","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7ff293532a90>"},"exec_count":8},"1":{"data":{"image/png":"fa62b717c08c833a972c60716aa67f56da946ed7"}}},"exec_count":8,"start":1497359871378,"input":"logx=np.log(X)\nlogy=np.log(Y)\nfig=plt.figure(figsize=(10,10))\nax=fig.gca()\nx=fig.gca()\nplt.plot(logx,logy)\nax.set_title('Frequencia de Palavras das Lusiadas')\nax.set_xlabel('rank')\nax.set_ylabel('Freq')","state":"done","pos":0.99609375,"type":"cell","end":1497359871672,"id":"35fd85","kernel":"python2-ubuntu"}
{"exec_count":9,"start":1497359892547,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()","state":"done","pos":1.5,"type":"cell","end":1497359895006,"id":"ca456b","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7ff28fb9bcd0>"},"exec_count":10},"1":{"data":{"image/png":"a09fa0c43b726b642f6f4bf5601d12540cf1a338"}}},"exec_count":10,"start":1497359895013,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8)) # define plot area\nax = fig.gca() # define axis                   \nauto_prices.plot(kind = 'scatter', x = 'engine-size', y = 'price', ax = ax)\nax.set_title('Scatter plot de preço vs tamanho do motor') # Give the plot a main title\nax.set_xlabel('Tamanho do motor') # Set text for the x axis\nax.set_ylabel('Preço(US$)')# Set text for y axis","state":"done","pos":1.75,"type":"cell","end":1497359895559,"id":"91301d","kernel":"python2-ubuntu"}
{"exec_count":11,"start":1497359896846,"input":"import pandas as pd\n\n#DataFrame\ndata={\n'Série': ['Série Original','Série Original','Série Original','Série Original','Série Original','Geração Avançada','Geração Avançada',\n        'Geração Avançada','Geração Avançada','Diamante e Pérola','Diamante e Pérola','Diamante e Pérola',\n        'Diamante e Pérola','Preto e Branco','Preto e Branco','Preto e Branco','XY','XY','XY','Sun and Moon'],\n'Geração': ['Primeira','Primeira','Segunda','Segunda','Segunda','Terceira','Terceira','Terceira','Terceira',\n            'Quarta','Quarta','Quarta','Quarta','Quinta','Quinta','Quinta','Sexta','Sexta','Sexta','Sétima'],\n'Temporada': ['Liga Indigo', 'As Aventuras nas Ilhas Laranja','A Jornada Johto','Campeões da Liga Johto','Master Quest','Pokémon: Avançado',\n      'Desafio Avançado','Batalha Avançada','Batalha da Fronteira','Diamante e Pérola','Batalha Dimensional','Batalhas Galácticas',\n     'Vencedores da Liga Sinnoh','Preto e Branco','Destinos Rivais', 'Aventuras em Unova (e Mais Além)','A Série XY','Kalos Quest','XY & Z',\n      'Sun and Moon'],\n'Primeiro Episódio': [1,84,119,160,212,277,317,369,422, 469,521,573,626,660,708,757,804,853,898,947] ,\n'Último Episódio': [83,118,159,211,276,316,368,421,468,520,572,625,659,707,756,803,852,897,946,'Não tem'],\n\n'Região': ['Kanto','Ilhas Laranja','Johto','Johto','Johto','Hoenn','Hoenn','Hoenn','Kanto','Sinnoh','Sinnoh','Sinnoh','Sinnoh','Unova','Unova',\n           'Unova','Kalos','Kalos','Kalos','Alola']}\n\ndf = pd.DataFrame(data, columns=['Série','Geração','Temporada','Primeiro Episódio','Último Episódio','Região'])","state":"done","pos":3,"type":"cell","end":1497359896861,"id":"8e1937","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"0     83\n1     35\n2     41\n3     52\n4     65\n5     40\n6     52\n7     53\n8     47\n9     52\n10    52\n11    53\n12    34\n13    48\n14    49\n15    47\n16    49\n17    45\n18    49\ndtype: object"},"exec_count":13}},"exec_count":13,"start":1497359897871,"input":"(df['Último Episódio'][:-1]-df['Primeiro Episódio'][:-1])+1","state":"done","pos":5,"type":"cell","end":1497359897873,"id":"ed7208","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Série</th>\n      <th>Geração</th>\n      <th>Temporada</th>\n      <th>Primeiro Episódio</th>\n      <th>Último Episódio</th>\n      <th>Região</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Série Original</td>\n      <td>Primeira</td>\n      <td>Liga Indigo</td>\n      <td>1</td>\n      <td>83</td>\n      <td>Kanto</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Série Original</td>\n      <td>Primeira</td>\n      <td>As Aventuras nas Ilhas Laranja</td>\n      <td>84</td>\n      <td>118</td>\n      <td>Ilhas Laranja</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Série Original</td>\n      <td>Segunda</td>\n      <td>A Jornada Johto</td>\n      <td>119</td>\n      <td>159</td>\n      <td>Johto</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Série Original</td>\n      <td>Segunda</td>\n      <td>Campeões da Liga Johto</td>\n      <td>160</td>\n      <td>211</td>\n      <td>Johto</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Série Original</td>\n      <td>Segunda</td>\n      <td>Master Quest</td>\n      <td>212</td>\n      <td>276</td>\n      <td>Johto</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Pokémon: Avançado</td>\n      <td>277</td>\n      <td>316</td>\n      <td>Hoenn</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Desafio Avançado</td>\n      <td>317</td>\n      <td>368</td>\n      <td>Hoenn</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Batalha Avançada</td>\n      <td>369</td>\n      <td>421</td>\n      <td>Hoenn</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Batalha da Fronteira</td>\n      <td>422</td>\n      <td>468</td>\n      <td>Kanto</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Diamante e Pérola</td>\n      <td>469</td>\n      <td>520</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Batalha Dimensional</td>\n      <td>521</td>\n      <td>572</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Batalhas Galácticas</td>\n      <td>573</td>\n      <td>625</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Vencedores da Liga Sinnoh</td>\n      <td>626</td>\n      <td>659</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Preto e Branco</td>\n      <td>Quinta</td>\n      <td>Preto e Branco</td>\n      <td>660</td>\n      <td>707</td>\n      <td>Unova</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Preto e Branco</td>\n      <td>Quinta</td>\n      <td>Destinos Rivais</td>\n      <td>708</td>\n      <td>756</td>\n      <td>Unova</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Preto e Branco</td>\n      <td>Quinta</td>\n      <td>Aventuras em Unova (e Mais Além)</td>\n      <td>757</td>\n      <td>803</td>\n      <td>Unova</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>XY</td>\n      <td>Sexta</td>\n      <td>A Série XY</td>\n      <td>804</td>\n      <td>852</td>\n      <td>Kalos</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>XY</td>\n      <td>Sexta</td>\n      <td>Kalos Quest</td>\n      <td>853</td>\n      <td>897</td>\n      <td>Kalos</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>XY</td>\n      <td>Sexta</td>\n      <td>XY &amp; Z</td>\n      <td>898</td>\n      <td>946</td>\n      <td>Kalos</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Sun and Moon</td>\n      <td>Sétima</td>\n      <td>Sun and Moon</td>\n      <td>947</td>\n      <td>Não tem</td>\n      <td>Alola</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":12}},"exec_count":12,"start":1497359897357,"input":"df","state":"done","pos":4,"type":"cell","end":1497359897377,"id":"528c25","kernel":"python2-ubuntu"}
{"exec_count":14,"start":1497359898376,"input":"prim=0\nseg=0\nter=0\nqua=0\nqui=0\nsex=0\n\nfor i in range(19):\n    if df.ix[i]['Geração']== 'Primeira':\n        prim= prim+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Segunda':\n        seg= seg+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Terceira':\n        ter= ter+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Quarta':\n         qua= qua+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Quinta':\n         qui= qui+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Sexta':\n         sex= sex+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\nepis=[prim,seg,ter,qua,qui,sex]\ntemps={'Primeira':prim,'Segunda':seg,'Terceira':ter,'Quarta':qua,'Quinta':qui,'Sexta':sex}\ngerlongeva= max(temps)\n\nfor elem in epis:\n    #print elem\n    if elem==max(epis):\n        print 'A geração mais longeva é a', gerlongeva, 'com', elem, 'episódios' ","state":"done","pos":6,"type":"cell","end":1497359898387,"id":"da59e4","kernel":"python2-ubuntu"}
{"exec_count":15,"start":1497359899348,"input":"epitempsordem=portemp= pd.DataFrame(epis, index= ('Primeira','Segunda','Terceira','Quarta','Quinta','Sexta'), columns=['Epi por temp'])","state":"done","pos":7,"type":"cell","end":1497359899351,"id":"e53976","kernel":"python2-ubuntu"}
{"output":{"0":{"ename":"NameError","evalue":"name 'epiportemp' is not defined","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mNameError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-16-2967805d57ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mepiportemp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'epiportemp' is not defined"]}},"exec_count":16,"start":1497359899851,"input":"epiportemp","state":"done","pos":8,"type":"cell","end":1497359899984,"id":"3b2aeb","kernel":"python2-ubuntu"}
{"output":{"0":{"ename":"NameError","evalue":"name 'epiportemp' is not defined","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mNameError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-18-c043dcad9a70>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# define axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'green'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'yellow'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'black'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'pink'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mepiportemp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Use the plot.bar method on the counts data frame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Numero de episodios por temporada'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Give the plot a main title\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Episodios'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Set text for the x axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'epiportemp' is not defined"]},"1":{"data":{"image/png":"ee97148dedc7c3311fadfac75493fcfdb14f1500"}}},"exec_count":18,"start":1497359900854,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis \ncolor= ['red', 'blue', 'green', 'yellow', 'black', 'pink']\nepiportemp.plot.bar(ax = ax, color=color) # Use the plot.bar method on the counts data frame\nax.set_title('Numero de episodios por temporada') # Give the plot a main title\nax.set_xlabel('Episodios') # Set text for the x axis\nax.set_ylabel('Temporada')# Set text for y axis","state":"done","pos":10,"type":"cell","end":1497359901154,"id":"47858c","kernel":"python2-ubuntu"}
{"exec_count":17,"start":1497359900421,"input":"df['Epis por temp']=pd.DataFrame(epis)","state":"done","pos":9,"type":"cell","end":1497359900423,"id":"b16dd9","kernel":"python2-ubuntu"}