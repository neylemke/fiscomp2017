{"type":"settings","kernel":"python2-ubuntu","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"}},"kernel_state":"idle"}
{"type":"file","last_load":1496632745730}
{"type":"cell","id":"ca3f93","pos":33,"input":"### Exercício 3\n- Faça um gráfico de Barras com os dados contidos no DataFrame do exercício dos epsódios do Pokemon. Represente o número de episódios para cada Temporada. Neste exercicio o gráfico deve conter legenda, titulo, nome dos eixos e cada barra deve conter uma cor diferente.","cell_type":"markdown"}
{"type":"cell","id":"acb74d","pos":6,"input":"Para ajustar os tamanhos das fontes","cell_type":"markdown"}
{"type":"cell","id":"67e99e","pos":19,"input":"**- Especifique uma figura, incluindo um tamanho.**\n\n**- Defina um ou mais eixos dentro da figura.**\n\n**- Use o método de escolha de panda. Certifique-se de especificar o eixo que você está usando.**\n\n**Use métodos nos eixos para controlar atributos como títulos e rótulos de eixo.**","cell_type":"markdown"}
{"exec_count":5,"start":1497275738154,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()\n","state":"done","pos":10,"cell_type":"code","type":"cell","end":1497275740479,"id":"57555a","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7ffb720fdf10>"},"exec_count":16},"1":{"data":{"image/png":"0a9711d15aefe3848d34a21321971e92d68820c2"}}},"exec_count":16,"start":1497275873850,"input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \ncounts.plot.bar(ax = ax) # Use the plot.bar method on the counts data frame\nax.set_title('Modelos por Montadora') # Give the plot a main title\nax.set_xlabel('Montadora') # Set text for the x axis\nax.set_ylabel('Modelos')# Set text for y axis","state":"done","pos":29,"cell_type":"code","type":"cell","end":1497275874374,"id":"080128","kernel":"python2-ubuntu"}
{"type":"cell","id":"81dbc4","pos":18,"input":"- Nossa receita básica funcionou, mas não nos dá muito controle sobre o resultado.\n- Aproveitamos o fato de que os métodos Pandas plot são construídos em matplotlib. Assim, podemos especificar uma figura e um ou mais eixos dentro dessa figura. Podemos controlar muitos atributos do plot  uma vez especificados os eixos. Nossa receita melhorada se parece com isto:","cell_type":"markdown"}
{"type":"cell","id":"fc67c4","pos":32,"input":"### Exercício 2\n###### Agora que você já viu como criar alguns plots  simples, é sua vez de realizar uma visualização. Crie o seguinte gráfico de dispersão:\n\n- Traçar o tamanho do motor contra o preço.\n- Defina o tamanho da figura como 8 x 8.\n- Forneça um título significativo, rótulo do eixo x e rótulo do eixo y.","cell_type":"markdown"}
{"output":{"0":{"data":{"image/png":"7d9b162dd185f3bce300070fc676f7f0ebda71df"}}},"exec_count":1,"start":1497275728054,"input":"import numpy as np\nimport matplotlib.pyplot as plt\n\nX = np.linspace(-np.pi, np.pi, 256, endpoint=True)\nC,S = np.cos(X), np.sin(X)\nteste=np.cos(X)+np.sin(X)\n\nplt.plot(X,C)\nplt.plot(X,S)\nplt.plot(X,teste)\n\nplt.show()","state":"done","pos":3,"cell_type":"code","type":"cell","end":1497275728358,"id":"475d5d","kernel":"python2-ubuntu"}
{"type":"cell","id":"f15ae2","pos":4,"input":"**Alterando as cores e as larguras de linha, legenda:**\n- Primeiro passo, queremos ter o cosseno em azul eo seno em vermelho e uma linha ligeiramente mais grossa para ambos. Também alteraremos ligeiramente o tamanho da figura para torná-lo mais horizontal.\n- Vamos adicionar uma legenda no canto superior esquerdo. Isso só requer a adição do rótulo de argumento de palavra-chave (que será usado na caixa de legenda) para os comandos de plotagem.","cell_type":"markdown"}
{"exec_count":13,"start":1497275869849,"input":"import pandas as pd\nx = list(range(100))\ny = [z * z for z in range(100)]\ndf = pd.DataFrame({'x':x, 'y':y})","state":"done","pos":23,"cell_type":"code","type":"cell","end":1497275869851,"id":"8ac717","kernel":"python2-ubuntu"}
{"type":"cell","id":"2ee293","pos":0,"input":"# Visualização de dados em Python com Matplotlib ","cell_type":"markdown"}
{"type":"cell","id":"145209","pos":9,"input":"**2. Carregar e examinar o conjunto de dados**\n- Vamos começar. A função mostrada na célula abaixo carrega os dados do arquivo .csv. Uma limpeza mínima é realizada nos dados. As linhas com valores em falta são eliminadas e algumas colunas são convertidas a partir de cadeias contendo números para dados numéricos utilizando-se do Pandas.","cell_type":"markdown"}
{"type":"cell","id":"5704be","pos":2,"input":"**Exemplo 1**","cell_type":"markdown"}
{"type":"cell","id":"7ae534","pos":15,"input":"Nesta disciplina focaremos nos seguintes tipos de gráficos:\na) Gráfico de dispersão\nb) Gráficos em Linha\nc) Gráficos em Barras\nd) Histogramas\ne) BoxPlot\nf) BoxPlot usando  Densidade do Kernel\ng) ViolinPlot","cell_type":"markdown"}
{"type":"cell","id":"a587b5","pos":16,"input":"** a) Gráficos de dispersão**\n- Os gráficos de dispersão mostram a relação entre duas variáveis sob a forma de pontos no gráfico. Em termos simples, os valores ao longo de um eixo horizontal são plotados contra um eixo vertical.\n- O pacote Pandas contém um número de métodos de plotagem úteis que operam em dataframes. A receita simples para traçar a partir de um dataframe Pandas \n- Use o método de plotagem, especificando o argumento de tipo ou use um método de plotagem gráfico-específico.\n- Especifique as colunas com os valores para os eixos x e y.","cell_type":"markdown"}
{"type":"cell","id":"3d2abb","pos":1,"input":"**1. Introdução**\n- Matplotlib é provavelmente o pacote Python mais utilizado para gráficos 2D. Ele fornece uma maneira muito rápida de visualizar dados de Python e números de qualidade de publicação em vários formatos. \n- O Matplotlib vem com um conjunto de configurações padrão que permitem personalizar todos os tipos de propriedades. Você pode controlar os padrões de quase todas as propriedades em matplotlib: tamanho de figura e dpi, largura de linha, cor e estilo, eixos, propriedades de eixo e grade, texto e propriedades de fonte e assim por diante. Enquanto os padrões de matplotlib são bastante bons na maioria dos casos, você pode querer modificar algumas propriedades para casos específicos.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7ffb723fae10>"},"exec_count":11},"1":{"data":{"image/png":"3498a36a9389a3d3388c767eaeafaa6beee7f622"}}},"exec_count":11,"start":1497275865652,"input":"%matplotlib inline\nauto_prices.plot(kind = 'scatter', x = 'city-mpg', y = 'price')","state":"done","pos":17,"cell_type":"code","type":"cell","end":1497275866056,"id":"c34f22","kernel":"python2-ubuntu"}
{"type":"cell","id":"8687d1","pos":28,"input":"- Você pode ver a lista ordenada de contagens descrita acima. Observe que esse quadro de dados é muito menor do que o original, uma vez que só precisa de uma linha para cada valor exclusivo da marca.\n- Agora, faça o gráfico de barras usando o quadro de dados de contagens, crie o gráfico de barras do número de carros por marca. Observe que a receita para este gráfico é a mesma que usamos para gráficos de dispersão e gráficos de linha, usando apenas o método .plot.bar.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7ffb72221290>"},"exec_count":14},"1":{"data":{"image/png":"2b32f7cc865ed63ad31d7b8e312164be34f3486f"}}},"exec_count":14,"start":1497275870848,"input":"fig = plt.figure(figsize=(10, 10)) # define área do plot \nax = fig.gca() # define eixo               \ndf.plot(x = 'x', y = 'y', ax = ax) ## linha é o formato padrão\nax.set_title('Line plot de $x^2$ vs. $x$') # Título Principal\nax.set_xlabel('$x$') # Eixo x\nax.set_ylabel('$x^2$')# Eixo y","state":"done","pos":25,"cell_type":"code","type":"cell","end":1497275871498,"id":"b2715d","kernel":"python2-ubuntu"}
{"type":"cell","id":"0e9e0d","pos":26,"input":"**c) Gráfico de Barras**\n- Gráficos de barras são usados para exibir as contagens de valores exclusivos de uma variável categórica. A altura da barra representa a contagem para cada categoria única da variável.\n- É improvável que o quadro de dados do pandas inclua contagens por categoria de uma variável. Assim, o primeiro passo para fazer um gráfico de barras é calcular as contagens. Felizmente, pandas tem um método ***value_counts***. O código abaixo usa esse método para criar um novo quadro de dados contendo as contagens por marca do carro.","cell_type":"markdown"}
{"type":"cell","id":"ecf133","pos":31,"input":"### Exercício1\n- A “classificação” de uma palavra é a sua posição em uma lista de palavras classificadas por frequência: a palavra mais comum tem a classificação 1, a segunda mais comum é 2 etc.\n- A lei de Zipf descreve a relação entre classificações e frequências das palavras em linguagens naturais (http://en.wikipedia.org/wiki/Zipf’s_law). Ela prevê especificamente que a frequência, $f$, da palavra com classificação $ r $ é:\n\n  $$ f = cr−s $$ \n- onde s e c são parâmetros que dependem do idioma e do texto. Se você tomar o logaritmo de ambos os lados desta equação, obtemos:\n\n  $$\\log f = \\log c − s\\log r$$\n  \n- Se você traçar o log de f contra o log de r, terá uma linha reta com uma elevação -s e interceptar o log de c.\n\n\n**- Escreva um programa que leia um texto em um arquivo, conte as frequências das palavras e exiba uma linha para cada palavra, em ordem descendente da frequência, com log de f e log de r. Use o programa gráfico de sua escolha para traçar os resultados e verifique se formam uma linha reta. Você pode estimar o valor de s?**","cell_type":"markdown"}
{"type":"cell","id":"22d328","pos":12,"input":"- Você pode ver que há tipos de variáveis ​​numéricas e de string (categóricas). \n- Como uma próxima etapa examine algumas estatísticas de resumo das colunas numéricas usando o método Pandas descrever.\n- Note que as unidades de medida são americanas e não métricas.","cell_type":"markdown"}
{"output":{"0":{"data":{"image/png":"fbd07c78958ec84c5868e06f3eaab4031c2495ed"}}},"exec_count":2,"start":1497275729558,"input":"plt.figure(figsize=(10,6), dpi=80) #tamanho da figura e dpi=polegadas da imagem\nplt.plot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\", label=\"cosseno\")\nplt.plot(X, S, color=\"red\",  linewidth=2.5, linestyle=\"--\", label=\"seno\")\nplt.legend(loc='upper left', frameon=False)\nplt.show()","state":"done","pos":5,"cell_type":"code","type":"cell","end":1497275729867,"id":"d577e7","kernel":"python2-ubuntu"}
{"exec_count":3,"start":1497275732950,"input":"SMALL_SIZE = 8 #aumentar os tamanhos das fontes\nMEDIUM_SIZE = 10\nBIGGER_SIZE = 18\nplt.rc('font', size=SMALL_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=BIGGER_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title\n","state":"done","pos":7,"cell_type":"code","type":"cell","end":1497275732952,"id":"d9a73d","kernel":"python2-ubuntu"}
{"type":"cell","id":"ed4cea","pos":24,"input":"- Agora aplique a receita anterior para plotar x vs y e gerar um gráfico em linha.","cell_type":"markdown"}
{"type":"cell","id":"0fe11e","pos":30,"input":"- O gráfico de barra mostra claramente quais fabricantes de automóveis têm o maior número de modelos. As marcas mais especializadas têm relativamente menos modelos.","cell_type":"markdown"}
{"type":"cell","id":"ae2e1b","pos":21,"input":"- Na trama acima, podemos ver que os carros mais caros têm a menor eficiência de combustível, enquanto carros relativamente baratos também são mais econômicos para a unidade.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"toyota           32\nnissan           18\nmazda            13\nmitsubishi       13\nhonda            13\nvolkswagen       12\nsubaru           12\nvolvo            11\npeugot           11\ndodge             9\nbmw               8\nmercedes-benz     8\nplymouth          7\nsaab              6\naudi              6\nporsche           4\nchevrolet         3\nalfa-romero       3\njaguar            3\nisuzu             2\nmercury           1\nName: make, dtype: int64"},"exec_count":15}},"exec_count":15,"start":1497275871949,"input":"counts = auto_prices['make'].value_counts() # encontre a contagem para cada categoria\ncounts","state":"done","pos":27,"cell_type":"code","type":"cell","end":1497275871959,"id":"f1b7ed","kernel":"python2-ubuntu"}
{"type":"cell","id":"f57fe3","pos":22,"input":"**b) Gráfico em Linha**\n- Os gráficos de linhas são semelhantes aos gráficos de pontos. Em traçados de linha os pontos discretos são conectados por linhas.\n- Primeiro, vamos criar um dataframe, com uma relação simples entre x e y.","cell_type":"markdown"}
{"type":"cell","id":"6ed7e4","pos":14,"input":"**2.1- Tipos de gráficos básicos**\n- Agora que nós carregamos e tivemos um primeiro olhar para os dados, vamos começar a trabalhar fazendo alguns gráficos.\n- Existem tipos de gráfico enumeráveis que são usados para a exploração de dados.","cell_type":"markdown"}
{"output":{"0":{"data":{"image/png":"fc6a35194f954b0c999866e90098cd64e324c52e"}}},"exec_count":4,"start":1497275736651,"input":"plt.figure(figsize=(10,6), dpi=80)\nplt.plot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\", label=\"cosseno\")\nplt.plot(X, S, color=\"red\",  linewidth=2.5, linestyle=\"--\", label=\"seno\")\nplt.legend(loc='upper left', frameon=False)\n\nplt.show()","state":"done","pos":8,"cell_type":"code","type":"cell","end":1497275736969,"id":"6ec20a","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.794872</td>\n      <td>98.896410</td>\n      <td>174.256923</td>\n      <td>65.886154</td>\n      <td>53.861538</td>\n      <td>2559.000000</td>\n      <td>127.938462</td>\n      <td>3.329385</td>\n      <td>3.250308</td>\n      <td>10.194974</td>\n      <td>103.271795</td>\n      <td>5099.487179</td>\n      <td>25.374359</td>\n      <td>30.841026</td>\n      <td>13248.015385</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.230612</td>\n      <td>6.132038</td>\n      <td>12.476443</td>\n      <td>2.132484</td>\n      <td>2.396778</td>\n      <td>524.715799</td>\n      <td>41.433916</td>\n      <td>0.271866</td>\n      <td>0.314115</td>\n      <td>4.062109</td>\n      <td>37.869730</td>\n      <td>468.271381</td>\n      <td>6.401382</td>\n      <td>6.829315</td>\n      <td>8056.330093</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-2.000000</td>\n      <td>86.600000</td>\n      <td>141.100000</td>\n      <td>60.300000</td>\n      <td>47.800000</td>\n      <td>1488.000000</td>\n      <td>61.000000</td>\n      <td>2.540000</td>\n      <td>2.070000</td>\n      <td>7.000000</td>\n      <td>48.000000</td>\n      <td>4150.000000</td>\n      <td>13.000000</td>\n      <td>16.000000</td>\n      <td>5118.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>94.500000</td>\n      <td>166.300000</td>\n      <td>64.050000</td>\n      <td>52.000000</td>\n      <td>2145.000000</td>\n      <td>98.000000</td>\n      <td>3.150000</td>\n      <td>3.110000</td>\n      <td>8.500000</td>\n      <td>70.000000</td>\n      <td>4800.000000</td>\n      <td>19.500000</td>\n      <td>25.000000</td>\n      <td>7756.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>97.000000</td>\n      <td>173.200000</td>\n      <td>65.400000</td>\n      <td>54.100000</td>\n      <td>2414.000000</td>\n      <td>120.000000</td>\n      <td>3.310000</td>\n      <td>3.290000</td>\n      <td>9.000000</td>\n      <td>95.000000</td>\n      <td>5100.000000</td>\n      <td>25.000000</td>\n      <td>30.000000</td>\n      <td>10245.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>102.400000</td>\n      <td>184.050000</td>\n      <td>66.900000</td>\n      <td>55.650000</td>\n      <td>2943.500000</td>\n      <td>145.500000</td>\n      <td>3.590000</td>\n      <td>3.410000</td>\n      <td>9.400000</td>\n      <td>116.000000</td>\n      <td>5500.000000</td>\n      <td>30.000000</td>\n      <td>35.000000</td>\n      <td>16509.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>120.900000</td>\n      <td>208.100000</td>\n      <td>72.000000</td>\n      <td>59.800000</td>\n      <td>4066.000000</td>\n      <td>326.000000</td>\n      <td>3.940000</td>\n      <td>4.170000</td>\n      <td>23.000000</td>\n      <td>262.000000</td>\n      <td>6600.000000</td>\n      <td>49.000000</td>\n      <td>54.000000</td>\n      <td>45400.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":7}},"exec_count":7,"start":1497275741493,"input":"auto_prices.describe()","state":"done","pos":13,"cell_type":"code","type":"cell","end":1497275741626,"id":"5a5095","kernel":"python2-ubuntu"}
{"output":{"0":{"ename":"UnicodeDecodeError","evalue":"'ascii' codec can't decode byte 0xc3 in position 19: ordinal not in range(128)","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mUnicodeDecodeError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-12-1ee97fef7d52>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# define axis_cria_os_eixos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mauto_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'scatter'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'city-mpg'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'price'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Scatter plot de preço vs consumo'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Give the plot a main title\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Consumo (m/g)'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Set text for the x axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Preço (US/$)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m# Set text for y axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/matplotlib/axes/_axes.pyc\u001b[0m in \u001b[0;36mset_title\u001b[0;34m(self, label, fontdict, loc, **kwargs)\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0;34m'verticalalignment'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'baseline'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m             'horizontalalignment': loc.lower()}\n\u001b[0;32m--> 184\u001b[0;31m         \u001b[0mtitle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m         \u001b[0mtitle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdefault\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfontdict\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/matplotlib/text.pyc\u001b[0m in \u001b[0;36mset_text\u001b[0;34m(self, s)\u001b[0m\n\u001b[1;32m   1204\u001b[0m         \u001b[0mACCEPTS\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstring\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0manything\u001b[0m \u001b[0mprintable\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0;34m'%s'\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1205\u001b[0m         \"\"\"\n\u001b[0;32m-> 1206\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'%s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1207\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1208\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUnicodeDecodeError\u001b[0m: 'ascii' codec can't decode byte 0xc3 in position 19: ordinal not in range(128)"]},"1":{"data":{"image/png":"49a7259700667ead0365d22d11c2c4a607566ddf"}}},"exec_count":12,"start":1497275867453,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10, 10)) # define plot area\nax = fig.gca() # define axis_cria_os_eixos                   \nauto_prices.plot(kind = 'scatter', x = 'city-mpg', y = 'price', ax = ax)\nax.set_title('Scatter plot de preço vs consumo') # Give the plot a main title\nax.set_xlabel('Consumo (m/g)') # Set text for the x axis\nax.set_ylabel('Preço (US/$)')# Set text for y axis","state":"done","pos":20,"cell_type":"code","type":"cell","end":1497275868053,"id":"fd29bb","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>fuel-type</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>...</th>\n      <th>engine-size</th>\n      <th>fuel-system</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>...</td>\n      <td>152</td>\n      <td>mpfi</td>\n      <td>2.68</td>\n      <td>3.47</td>\n      <td>9.0</td>\n      <td>154</td>\n      <td>5000</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>...</td>\n      <td>109</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>10.0</td>\n      <td>102</td>\n      <td>5500</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>...</td>\n      <td>136</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>8.0</td>\n      <td>115</td>\n      <td>5500</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 26 columns</p>\n</div>"},"exec_count":6}},"exec_count":6,"start":1497275740488,"input":"auto_prices.head() #cabeçalho_ou_primeiras_linhas","scrolled":true,"state":"done","pos":11,"cell_type":"code","type":"cell","end":1497275740522,"id":"194bf8","kernel":"python2-ubuntu"}