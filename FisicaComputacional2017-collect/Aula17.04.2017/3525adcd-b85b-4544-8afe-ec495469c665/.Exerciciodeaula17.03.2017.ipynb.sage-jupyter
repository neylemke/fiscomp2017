{"kernelspec":{"display_name":"Python 2","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}}
{"cell_type":"markdown","metadata":{"collapsed":false},"source":"# Exercícios das aula do dia 17.04.2017"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Sendo uma equação de 2 grau Ax²+Bx+C\n\n"}],"source":"#1. Calcule as raízes da equação do 2◦ grau ( Ax2+Bx+C=0Ax2+Bx+C=0 ) sendo os valores de A, B e C fornecidos pelo usuário, levando em consideração a existência de raízes reais.\n\nimport math\nprint(\"Sendo uma equação de 2 grau Ax²+Bx+C\\n\")\nA = float(input(\"Insira o valor de A:\"))\nB = float(input(\"Insira o valor de B:\"))\nC = float(input(\"Insira o valor de C:\"))\ndelta = B*B - 4*A*C\nif(delta>0):\n    print(\"Sendo o Delta = \", delta)\n    x1 = (-B + math.sqrt(delta))/(2*A)\n    x2 = (-B - math.sqrt(delta))/(2*A)\n    print(\"Existem duas raízes reais distintas, sendo tais:\")\n    print(x1, x2)\nelif delta == 0:\n        print(\"Sendo o Delta = \", delta)\n        x = -B/2*A\n        print(\"Existe uma raiz com multiplicidade 2, sendo tal:\")\n        print(x)\nelse:\n    print(\"Sendo o Delta = \", delta)\n    print(\"Não existem raízes reais.\")"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Insira o valor do lado do triângulo de :2\nInsira o valor do lado do triângulo de :5\nInsira o valor do lado do triângulo de :10\nTais valores não formam um triângulo.\n"}],"source":"##2. Dados três valores A, B e C, verifique se eles podem ser os comprimentos dos lados de um triângulo. Se forem, verificar se compõem um triângulo equilátero, isósceles ou escaleno. Informar se não compuserem nenhum triângulo. \nA = float(input(\"Insira o valor do lado do triângulo:\"))\nB = float(input(\"Insira o valor do lado do triângulo:\"))\nC = float(input(\"Insira o valor do lado do triângulo:\"))\nif A+B > C and A+C>B and B+C>A:\n    if ((A==B) and (B==C)):\n        print(\"Triângulo Equilátero.\")\n    else:    \n        if ((A==B) or (A==C) or (B==C)):\n            print(\"Triângulo isósceles.\")\n        else:\n            print(\"Triângulo Escaleno.\")\nelse:\n    print(\"Tais valores não formam um triângulo.\")\n\n         \n"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Insira o valor do lado do paralelepído:4\nInsira o valor do lado do paralelepído:2\nInsira o valor do lado do paralelepído:5\nO volume é:\n40.0\nA área lateral é:\n40.0\n"}],"source":"#3. Construa uma função que calcule o volume de um paralelepído de lados a, b e c. Construa uma função que calcule a área lateral do mesmo paralelepipido.\n\nA = float(input(\"Insira o valor do lado do paralelepído:\"))\nB = float(input(\"Insira o valor do lado do paralelepído:\"))\nC = float(input(\"Insira o valor do lado do paralelepído:\"))\nprint(\"O volume é:\")\nprint(A*B*C)\nprint(\"A área lateral é:\")\nprint(4*B*C)\n"}
{"cell_type":"code","execution_count":39,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Insira um numero natural:589\n1\n"}],"source":"#4. Implemente uma função que conte o número de algarismos pares em um número natural.\n\na = input(\"Insira um numero natural:\")\nnum=0\nfor alg in str(a):\n    if int(alg)%2==0:\n        num=num+1\nprint(num)\n\n#ou \n\n#def contalg(num):\n    #return len([alg for alg in str(num) if int(alg)%2==0])"}
{"cell_type":"code","execution_count":48,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Insira as 30 posições do vetor:1\nInsira as 30 posições do vetor:-4\nInsira as 30 posições do vetor:5\n[1, 0, 1]\n"}],"source":"#5. faça um algoritmo que solicite ao usuário números e os armazene em um vetor de 30 posições. Crie uma função que recebe o vetor preenchido e substitua todas as ocorrência de valores positivos por 1 e todos os valores negativos por 0.\na=[]\nfor i in range(1, 31):\n    x = int(input(\"Insira as 30 posições do vetor:\"))\n    a.append(x)\n\ndef vetor(a):\n    for i in range(len(a)):\n        if a[i] > 0:\n            a[i] =1\n        else:\n            a[i] = 0\n    return a\n    \nc = vetor(a)\nprint(c)"}
{"cell_type":"markdown","metadata":{},"source":"# 6. Pesquise e monte um notebook em modo Markdown qual a função e exemplos da utilização dos seguintes pacotes: *math, numpy, matplotlib, pandas* e string**.\n\n## Math\nmath.sqrt(numero): Retorna a raíz quadrada do número.\n\nmath.cos(numero): Retorna o cosseno do número em radiano.\n\nmath.sin(numero): Retorna o seno do número em radiano.\n\nmath.tan(numero): Retorna a tangente do número em radiano.\n\nmath.radians(numero): Converte o angulo ‘numero’ de graus para radiano.\n\nmath.pi: Não é bem uma função, está mais para uma constante com o número pi (3.1415926535897931).\n\nmath.hypot(x, y): Retorna a hipotenusa dos números (catetos) fornecidos.\n\nExemplo :\n\nimport math \n\na = 9 \n\nb = math.sqrt(a) \n\nprint(b) # Imprime 3.0\n\n\n"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}