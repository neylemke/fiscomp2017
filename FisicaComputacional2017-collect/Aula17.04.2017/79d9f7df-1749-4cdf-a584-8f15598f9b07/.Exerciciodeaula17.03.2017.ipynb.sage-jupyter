{"kernelspec":{"display_name":"Python 2","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}}
{"cell_type":"markdown","metadata":{"collapsed":false},"source":"# DATA DE HOJE : 17 de Abril de 2017"}
{"cell_type":"markdown","metadata":{"collapsed":true,"trusted":false},"source":"### exerc 1"}
{"cell_type":"markdown","metadata":{},"source":"# Todos os exercicios aqui foram feitos no dia 20/04/2017"}
{"cell_type":"code","execution_count":42,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"A= 1\nB= 2\nC= 3\nA equação não possui raizes reais\n"}],"source":"a = input(\"A= \")\nb = input(\"B= \")\nc = input(\"C= \")\n\nimport math\n \ndelta = (b*b-4*a*c)\n \nif delta < 0:\n    print \"A equação não possui raizes reais\"\nelif delta == 0:\n    raiz = ((-1*b+math.sqrt(delta))/(2*a))\n    print \"A raiz da equação é: \",raiz\nelse:\n    raiz1 = ((-1*b + math.sqrt(delta))/(2*a))\n    raiz2 = ((-1*b - math.sqrt(delta))/(2*a))   \n    print \" raiz x1 = \",raiz1,\"  raiz x2 = \",raiz2\n"}
{"cell_type":"markdown","metadata":{},"source":"### exerc 2\n"}
{"cell_type":"code","execution_count":38,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"A= 34\nB= 67889\nC= 4\nO triangulo é escaleno\n"}],"source":"A = input(\"A= \")\nB = input(\"B= \")\nC = input(\"C= \")\n\n\nif (A+B)>C and (A+C)>B and (B+C)>A:\n   print 'formam um triângulo'\nif not (A+B)>C and (A+C)>B and (B+C)>A:\n   print 'não formam um triângulo'\nelif A==B and A==C:\n   print 'O triângulo é equilatero'\nelif A!=B and A!=C and B!=C:\n   print 'O triangulo é escaleno'\nelse:\n   print 'O triangulo ee isosceles'\n\n    "}
{"cell_type":"markdown","metadata":{},"source":"## exerc 3"}
{"cell_type":"code","execution_count":40,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"forneça os lados do paralelepipedo\nA= 2\nB= 3\nC= 4\nVolume 24\nArea Lateral 28\n"}],"source":"print 'forneça os lados do paralelepipedo'\nA = input(\"A= \")\nB = input(\"B= \")\nC = input(\"C= \")\n\nVolume = A*B*C\nprint 'Volume',Volume\n\nArealateral = 2*((A*C)+(A*B))\nprint 'Area Lateral', Arealateral\n"}
{"cell_type":"markdown","metadata":{},"source":"## exerc 4\n"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"digite um numero natural123456\nqtd de pares 3\n"}],"source":"N = str(input ('digite um numero natural '))\ndef algorismos(N):\n    return len([alg for alg in N if int(alg)%2==0])\nprint \"qtd de pares\",algorismos(N)"}
{"cell_type":"markdown","metadata":{},"source":"## exerc 5\n"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"defina tamanho do vetor - para esse exercicio use 30: 4\nvalores 2\nvalores 1\nvalores 3\nvalores -1\npositivo = 1; negativo = 0 :  [1, 1, 1, 0]\n"}],"source":"X= input (\"defina tamanho do vetor - para esse exercicio use 30: \") # teste - para esse exercicio tamanho do vetor é 30\nN = [int(input(\"valores \". format(i))) for i in range (X)]\nN1 = []\n\nfor j in range (len(N)):\n    if N[j]>0:\n        N1.append(1)\n    else:\n        N1.append(0)\n        \n\nprint 'positivo = 1; negativo = 0 : ', N1"}
{"cell_type":"markdown","metadata":{},"source":"## exer 6"}
{"cell_type":"markdown","metadata":{},"source":"### uso de *math - usei no exercicio 1 (recorte abaixo) - funçao de executar operaçoes matematicas\n\nimport math\n \ndelta = (b*b-4*a*c)\n \nif delta < 0:\n    print \"A equação não possui raizes reais\"\nelif delta == 0:\n    raiz = ((-1*b+math.sqrt(delta))/(2*a))\n    print \"A raiz da equação é: \",raiz\n    \n\n### uso de numpy  para processamento de matriz para numeros, strings, registros e objetos\n import numpy as np\n a = np.array([2,3,4])\n a\narray([2, 3, 4])\n a.dtype\ndtype('int64')\n b = np.array([1.2, 3.5, 5.1])\n b.dtype\ndtype('float64')\n\n### uso de matplotlib - plota dados de forma similiar ao que seria mostrado no matlab\n\n##### exemplo: nesse caso ele plotaria uma reta\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.ylabel('some numbers')\nplt.show()\n\n### uso de pandas - criacao de DataFrames  que são estruturas que comportam dados de forma tabelas\n\nimport pandas as pd\n\ndf_data = {'pais': ['Brasil', 'Argentina','Argentina', 'Brasil', 'Chile','Chile'],\n           'ano': [2005, 2006, 2005, 2006, 2007, 2008],\n           'populacao': [170.1, 30.5, 32.2, 172.6, 40.8, 42.0]}\ndf = pd.DataFrame(df_data)\nprint(df)\n\n    ano       pais  populacao\n0  2005     Brasil      170.1\n1  2006  Argentina       30.5\n2  2005  Argentina       32.2\n3  2006     Brasil      172.6\n4  2007      Chile       40.8\n5  2008      Chile       42.0\n\n\n### uso de string - Strings são qualitativamente diferentes dos outros dois tipos porque são feitas de pedaços menores - caracteres.\n\n##### Tipos que consistem de pedaços menores são chamados tipos de dados compostos\n\n###### exemplo  - operador colchete seleciona um único caractere de uma string.:\n\nfruta = \"banana\"\nletra = fruta[1]\nprint letra\n\n"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}