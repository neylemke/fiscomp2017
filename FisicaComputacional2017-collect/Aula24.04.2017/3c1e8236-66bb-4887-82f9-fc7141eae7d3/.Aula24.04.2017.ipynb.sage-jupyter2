{"type":"settings","kernel":"python3","backend_state":"running","trust":true,"metadata":{"celltoolbar":"Slideshow","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}},"kernel_state":"idle"}
{"type":"cell","id":"485351","pos":84,"input":"plt.plot_date(gb['start date'].max(), gb['dblfaults'].mean(), '-', lw=3)\nplt.plot_date(df['start date'], df['dblfaults'], alpha=.25, lw=0)\nplt.ylabel('Proportion of double faults per match.')\nplt.xlabel('Year')\nplt.show()","output":{"0":{"data":{"image/png":"24c4c1f68ec78ff5f3d70391bab9d9e85b900f5b"},"output_type":"execute_result","exec_count":43}},"cell_type":"code","exec_count":43,"scrolled":true}
{"type":"cell","id":"626602","pos":9,"input":"with open('matriznum.csv', 'r') as f:\n    print(f.read())","output":{"0":{"name":"stdout","output_type":"stream","text":"18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283\n"}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"632586","pos":41,"input":"\n\n**2. DataFrames**\n\n- São generalizações de Séries, onde temos uma lista de séries concatenadas. ","cell_type":"markdown"}
{"type":"cell","id":"661087","pos":29,"input":"obj.values","output":{"0":{"data":{"text/plain":"array([ 4,  7, -5,  3])"},"output_type":"execute_result","exec_count":5}},"cell_type":"code","exec_count":5}
{"type":"cell","id":"662664","pos":32,"input":"obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])","cell_type":"code","exec_count":7}
{"type":"cell","id":"775462","pos":4,"input":"- A função ***open()*** retorna um objeto da classe file, que permite fazer a leitura e escrita em arquivos das mais diversas formas. Na sua forma padrão, o arquivo é aberto somente para leitura.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"843336","pos":23,"input":"**1. Introdução a estrutura de dados**\n- Para começar com pandas, você precisará se sentir confortável com suas estruturas de dados: `Series` e `DataFrame`. Embora não sejam uma solução universal para problema, eles fornecem uma base sólida e fácil de usar para a maioria das aplicações.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"961490","pos":63,"input":"** - Quantos são diretórios?**","cell_type":"markdown"}
{"type":"cell","id":"5e4d58","pos":0,"input":"#  Manipulação de Arquivos e dados em Python","cell_type":"markdown","slide":"slide"}
{"type":"cell","id":"f245c1","pos":1,"input":"### Arquivos\n\n- Arquivo é um conjunto de dados.\n- Identificados por um caminho (absoluto/relativo)\n- Ao contrário de valores de variáveis, os arquivos são persistentes\n- Para o sistema operacional um arquivo é  uma sequência de bytes\n- Suportes físicos: discos magnéticos, memórias flash, CD-Rs e etc.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"bf6080","pos":2,"input":"**1.  Métodos sobre arquivos**\n- Inicialmente, como já foi ensinado em aulas anteriores, vamos criar um arquivo de texto que será utilizado nos próximos exemplos.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"96d573","pos":3,"input":"%%writefile texto.txt\nMas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana","output":{"0":{"name":"stdout","output_type":"stream","text":"Overwriting texto.txt\n"}},"cell_type":"code","exec_count":19}
{"type":"cell","id":"7fab55","pos":5,"input":"with open('texto.txt', 'r') as f:\n    print(f.read())","output":{"0":{"name":"stdout","output_type":"stream","text":"Mas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana\n"}},"cell_type":"code","exec_count":3}
{"type":"cell","id":"c54640","pos":6,"input":"- Também é possível manipular arquivos em modo csv. Veja o exemplo abaixo de uma matriz de dados numéricos.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"f22f20","pos":7,"input":"%%writefile matriznum.csv\n18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283","output":{"0":{"name":"stdout","output_type":"stream","text":"Writing matriznum.csv\n"}},"cell_type":"code","exec_count":3}
{"type":"cell","id":"cc8ece","pos":8,"input":"- Ao abrirmos o arquivo de matriznum, encontramos:","cell_type":"markdown","slide":"subslide"}
{"input":"- Podemos definir o modo como esse arquivo pode ser aberto: Em **’r’**  temos somente leitura (arquivo deve já existir). No modo **’w’** escrita (se o arquivo já existir: remove o conteúdo) e **’a’** escrita (se o arquivo já existir: acrescenta ao final).\n- Veja o exemplo a seguir:","slide":"subslide","pos":10,"collapsed":true,"cell_type":"markdown","type":"cell","id":"cce63d"}
{"type":"cell","id":"884e44","pos":11,"input":"**2. Métodos sobre arquivos**\n\n- **f.write(str)**: escrever uma cadeia;\n- **f.read()**: lê todo o conteudo (uma “string”);\n- **f.read(n)**: lê apenas n caracteres;\n- **f.readline()**: lê uma linha de texto;\n- **f.close()**: terminar leitura/escrita no arquivo;","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"9817d4","pos":12,"input":"- A seguir podemos ver um exemplo de escrita e leitura de uma arquivo:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"686dcf","pos":13,"input":"f = open(\"test.dat\", \"w\")\nf.write(\"Ola mundo!\")\nf.write(\"Adeus mundo...\")\nf.close()","cell_type":"code","exec_count":6,"collapsed":true}
{"type":"cell","id":"b9dd4d","pos":14,"input":"f = open(\"test.dat\", \"r\")\ntxt = f.read()\ntxt\nf=open(\"test.dat,\"r\")\ntxt= f.write(\"mais uma linha\")\nf.close()\n       ","output":{"0":{"data":{"text/plain":"'Ola mundo!Adeus mundo...'"},"output_type":"execute_result","exec_count":7}},"cell_type":"code","exec_count":7}
{"type":"cell","id":"a62a09","pos":15,"input":"!pwd\n!whoami\n!ls\nfor line in lines.split()\nprint lines","output":{"0":{"name":"stdout","output_type":"stream","text":"/projects/2286f3ea-bfc1-4139-b609-d97bc208b29c/Aula24.04.2017\n2286f3eabfc14139b609d97bc208b29c\nAula24.04.2017.ipynb  cookbook-data  texto.txt\n"}},"cell_type":"code","exec_count":7}
{"type":"cell","id":"c1d59e","pos":16,"input":"**3. arquivos de texto vs. binários**\n\n- arquivos de texto: contêm apenas caracteres imprimíveis e espaços, tabulação, etc.\n- arquivos binários: imagens JPEG, audio MP3, programas, etc.\n- Por omissão: open assume que o arquivos é de texto\n- Em linux/unix: não há diferença essencial entre os arquivos de texto e binários; ambos podem ser processados – abertos, lidos, escritos. . . – da mesma forma.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"ed371a","pos":17,"input":"**4. Diretórios**\n- Quando você cria um novo arquivo abrindo-o e escrevendo nele, o novo arquivo fica no diretório corrente (seja lá onde for que você esteja quando rodar o programa). Do mesmo modo, quando você abre um arquivo para leitura, Python procura por ele no diretório corrente.\n\n- Se você quiser abrir um arquivo que esteja em algum outro lugar, você tem que especificar o caminho (path) para o arquivo, o qual é o nome do diretório (ou folder) onde o arquivo está localizado:\n\n```python\n f = open(\"Documments/pasta/arquivo\", \"r\")\n   print f.readline()\n```","cell_type":"markdown"}
{"type":"cell","id":"10571c","pos":18,"input":"### Exercícios\n\n1. Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: A minha estação predileta é 'estação', especialmente o 'mês' repetida um número aleatório de vezes, entre 5 e 20. \n2. Comprima essas arquivos usando o comando gzip. ","cell_type":"markdown"}
{"type":"cell","id":"7abe75","pos":19,"input":"from random import randint\nstring=randint(5,25)*\"maldito codigo\\n\"\nprint(\"{}\".format(string))","output":{"0":{"name":"stdout","output_type":"stream","text":"maldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\nmaldito codigo\n\n"}},"cell_type":"code","exec_count":17,"scrolled":true}
{"type":"cell","id":"de21a8","pos":20,"input":"messt=\"janeiro\"\n\"arq\"+ messt","output":{"0":{"data":{"text/plain":"'arqjaneiro'"},"output_type":"execute_result","exec_count":18}},"cell_type":"code","exec_count":18}
{"type":"cell","id":"ebb0e6","pos":21,"input":"## Pandas","cell_type":"markdown"}
{"type":"cell","id":"25eb34","pos":22,"input":"### Manipulação de dados com \"Pandas\"\n\n- Pandas nos permite carregar o dados muito facilmente, explorar as variáveis, e fazer gráficos com matplotlib.\n- Este pacote fornece estruturas de dados e funções ricas projetadas para tornar o trabalho dados estruturados rápidos, fáceis e expressivos. E, como você verá, um dos ingredientes críticos permitindo que o Python seja um ambiente de análise de dados poderoso e produtivo.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"f6e838","pos":24,"input":"** 1.1 `Series`**\n- A Series é um objeto de tipo matriz unidimensional contendo uma matriz de dados (de NumPy tipo de dados) e uma matriz associada de rótulos de dados, chamado seu índice. A série mais simples é formada apenas a partir de uma matriz de dados:","cell_type":"markdown"}
{"type":"cell","id":"625bca","pos":25,"input":"import pandas as pd","cell_type":"code","exec_count":2}
{"type":"cell","id":"7cc4f6","pos":26,"input":"obj = pd.Series([4, 7, -5, 3])","cell_type":"code","exec_count":3}
{"type":"cell","id":"e289a8","pos":27,"input":"obj","output":{"0":{"data":{"text/plain":"0    4\n1    7\n2   -5\n3    3\ndtype: int64"},"output_type":"execute_result","exec_count":4}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"89ef3d","pos":28,"input":"- A representação de sequência de caracteres de uma série exibida interativamente mostra o índice à esquerda e os valores à direita. Como não especificamos um índice para os dados, é criado um padrão consistindo nos inteiros 0 a N-1 (onde N é o comprimento dos dados). Você pode obter a representação de matriz eo objeto de índice da Série por meio de seus valores e atributos de índice, respectivamente:","cell_type":"markdown"}
{"type":"cell","id":"4d6e0c","pos":30,"input":"obj.index","output":{"0":{"data":{"text/plain":"RangeIndex(start=0, stop=4, step=1)"},"output_type":"execute_result","exec_count":6}},"cell_type":"code","exec_count":6}
{"type":"cell","id":"113d2b","pos":31,"input":"- Muitas vezes, será desejável criar uma Série com um índice identificando cada ponto de dados:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"4c8fe8","pos":33,"input":"obj2","output":{"0":{"data":{"text/plain":"d    4\nb    7\na   -5\nc    3\ndtype: int64"},"output_type":"execute_result","exec_count":8}},"cell_type":"code","exec_count":8}
{"type":"cell","id":"3f2e4f","pos":34,"input":"- Existem pelo menos 3 maneiras de acessar os elementos de uma série:","cell_type":"markdown"}
{"type":"cell","id":"6df8ce","pos":35,"input":"obj2['a'] # acessando pela chave usando a notação de dicionários","output":{"0":{"data":{"text/plain":"-5"},"output_type":"execute_result","exec_count":9}},"cell_type":"code","exec_count":9}
{"type":"cell","id":"1af0fb","pos":36,"input":"obj2.a # acessando pela chave usando a notação de objetos de uma classe","output":{"0":{"data":{"text/plain":"-5"},"output_type":"execute_result","exec_count":10}},"cell_type":"code","exec_count":10}
{"type":"cell","id":"8e3b9a","pos":37,"input":"obj.iloc[2] # acessando pela posição","output":{"0":{"data":{"text/plain":"-5"},"output_type":"execute_result","exec_count":11}},"cell_type":"code","exec_count":11}
{"type":"cell","id":"4cea75","pos":38,"input":"### Operações com `Series`","cell_type":"markdown"}
{"type":"cell","id":"1c0760","pos":39,"input":"obj2 * 2","output":{"0":{"data":{"text/plain":"d     8\nb    14\na   -10\nc     6\ndtype: int64"},"output_type":"execute_result","exec_count":12}},"cell_type":"code","exec_count":12}
{"type":"cell","id":"8f6959","pos":40,"input":"obj2[obj2>0] # seleciona os positivos`","output":{"0":{"data":{"text/plain":"d    4\nb    7\nc    3\ndtype: int64"},"output_type":"execute_result","exec_count":16}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"cac368","pos":42,"input":" Estamos basicamente criando o conjunto de dados. Agora vamos usar a biblioteca pandas para exportar este conjunto de dados em um arquivo csv.\n- **df** será um objeto **DataFrame**. Você pode pensar neste objeto mantendo o conteúdo do listaindex  em um formato semelhante a uma tabela sql ou uma planilha do Excel. Vamos dar uma olhada abaixo no conteúdo dentro df .","cell_type":"markdown","collapsed":true}
{"type":"cell","id":"8e341b","pos":43,"input":"import pandas as pd","cell_type":"code","exec_count":8,"collapsed":true}
{"type":"cell","id":"5e6bfd","pos":44,"input":"## Criando DataFrames","cell_type":"markdown"}
{"exec_count":20,"input":"dict=[{'char': chr(i), 'num': i } for i in range(48,122)]","scrolled":true,"pos":45,"collapsed":true,"cell_type":"code","type":"cell","id":"2f6637"}
{"type":"cell","id":"568a62","pos":46,"input":"df=pd.DataFrame(dict)","cell_type":"code","exec_count":21,"collapsed":true}
{"type":"cell","id":"1b1ecd","pos":47,"input":"df[['char','num']]","output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>char</th>\n      <th>num</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>51</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>53</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>55</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>57</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>:</td>\n      <td>58</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>;</td>\n      <td>59</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>&lt;</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>=</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>&gt;</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>?</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>@</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>A</td>\n      <td>65</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>B</td>\n      <td>66</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>C</td>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>D</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>E</td>\n      <td>69</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>F</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>G</td>\n      <td>71</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>H</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>I</td>\n      <td>73</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>J</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>K</td>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>L</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>M</td>\n      <td>77</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>\\</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>]</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>^</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>_</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>`</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>a</td>\n      <td>97</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>b</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>c</td>\n      <td>99</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>d</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>e</td>\n      <td>101</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>f</td>\n      <td>102</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>g</td>\n      <td>103</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>h</td>\n      <td>104</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>i</td>\n      <td>105</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>j</td>\n      <td>106</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>k</td>\n      <td>107</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>l</td>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>m</td>\n      <td>109</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>n</td>\n      <td>110</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>o</td>\n      <td>111</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>p</td>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>q</td>\n      <td>113</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>r</td>\n      <td>114</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>s</td>\n      <td>115</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>t</td>\n      <td>116</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>u</td>\n      <td>117</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>v</td>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>w</td>\n      <td>119</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>x</td>\n      <td>120</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>y</td>\n      <td>121</td>\n    </tr>\n  </tbody>\n</table>\n<p>74 rows × 2 columns</p>\n</div>"},"output_type":"execute_result","exec_count":22}},"cell_type":"code","exec_count":22}
{"type":"cell","id":"b5f23b","pos":48,"input":"Para criar uma nova coluna de dados é fácil.","cell_type":"markdown"}
{"type":"cell","id":"e4a851","pos":49,"input":"df['binario']=df['num'].apply(bin)","cell_type":"code","exec_count":24}
{"type":"cell","id":"73d5db","pos":50,"input":"`apply` nesse caso aplica uma função em cada elemento da série. ","cell_type":"markdown"}
{"type":"cell","id":"2309a0","pos":51,"input":"df","output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>char</th>\n      <th>num</th>\n      <th>binario</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>48</td>\n      <td>0b110000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>49</td>\n      <td>0b110001</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>50</td>\n      <td>0b110010</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>51</td>\n      <td>0b110011</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>52</td>\n      <td>0b110100</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>53</td>\n      <td>0b110101</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>54</td>\n      <td>0b110110</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>55</td>\n      <td>0b110111</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>56</td>\n      <td>0b111000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>57</td>\n      <td>0b111001</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>:</td>\n      <td>58</td>\n      <td>0b111010</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>;</td>\n      <td>59</td>\n      <td>0b111011</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>&lt;</td>\n      <td>60</td>\n      <td>0b111100</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>=</td>\n      <td>61</td>\n      <td>0b111101</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>&gt;</td>\n      <td>62</td>\n      <td>0b111110</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>?</td>\n      <td>63</td>\n      <td>0b111111</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>@</td>\n      <td>64</td>\n      <td>0b1000000</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>A</td>\n      <td>65</td>\n      <td>0b1000001</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>B</td>\n      <td>66</td>\n      <td>0b1000010</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>C</td>\n      <td>67</td>\n      <td>0b1000011</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>D</td>\n      <td>68</td>\n      <td>0b1000100</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>E</td>\n      <td>69</td>\n      <td>0b1000101</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>F</td>\n      <td>70</td>\n      <td>0b1000110</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>G</td>\n      <td>71</td>\n      <td>0b1000111</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>H</td>\n      <td>72</td>\n      <td>0b1001000</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>I</td>\n      <td>73</td>\n      <td>0b1001001</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>J</td>\n      <td>74</td>\n      <td>0b1001010</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>K</td>\n      <td>75</td>\n      <td>0b1001011</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>L</td>\n      <td>76</td>\n      <td>0b1001100</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>M</td>\n      <td>77</td>\n      <td>0b1001101</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>\\</td>\n      <td>92</td>\n      <td>0b1011100</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>]</td>\n      <td>93</td>\n      <td>0b1011101</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>^</td>\n      <td>94</td>\n      <td>0b1011110</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>_</td>\n      <td>95</td>\n      <td>0b1011111</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>`</td>\n      <td>96</td>\n      <td>0b1100000</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>a</td>\n      <td>97</td>\n      <td>0b1100001</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>b</td>\n      <td>98</td>\n      <td>0b1100010</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>c</td>\n      <td>99</td>\n      <td>0b1100011</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>d</td>\n      <td>100</td>\n      <td>0b1100100</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>e</td>\n      <td>101</td>\n      <td>0b1100101</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>f</td>\n      <td>102</td>\n      <td>0b1100110</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>g</td>\n      <td>103</td>\n      <td>0b1100111</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>h</td>\n      <td>104</td>\n      <td>0b1101000</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>i</td>\n      <td>105</td>\n      <td>0b1101001</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>j</td>\n      <td>106</td>\n      <td>0b1101010</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>k</td>\n      <td>107</td>\n      <td>0b1101011</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>l</td>\n      <td>108</td>\n      <td>0b1101100</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>m</td>\n      <td>109</td>\n      <td>0b1101101</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>n</td>\n      <td>110</td>\n      <td>0b1101110</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>o</td>\n      <td>111</td>\n      <td>0b1101111</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>p</td>\n      <td>112</td>\n      <td>0b1110000</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>q</td>\n      <td>113</td>\n      <td>0b1110001</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>r</td>\n      <td>114</td>\n      <td>0b1110010</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>s</td>\n      <td>115</td>\n      <td>0b1110011</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>t</td>\n      <td>116</td>\n      <td>0b1110100</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>u</td>\n      <td>117</td>\n      <td>0b1110101</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>v</td>\n      <td>118</td>\n      <td>0b1110110</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>w</td>\n      <td>119</td>\n      <td>0b1110111</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>x</td>\n      <td>120</td>\n      <td>0b1111000</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>y</td>\n      <td>121</td>\n      <td>0b1111001</td>\n    </tr>\n  </tbody>\n</table>\n<p>74 rows × 3 columns</p>\n</div>"},"output_type":"execute_result","exec_count":25}},"cell_type":"code","exec_count":25}
{"type":"cell","id":"b90659","pos":52,"input":"Para acessar os dados pelo índice.","cell_type":"markdown"}
{"type":"cell","id":"ed9c98","pos":53,"input":"df.ix[2]","output":{"0":{"data":{"text/plain":"char              2\nnum              50\nbinario    0b110010\nName: 2, dtype: object"},"output_type":"execute_result","exec_count":29}},"cell_type":"code","exec_count":29}
{"type":"cell","id":"97ae80","pos":54,"input":"**3. Exportar arquivos em csv com pandas**\n- Exporte o dataframe para um arquivo csv . Podemos nomear o arquivo dicchar.csv . A função to_csv será usada para exportar o arquivo. O arquivo será salvo no mesmo local do notebook, a menos que especificado de outra forma.","cell_type":"markdown"}
{"type":"cell","id":"ffb1d5","pos":55,"input":"df.to_csv ( 'dicchar.csv' , index = False , header = False )","cell_type":"code","exec_count":0,"collapsed":true}
{"type":"cell","id":"d7490a","pos":56,"input":"- Podemos exportar arquivos em em excel ou leitura colocando no **.xls** ou **.txt** no lugar do csv no exemplo a cima.","cell_type":"markdown"}
{"type":"cell","id":"1df137","pos":57,"input":"**4. Obter dados**","cell_type":"markdown"}
{"type":"cell","id":"4336b6","pos":58,"input":"!ls -la > teste.txt","cell_type":"code","exec_count":27,"collapsed":true}
{"type":"cell","id":"132e82","pos":59,"input":"file=open('teste.txt','r')\ndata=[]\nfor line in file:\n    data=data+[line.split()]\ndata=data[1:]","cell_type":"code","exec_count":28}
{"type":"cell","id":"ae9b59","pos":60,"input":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': list[4],\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)","cell_type":"code","exec_count":29,"collapsed":true}
{"type":"cell","id":"d8a8b0","pos":61,"input":"**- Quantos arquivos são escondidos?**","cell_type":"markdown"}
{"type":"cell","id":"54537b","pos":62,"input":"len([filename for filename  in df['filename'] if filename[0]==\".\"])","output":{"0":{"data":{"text/plain":"6"},"output_type":"execute_result","exec_count":30}},"cell_type":"code","exec_count":30}
{"type":"cell","id":"f54ed7","pos":64,"input":"len([perm for perm  in df['perm'] if perm[0]==\"-\"])","output":{"0":{"data":{"text/plain":"5"},"output_type":"execute_result","exec_count":31}},"cell_type":"code","exec_count":31}
{"type":"cell","id":"85eea6","pos":65,"input":"**- Qual é o maior arquivo? Qual é o menor?** ","cell_type":"markdown"}
{"type":"cell","id":"3cfc1a","pos":66,"input":"(df['filesize'].max(),df['filesize'].min())","output":{"0":{"data":{"text/plain":"('7131', '0')"},"output_type":"execute_result","exec_count":32}},"cell_type":"code","exec_count":32}
{"type":"cell","id":"c2b403","pos":67,"input":"Ops ...","cell_type":"markdown"}
{"type":"cell","id":"a9abbb","pos":68,"input":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': int(list[4]),\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\n\nmaxi,mini=(df['filesize'].max(),df['filesize'].min())","cell_type":"code","exec_count":33,"collapsed":true}
{"type":"cell","id":"ade1b9","pos":69,"input":"\"O maior arquivo possui  {} bytes, o menor {} bytes\".format(maxi,mini)","output":{"0":{"data":{"text/plain":"'O maior arquivo possui  181094 bytes, o menor 0 bytes'"},"output_type":"execute_result","exec_count":34}},"cell_type":"code","exec_count":34}
{"type":"cell","id":"5c0704","pos":70,"input":"** - Quantos arquivos  são notebooks? **","cell_type":"markdown"}
{"type":"cell","id":"165fb3","pos":71,"input":"len([filename for filename  in df['filename'] if filename[-6:]==\".ipynb\"])","output":{"0":{"data":{"text/plain":"1"},"output_type":"execute_result","exec_count":35}},"cell_type":"code","exec_count":35}
{"type":"cell","id":"22e5b6","pos":72,"input":"## Exercícios\n\n1. Quando foi criado o primeiro arquivo?\n2. Quantos arquivos podem ser apenas editadados pelo proprietário? ","cell_type":"markdown"}
{"type":"cell","id":"691d2b","pos":73,"input":"## Exercícios (0.25 pts)\n\n1. Com base nos dados de https://pt.wikipedia.org/w/index.php?title=Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon&action=edit construa um dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série\n","cell_type":"markdown"}
{"type":"cell","id":"de85b4","pos":74,"input":"## Exemplo Tenis","cell_type":"markdown"}
{"type":"cell","id":"bd2b57","pos":75,"input":"### Para baixar os programas use o comando (não será necessário no SageMathCloud)","cell_type":"markdown"}
{"type":"cell","id":"5e14ba","pos":76,"input":"%%sh\n\ngit clone https://github.com/ipython-books/cookbook-data.git\ncd cookbook-data\nunzip tennis.zip","cell_type":"code","exec_count":0,"collapsed":true}
{"type":"cell","id":"38b5ab","pos":77,"input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplayer = 'Roger Federer'\nfilename = \"./cookbook-data/data/{name}.csv\".format(name=player.replace(' ', '-')) \ndf = pd.read_csv(filename)","cell_type":"code","exec_count":2}
{"type":"cell","id":"6069bb","pos":78,"input":"df","output":{"0":{"more_output":true}},"cell_type":"code","exec_count":3,"scrolled":true}
{"type":"cell","id":"0e46aa","pos":79,"input":"df['win'] = df['winner'] == player\ndf['win'].tail()","output":{"0":{"data":{"text/plain":"1174    False\n1175     True\n1176     True\n1177     True\n1178    False\nName: win, dtype: bool"},"output_type":"execute_result","exec_count":38}},"cell_type":"code","exec_count":38}
{"type":"cell","id":"d871bd","pos":80,"input":"(\"{player} has won {vic:.0f}% \"\n               \"of his ATP matches.\").format(\n                player=player, vic=100*df['win'].mean())","output":{"0":{"data":{"text/plain":"'Roger Federer has won 82% of his ATP matches.'"},"output_type":"execute_result","exec_count":39}},"cell_type":"code","exec_count":39}
{"type":"cell","id":"60bd15","pos":81,"input":"df['dblfaults'] = (df['player1 double faults'] / \n                   df['player1 total points total'])","cell_type":"code","exec_count":40,"collapsed":true}
{"type":"cell","id":"89949b","pos":82,"input":"df['dblfaults'].tail()","output":{"0":{"data":{"text/plain":"1174    0.018116\n1175    0.000000\n1176    0.000000\n1177    0.011561\n1178         NaN\nName: dblfaults, dtype: float64"},"output_type":"execute_result","exec_count":41}},"cell_type":"code","exec_count":41}
{"type":"cell","id":"fdfd29","pos":83,"input":"gb = df.groupby('year')","cell_type":"code","exec_count":42,"collapsed":true}
{"type":"cell","id":"440edc","pos":85,"input":"**Exercício:**\n\n1. Construa uma tabela com o número de vitórias e derrotas de Federer para cada tipo de terreno. ","cell_type":"markdown"}
{"type":"file","last_load":1494867609581}