{"kernelspec":{"display_name":"Python 3 (Ubuntu Linux)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"},"latex_envs":{"bibliofile":"biblio.bib","cite_by":"apalike","current_citInitial":1,"eqLabelWithNumbers":true,"eqNumInitial":0}}
{"cell_type":"markdown","metadata":{"run_control":{"frozen":false,"read_only":false}},"source":"# Introdução ao Python científico com pandas"}
{"cell_type":"markdown","metadata":{},"source":"## Pandas\n- Pandas nos permite carregar o dados muito facilmente, explorar as variáveis, e fazer parcelas básicas com matplotlib.\n- Este pacote fornece estruturas de dados e funções ricas projetadas para tornar o trabalho dados estruturados rápidos, fáceis e expressivos. E, como você verá, um dos ingredientes críticos permitindo que o Python seja um ambiente de análise de dados poderoso e produtivo."}
{"cell_type":"markdown","metadata":{},"source":"**1. Bibliotecas**\n- Inicialmente iremos importar todas as bibliotecas que serão utilizadas nesta aula."}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"import matplotlib.pyplot as plt\nimport pandas as pd \nimport matplotlib"}
{"cell_type":"markdown","metadata":{"run_control":{"frozen":false,"read_only":false}},"source":"**2. Criar dados**\n- Para que serve o zip..."}
{"cell_type":"code","execution_count":11,"metadata":{"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"L1=[1,2,3]\nL2=[4,5,6]\nlistasoma=[elem[0] + elem[1] for elem in zip(L1,L2) ]"}
{"cell_type":"code","execution_count":12,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[5, 7, 9]"},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":"listasoma"}
{"cell_type":"markdown","metadata":{"run_control":{"frozen":false,"read_only":false}},"source":"- Solução funcional:"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"from operator import *\nfrom functools import reduce"}
{"cell_type":"code","execution_count":9,"metadata":{"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"[5, 7, 9]"},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":"list(map(add,L1,L2))"}
{"cell_type":"markdown","metadata":{"run_control":{"frozen":false,"read_only":false}},"source":"- Solução via numpy"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"import numpy as np"}
{"cell_type":"code","execution_count":11,"metadata":{"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"array([5, 7, 9])"},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":"np.array(L1)+np.array(L2)"}
{"cell_type":"markdown","metadata":{"run_control":{"frozen":false,"read_only":false}},"source":"- Estamos basicamente criando o conjunto de dados. Agora vamos usar a biblioteca pandas para exportar este conjunto de dados em um arquivo csv.\n- **Df** será um objeto **DataFrame**. Você pode pensar neste objeto mantendo o conteúdo do listaindex  em um formato semelhante a uma tabela sql ou uma planilha do Excel. Vamos dar uma olhada abaixo no conteúdo dentro df ."}
{"cell_type":"code","execution_count":18,"metadata":{"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"code","execution_count":19,"metadata":{"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"dict=[{'char': chr(i), 'num': i } for i in range(48,122)]"}
{"cell_type":"code","execution_count":20,"metadata":{"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"df=pd.DataFrame(dict)"}
{"cell_type":"code","execution_count":21,"metadata":{"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::364fac10-12be-4a3e-a0c7-0c51a775d71f","text/plain":"smc-blob::9eab291b-21d3-419a-acd6-ee258db4c481"},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":"df[['char','num']]"}
{"cell_type":"markdown","metadata":{},"source":"**3. Exportar arquivos em csv com pandas**\n- Exporte o dataframe para um arquivo csv . Podemos nomear o arquivo dicchar.csv . A função to_csv será usada para exportar o arquivo. O arquivo será salvo no mesmo local do notebook, a menos que especificado de outra forma."}
{"cell_type":"code","execution_count":23,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::63ff5c59-22e3-4d07-91e7-2adcfa14eef4"},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":"df.to_csv"}
{"cell_type":"code","execution_count":26,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"  df.to_csv ( 'dicchar.csv' , index = False , header = False )"}
{"cell_type":"markdown","metadata":{},"source":"- Podemos exportar arquivos em em excel ou leitura colocando no **.xls** ou **.txt** no lugar do csv no exemplo a cimA."}
{"cell_type":"markdown","metadata":{},"source":"**4. Obter dados**"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"!ls -la > teste.txt\n\nfile=open('teste.txt','r')\ndata=[]\nfor line in file:\n    data=data+[line.split()]\ndata=data[1:]\n\nfiledict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': list[4],\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\n\n**- Quantos arquivos são escondidos?**\n\nlen([filename for filename  in df['filename'] if filename[0]==\".\"])\n\n** - Quantos são diretórios?**\n\nlen([perm for perm  in df['perm'] if perm[0]==\"-\"])\n\n**- Qual é o maior arquivo? Qual é o menor?** \n\n(df['filesize'].max(),df['filesize'].min())\n\nOps ....\n\nfiledict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': int(list[4]),\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\n\nmaxi,mini=(df['filesize'].max(),df['filesize'].min())\n\n\n\"O maior arquivo possui  {} bytes, o menor {} bytes\".format(maxi,mini)\n\n** - Quantos arquivos  são notebooks? **\n\nlen([filename for filename  in df['filename'] if filename[-6:]==\".ipynb\"])\n\n## Exercícios\n- 1. Crie array que armazene quatro notas de cinco alunos, utilizando método de listas. Em seguida, crie um dataframe dessas notas e salve em modo csv utilizando o pandas.\n\n"}