{"celltoolbar":"Slideshow","kernelspec":{"display_name":"Python 3 (Ubuntu Linux)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"slide"}},"source":"#  Manipulação de Arquivos e dados em Python"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"### Arquivos\n\n- Arquivo é um conjunto de dados.\n- Identificados por um caminho (absoluto/relativo)\n- Ao contrário de valores de variáveis, os arquivos são persistentes\n- Para o sistema operacional um arquivo é  uma sequência de bytes\n- Suportes físicos: discos magnéticos, memórias flash, CD-Rs e etc."}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**1.  Métodos sobre arquivos**\n- Inicialmente, como já foi ensinado em aulas anteriores, vamos criar um arquivo de texto que será utilizado nos próximos exemplos."}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Writing texto.txt\n"}],"source":"%%writefile texto.txt\nMas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- A função ***open()*** retorna um objeto da classe file, que permite fazer a leitura e escrita em arquivos das mais diversas formas. Na sua forma padrão, o arquivo é aberto somente para leitura."}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Mas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana\n"}],"source":"with open('texto.txt', 'r') as f:\n    print(f.read())"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Também é possível manipular arquivos em modo csv. Veja o exemplo abaixo de uma matriz de dados numéricos."}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Writing matriznum.csv\n"}],"source":"%%writefile matriznum.csv\n18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Ao abrirmos o arquivo de matriznum, encontramos:"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283\n"}],"source":"with open('matriznum.csv', 'r') as f:\n    print(f.read())"}
{"cell_type":"markdown","metadata":{"collapsed":true,"slideshow":{"slide_type":"subslide"}},"source":"- Podemos definir o modo como esse arquivo pode ser aberto: Em **’r’**  temos somente leitura (arquivo deve já existir). No modo **’w’** escrita (se o arquivo já existir: remove o conteúdo) e **’a’** escrita (se o arquivo já existir: acrescenta ao final).\n- Veja o exemplo a seguir:"}
{"cell_type":"markdown","metadata":{"collapsed":false,"slideshow":{"slide_type":"subslide"}},"source":"**2. Métodos sobre arquivos**\n\n- **f.write(str)**: escrever uma cadeia;\n- **f.read()**: lê todo o conteudo (uma “string”);\n- **f.read(n)**: lê apenas n caracteres;\n- **f.readline()**: lê uma linha de texto;\n- **f.close()**: terminar leitura/escrita no arquivo;"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- A seguir podemos ver um exemplo de escrita e leitura de uma arquivo:"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"f = open(\"test.dat\", \"w\")\nf.write(\"Ola mundo!\")\nf.write(\"Adeus mundo...\")\nf.close()"}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"'Ola mundo!Adeus mundo...'"},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":"f = open(\"test.dat\", \"r\")\ntxt = f.read()\ntxt\n"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**3. arquivos de texto vs. binários**\n\n- arquivos de texto: contêm apenas caracteres imprimíveis e espaços, tabulação, etc.\n- arquivos binários: imagens JPEG, audio MP3, programas, etc.\n- Por omissão: open assume que o arquivos é de texto\n- Em linux/unix: não há diferença essencial entre os arquivos de texto e binários; ambos podem ser processados – abertos, lidos, escritos. . . – da mesma forma."}
{"cell_type":"markdown","metadata":{},"source":"**4. Diretórios**\n- Quando você cria um novo arquivo abrindo-o e escrevendo nele, o novo arquivo fica no diretório corrente (seja lá onde for que você esteja quando rodar o programa). Do mesmo modo, quando você abre um arquivo para leitura, Python procura por ele no diretório corrente.\n\n- Se você quiser abrir um arquivo que esteja em algum outro lugar, você tem que especificar o caminho (path) para o arquivo, o qual é o nome do diretório (ou folder) onde o arquivo está localizado:\n\n```python\n f = open(\"Documments/pasta/arquivo\", \"r\")\n   print f.readline()\n```"}
{"cell_type":"markdown","metadata":{},"source":"### Exercícios\n\n1. Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: A minha estação predileta é 'estação', especialmente o 'mês' repetida um número aleatório de vezes, entre 5 e 20. \n2. Comprima essas arquivos usando o comando gzip. "}
{"cell_type":"markdown","metadata":{},"source":"## Pandas"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"### Manipulação de dados com \"Pandas\"\n\n- Pandas nos permite carregar o dados muito facilmente, explorar as variáveis, e fazer gráficos com matplotlib.\n- Este pacote fornece estruturas de dados e funções ricas projetadas para tornar o trabalho dados estruturados rápidos, fáceis e expressivos. E, como você verá, um dos ingredientes críticos permitindo que o Python seja um ambiente de análise de dados poderoso e produtivo."}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**1. Introdução a estrutura de dados**\n- Para começar com pandas, você precisará se sentir confortável com suas estruturas de dados: `Series` e `DataFrame`. Embora não sejam uma solução universal para problema, eles fornecem uma base sólida e fácil de usar para a maioria das aplicações."}
{"cell_type":"markdown","metadata":{},"source":"** 1.1 `Series`**\n- A Series é um objeto de tipo matriz unidimensional contendo uma matriz de dados (de NumPy tipo de dados) e uma matriz associada de rótulos de dados, chamado seu índice. A série mais simples é formada apenas a partir de uma matriz de dados:"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"obj = pd.Series([4, 7, -5, 3])"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"0    4\n1    7\n2   -5\n3    3\ndtype: int64"},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":"obj"}
{"cell_type":"markdown","metadata":{},"source":"- A representação de sequência de caracteres de uma série exibida interativamente mostra o índice à esquerda e os valores à direita. Como não especificamos um índice para os dados, é criado um padrão consistindo nos inteiros 0 a N-1 (onde N é o comprimento dos dados). Você pode obter a representação de matriz eo objeto de índice da Série por meio de seus valores e atributos de índice, respectivamente:"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"array([ 4,  7, -5,  3])"},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":"obj.values"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"RangeIndex(start=0, stop=4, step=1)"},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":"obj.index"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Muitas vezes, será desejável criar uma Série com um índice identificando cada ponto de dados:"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])"}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"d    4\nb    7\na   -5\nc    3\ndtype: int64"},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":"obj2"}
{"cell_type":"markdown","metadata":{},"source":"- Existem pelo menos 3 maneiras de acessar os elementos de uma série:"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"-5"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"obj2['a'] # acessando pela chave usando a notação de dicionários"}
{"cell_type":"code","execution_count":9,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"-5"},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":"obj2.a # acessando pela chave usando a notação de objetos de uma classe"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"-5"},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":"obj.iloc[2] # acessando pela posição"}
{"cell_type":"markdown","metadata":{},"source":"### Operações com `Series`"}
{"cell_type":"code","execution_count":11,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"d     8\nb    14\na   -10\nc     6\ndtype: int64"},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":"obj2 * 2"}
{"cell_type":"code","execution_count":12,"metadata":{"collapsed":false,"scrolled":true,"trusted":false},"outputs":[{"data":{"text/plain":"d    4\nb    7\nc    3\ndtype: int64"},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":"obj2[obj2>0] # seleciona os positivos`"}
{"cell_type":"markdown","metadata":{},"source":"\n\n**2. DataFrames**\n\n- São generalizações de Séries, onde temos uma lista de séries concatenadas. "}
{"cell_type":"markdown","metadata":{"collapsed":true},"source":" Estamos basicamente criando o conjunto de dados. Agora vamos usar a biblioteca pandas para exportar este conjunto de dados em um arquivo csv.\n- **df** será um objeto **DataFrame**. Você pode pensar neste objeto mantendo o conteúdo do listaindex  em um formato semelhante a uma tabela sql ou uma planilha do Excel. Vamos dar uma olhada abaixo no conteúdo dentro df ."}
{"cell_type":"code","execution_count":13,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"markdown","metadata":{},"source":"## Criando DataFrames"}
{"cell_type":"code","execution_count":14,"metadata":{"collapsed":true,"scrolled":true,"trusted":false},"outputs":[],"source":"dict=[{'char': chr(i), 'num': i } for i in range(48,122)]"}
{"cell_type":"code","execution_count":15,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"df=pd.DataFrame(dict)"}
{"cell_type":"code","execution_count":16,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::364fac10-12be-4a3e-a0c7-0c51a775d71f","text/plain":"smc-blob::9eab291b-21d3-419a-acd6-ee258db4c481"},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"code","execution_count":17,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::364fac10-12be-4a3e-a0c7-0c51a775d71f","text/plain":"smc-blob::9eab291b-21d3-419a-acd6-ee258db4c481"},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":"df[['char','num']]"}
{"cell_type":"markdown","metadata":{},"source":"Para criar uma nova coluna de dados é fácil."}
{"cell_type":"code","execution_count":18,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"df['binario']=df['num'].apply(bin)"}
{"cell_type":"markdown","metadata":{},"source":"`apply` nesse caso aplica uma função em cada elemento da série. "}
{"cell_type":"code","execution_count":19,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::fd82b761-a15a-4ac6-8cd6-97bdab08066d","text/plain":"smc-blob::8862af5d-b241-4089-bd45-70f2d0f9ab74"},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":"df[['num','binario']]"}
{"cell_type":"markdown","metadata":{},"source":"Para acessar os dados pelo índice."}
{"cell_type":"code","execution_count":20,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"char              2\nnum              50\nbinario    0b110010\nName: 2, dtype: object"},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":"df.ix[2]"}
{"cell_type":"markdown","metadata":{},"source":"**3. Exportar arquivos em csv com pandas**\n- Exporte o dataframe para um arquivo csv . Podemos nomear o arquivo dicchar.csv . A função to_csv será usada para exportar o arquivo. O arquivo será salvo no mesmo local do notebook, a menos que especificado de outra forma."}
{"cell_type":"code","execution_count":21,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"df.to_csv ( 'dicchar.csv' , index = False , header = False )"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"0,48,0b110000\r\n1,49,0b110001\r\n2,50,0b110010\r\n3,51,0b110011\r\n4,52,0b110100\r\n5,53,0b110101\r\n6,54,0b110110\r\n7,55,0b110111\r\n8,56,0b111000\r\n9,57,0b111001\r\n:,58,0b111010\r\n;,59,0b111011\r\n<,60,0b111100\r\n=,61,0b111101\r\n>,62,0b111110\r\n?,63,0b111111\r\n@,64,0b1000000\r\nA,65,0b1000001\r\nB,66,0b1000010\r\nC,67,0b1000011\r\nD,68,0b1000100\r\nE,69,0b1000101\r\nF,70,0b1000110\r\n\u001b[7m--More--(29%)\u001b[m"}],"source":"!more dicchar.csv"}
{"cell_type":"markdown","metadata":{},"source":"- Podemos exportar arquivos em em excel ou leitura colocando no **.xls** ou **.txt** no lugar do csv no exemplo a cima."}
{"cell_type":"markdown","metadata":{},"source":"**4. Obter dados**"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"!ls -la > teste.txt"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"!ls "}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"file=open('teste.txt','r')\ndata=[]\nfor line in file:\n    data=data+[line.split()]\ndata=data[1:]"}
{"cell_type":"code","execution_count":9,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"ename":"NameError","evalue":"name 'data' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-88cae4a5bf31>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'data' is not defined"]}],"source":"data[0]"}
{"cell_type":"code","execution_count":29,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': list[4],\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)"}
{"cell_type":"code","execution_count":30,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::be0b1f41-ca8e-4b8f-a593-9a9310297f0c"},"execution_count":30,"metadata":{},"output_type":"execute_result"}],"source":"filedict"}
{"cell_type":"code","execution_count":35,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"0     26\n1     26\n2     23\n3     24\n4     24\n5     24\n6     24\n7     24\n8     24\n9     24\n10    24\n11    24\n12    24\n13    24\n14    24\n15    24\n16    24\n17    24\n18    23\n19    26\n20    26\n21    24\n22    26\n23    26\n24    24\n25    24\n26    23\n27    26\n28    24\nName: day, dtype: object"},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":"df['day']"}
{"cell_type":"code","execution_count":41,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::a430d54d-21f5-4118-92c0-0587c33aafcc"},"execution_count":41,"metadata":{},"output_type":"execute_result"}],"source":"df['filename']"}
{"cell_type":"markdown","metadata":{},"source":"**- Quantos arquivos são escondidos?**"}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"total 508\r\ndrwxr-x---  4 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   4096 Apr 28 14:05 .\r\ndrwx------ 20 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   4096 Apr 28 13:51 ..\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   7131 Apr 23 16:59 .Analisedados.ipynb.sage-jupyter\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     70 Apr 24 17:34 arq_abril_outono.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     72 Apr 24 17:42 arq_agosto_inverno.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     75 Apr 24 17:51 arq_dezembro_verao.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     68 Apr 24 17:27 arq_fevereiro_verao.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     69 Apr 24 17:22 arq_janeiro_verao.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     70 Apr 24 17:40 arq_julho_inverno.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     71 Apr 24 17:38 arq_junho_inverno.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     68 Apr 24 17:36 arq_maio_outono.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     70 Apr 24 17:31 arq_marco_verao.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     77 Apr 24 17:50 arq_novembro_primavera.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     77 Apr 24 17:49 arq_novembro_primevera.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     76 Apr 24 17:47 arq_outubro_primavera.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d     73 Apr 24 17:45 arq_setembro_inverno.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   3198 Apr 24 17:55 arquivo.zip\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d  19129 Apr 24 00:13 .Aula21.04.2017.ipynb.sage-jupyter\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d  17908 Apr 23 17:38 .Aula24.03.2017.ipynb.sage-jupyter\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d 230874 Apr 28 14:05 Aula24.04.2017.ipynb\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d  31529 Apr 28 13:56 .Aula24.04.2017.ipynb.sage-jupyter\r\ndrwxr-x---  4 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   4096 Apr 24 15:33 cookbook-data\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   1116 Apr 26 02:32 dicchar.csv\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d  65227 Apr 28 14:05 Exerciciosaula24.04.2017.ipynb\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d  29401 Apr 28 14:05 .Exerciciosaula24.04.2017.ipynb.sage-jupyter\r\ndrwxr-x---  2 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   4096 Apr 24 16:54 .ipynb_checkpoints\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d  19127 Apr 23 19:48 .python.dados.pandas.ipynb.sage-jupyter\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d   3569 Apr 28 03:28 teste.txt\r\n-rw-r-----  1 5a3e658a958b484a8b50de560fc0984d 5a3e658a958b484a8b50de560fc0984d    219 Apr 24 17:21 texto.txt\r\n"}],"source":"!ls -la"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-1b6102696d58>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfilename\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfilename\u001b[0m  \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'filename'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m\".\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}],"source":"len([filename for filename  in df['filename'] if filename[0]==\".\"])"}
{"cell_type":"markdown","metadata":{},"source":"** - Quantos não são diretórios?**"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-275a8a079466>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'perm'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}],"source":"df['perm']"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-ba0aa3230743>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0mperm\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mperm\u001b[0m  \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'perm'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mperm\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m\"-\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}],"source":"[perm for perm  in df['perm'] if perm[0]==\"-\"]"}
{"cell_type":"markdown","metadata":{},"source":"**- Qual é o maior arquivo? Qual é o menor?** "}
{"cell_type":"code","execution_count":50,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"0       4096\n1       4096\n2       7131\n3         70\n4         72\n5         75\n6         68\n7         69\n8         70\n9         71\n10        68\n11        70\n12        77\n13        77\n14        76\n15        73\n16      3198\n17     19129\n18     17908\n19    206480\n20     22165\n21      4096\n22      1116\n23     25100\n24     20477\n25      4096\n26     19127\n27         0\n28       219\nName: filesize, dtype: object"},"execution_count":50,"metadata":{},"output_type":"execute_result"}],"source":"df['filesize']"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"(228888, 0)"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"(df['filesize'].max(),df['filesize'].min())"}
{"cell_type":"markdown","metadata":{},"source":"Ops ..."}
{"cell_type":"code","execution_count":14,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': int(list[4]),\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\n\nmaior,menor=(df['filesize'].max(),df['filesize'].min())"}
{"cell_type":"code","execution_count":15,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"'O maior arquivo possui  228888 , e o menor arquivo possui 0'"},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":"\"O maior arquivo possui  {} , e o menor arquivo possui {}\".format(maior,menor)"}
{"cell_type":"markdown","metadata":{},"source":"** - Quantos arquivos  são notebooks? **"}
{"cell_type":"code","execution_count":17,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"['Aula24.04.2017.ipynb', 'Exerciciosaula24.04.2017.ipynb']"},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":"[filename for filename  in df['filename'] if filename[-6:]==\".ipynb\"]"}
{"cell_type":"markdown","metadata":{},"source":"## Exercícios\n\n1. Quando foi criado o primeiro arquivo?\n2. Quantos arquivos podem ser apenas editadados pelo proprietário? "}
{"cell_type":"markdown","metadata":{},"source":"## Exercícios (0.25 pts)\n\n1. Com base nos dados de https://pt.wikipedia.org/w/index.php?title=Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon&action=edit construa um dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série\n"}
{"cell_type":"markdown","metadata":{},"source":"## Exemplo Tenis"}
{"cell_type":"markdown","metadata":{},"source":"### Para baixar os programas use o comando (não será necessário no SageMathCloud)"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Archive:  tennis.zip\n"},{"name":"stderr","output_type":"stream","text":"fatal: destination path 'cookbook-data' already exists and is not an empty directory.\nreplace data/Andy-Murray.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename:  NULL\n(EOF or read error, treating as \"[N]one\" ...)\n"}],"source":"%%sh\n\ngit clone https://github.com/ipython-books/cookbook-data.git\ncd cookbook-data\nunzip tennis.zip"}
{"cell_type":"code","execution_count":11,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplayer = 'Roger Federer'\nfilename = \"./cookbook-data/data/{name}.csv\".format(name=player.replace(' ', '-')) \ndf = pd.read_csv(filename)"}
{"cell_type":"code","execution_count":12,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::483e4f06-0139-45d7-bc35-3cd337104429","text/plain":"smc-blob::0b7eca94-eea2-4019-bc34-55f703e1ac5b"},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":"df"}
{"cell_type":"code","execution_count":15,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"1174    False\n1175     True\n1176     True\n1177     True\n1178    False\nName: win, dtype: bool"},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":"df['win'] = df['winner'] == player\ndf['win'].tail()"}
{"cell_type":"code","execution_count":16,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"'Roger Federer has won 82% of his ATP matches.'"},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":"(\"{player} has won {vic:.0f}% \"\n               \"of his ATP matches.\").format(\n                player=player, vic=100*df['win'].mean())"}
{"cell_type":"code","execution_count":17,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"df['dblfaults'] = (df['player1 double faults'] / \n                   df['player1 total points total'])"}
{"cell_type":"code","execution_count":18,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"1174    0.018116\n1175    0.000000\n1176    0.000000\n1177    0.011561\n1178         NaN\nName: dblfaults, dtype: float64"},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":"df['dblfaults'].tail()"}
{"cell_type":"code","execution_count":19,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":"gb = df.groupby('year')"}
{"cell_type":"code","execution_count":43,"metadata":{"collapsed":false,"scrolled":true,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::f93c59ff-ac12-4063-8638-99e673c8e114","text/plain":"<matplotlib.figure.Figure at 0x7f304f4bfd68>"},"metadata":{},"output_type":"display_data"}],"source":"plt.plot_date(gb['start date'].max(), gb['dblfaults'].mean(), '-', lw=3)\nplt.plot_date(df['start date'], df['dblfaults'], alpha=.25, lw=0)\nplt.ylabel('Proportion of double faults per match.')\nplt.xlabel('Year')\nplt.show()"}
{"cell_type":"markdown","metadata":{},"source":"**Exercício:**\n\n1. Construa uma tabela com o número de vitórias e derrotas de Federer para cada tipo de terreno. "}