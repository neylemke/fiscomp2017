{"type":"file","last_load":1496074139166}
{"type":"settings","backend_state":"ready","trust":true,"kernel":"python2","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"output":{"0":{"text":"-2\n9\n8\n10\n","name":"stdout"}},"exec_count":68,"start":1496080036562,"input":"#Exibindo todos os valores na ordem inversa à que foram informados, um abaixo do outro\nnotas= []\ni=0\nwhile i<n:\n    notas=notas+[lista[n-1-i]]\n    i=i+1\nfor i in range(0,n):\n    print notas[i] ","state":"done","pos":7,"cell_type":"code","type":"cell","end":1496080036582,"id":"d3efb9","kernel":"python2"}
{"type":"cell","id":"a053d5","pos":2,"input":"IntervalosMedios=[]\nfor i in range(0,99):\n    IntervalosMedios.append((lista[i]+lista[i+1])/2.)\nIntervalosMedios","output":{"0":{"data":{"text/plain":"[60.5,\n 80.0,\n 42.0,\n 45.5,\n 90.0,\n 85.0,\n 43.0,\n 40.0,\n 46.5,\n 40.0,\n 71.0,\n 51.0,\n 27.5,\n 33.0,\n 43.0,\n 48.0,\n 18.5,\n 19.0,\n 39.0,\n 34.0,\n 47.0,\n 56.0,\n 34.0,\n 37.5,\n 35.5,\n 36.0,\n 62.5,\n 67.0,\n 78.0,\n 51.5,\n 22.0,\n 46.5,\n 78.0,\n 82.0,\n 38.5,\n 29.5,\n 34.0,\n 40.5,\n 58.5,\n 44.0,\n 54.0,\n 77.0,\n 56.0,\n 62.0,\n 77.5,\n 69.0,\n 40.5,\n 4.0,\n 29.5,\n 72.5,\n 50.0,\n 56.5,\n 96.0,\n 95.0,\n 51.5,\n 18.5,\n 58.0,\n 67.5,\n 59.5,\n 46.5,\n 31.5,\n 26.0,\n 41.5,\n 36.5,\n 24.5,\n 34.0,\n 38.0,\n 55.5,\n 39.0,\n 36.0,\n 34.0,\n 40.0,\n 77.5,\n 51.0,\n 29.5,\n 46.0,\n 36.5,\n 54.5,\n 87.0,\n 55.5,\n 49.0,\n 86.5,\n 59.5,\n 54.5,\n 49.5,\n 32.5,\n 67.5,\n 45.0,\n 22.0,\n 58.5,\n 54.0,\n 61.0,\n 66.5,\n 54.0,\n 67.5,\n 37.5,\n 42.0,\n 54.5,\n 17.0]"},"output_type":"execute_result","exec_count":39}},"cell_type":"code","exec_count":39}
{"output":{"0":{"text":"Soma dos valores das notas: 25\n","name":"stdout"}},"exec_count":69,"start":1496080051164,"input":"#Calcule e mostre a soma dos valores\nsoma=sum(lista)\nprint \"Soma dos valores das notas:\", soma","state":"done","pos":8,"cell_type":"code","type":"cell","end":1496080051188,"id":"7d450d","kernel":"python2"}
{"type":"cell","id":"d67d18","pos":3,"input":"#### Exercicio 2\nFaça um programa que leia um número indeterminado de valores, correspondentes a notas, encerrando a entrada de dados quando for informado um valor igual a -1 (que não deve ser armazenado). Após esta entrada de dados, faça:\n- Mostre a quantidade de valores que foram lidos;\n- Exiba todos os valores na ordem em que foram informados, um ao lado do outro;\n- Exiba todos os valores na ordem inversa à que foram informados, um abaixo do outro;\n- Calcule e mostre a soma dos valores;\n- Calcule e mostre a média dos valores;\n- Calcule e mostre a quantidade de valores acima da média calculada;\n- Calcule e mostre a quantidade de valores abaixo de sete;\n- Encerre o programa com uma mensagem;","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"'10 8 9 -2 '"},"exec_count":67}},"exec_count":67,"start":1496080031974,"input":"#Exibindo todos os valores na ordem em que foram informados, um ao lado do outro\nstrlista=\"\"\nfor i in lista:\n    strlista=strlista+str(i)+\" \"\nstrlista ","state":"done","pos":6,"cell_type":"code","type":"cell","end":1496080031995,"id":"640ed9","kernel":"python2"}
{"output":{"0":{"text":"Quantidade de valores lidos, exceto (-1): 4\n","name":"stdout"}},"exec_count":66,"start":1496080026112,"input":"#Mostrando a quantidade de valores que foram lidos\nn=int(len(lista))\nprint \"Quantidade de valores lidos, exceto (-1):\",quantidade ","state":"done","pos":5,"cell_type":"code","type":"cell","end":1496080026183,"id":"7ebcbc","kernel":"python2"}
{"type":"cell","id":"ef2f52","pos":0,"input":"#### Exercicio 1\n- Gere uma lista com 100 números aleatórios, em seguida o aluno deverá encontrar os intervalos médios dos elementos da lista.","cell_type":"markdown"}
{"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"value":"10"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"value":"8"},"2":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"value":"9"},"3":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"value":"-2"},"4":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"value":"-1"},"5":{"text":"Lista com as notas: [10, 8, 9, -2]\n","name":"stdout"}},"exec_count":65,"start":1496080007863,"input":"nota=input(\"Insira uma nota:\")\nlista=[]\nlista.append(nota)\nwhile nota!=(-1):\n    nota=input(\"Insira uma nota:\")\n    if nota!=(-1):    \n        lista.append(nota) \nprint \"Lista com as notas:\",lista","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"output_type":"stream","value":"10"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"output_type":"stream","value":"8"},"2":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"output_type":"stream","value":"-5"},"3":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"output_type":"stream","value":"-4"},"4":{"name":"input","opts":{"password":false,"prompt":"Insira uma nota:"},"output_type":"stream","value":"-1"}}}},"state":"done","pos":4,"cell_type":"code","type":"cell","end":1496080022784,"id":"0d10a4","kernel":"python2"}
{"type":"cell","id":"ce0fdf","pos":1,"input":"import random\n\nlista=random.sample(range(0,100),100)\nlista","output":{"0":{"data":{"text/plain":"[38,\n 83,\n 77,\n 7,\n 84,\n 96,\n 74,\n 12,\n 68,\n 25,\n 55,\n 87,\n 15,\n 40,\n 26,\n 60,\n 36,\n 1,\n 37,\n 41,\n 27,\n 67,\n 45,\n 23,\n 52,\n 19,\n 53,\n 72,\n 62,\n 94,\n 9,\n 35,\n 58,\n 98,\n 66,\n 11,\n 48,\n 20,\n 61,\n 56,\n 32,\n 76,\n 78,\n 34,\n 90,\n 65,\n 73,\n 8,\n 0,\n 59,\n 86,\n 14,\n 99,\n 93,\n 97,\n 6,\n 31,\n 85,\n 50,\n 69,\n 24,\n 39,\n 13,\n 70,\n 3,\n 46,\n 22,\n 54,\n 57,\n 21,\n 51,\n 17,\n 63,\n 92,\n 10,\n 49,\n 43,\n 30,\n 79,\n 95,\n 16,\n 82,\n 91,\n 28,\n 81,\n 18,\n 47,\n 88,\n 2,\n 42,\n 75,\n 33,\n 89,\n 44,\n 64,\n 71,\n 4,\n 80,\n 29,\n 5]"},"output_type":"execute_result","exec_count":37}},"cell_type":"code","exec_count":37}
{"output":{"0":{"text":"Média dos valores: 6.25\n","name":"stdout"}},"exec_count":70,"start":1496080062368,"input":"#Calcule e mostre a média dos valores\nmedia = sum(lista)/float(n)\nprint \"Média dos valores:\", media","state":"done","pos":9,"type":"cell","end":1496080062393,"id":"494d33","kernel":"python2"}
{"output":{"0":{"text":"Valores acima da média: [10, 8, 9]\nQuantidade de valores acima da média: 3\n","name":"stdout"}},"exec_count":71,"start":1496080068063,"input":"#Calcule e mostre a quantidade de valores acima da média calculada\nacima=[]\nfor i in range(n):\n    if lista[i] >media:\n        acima.append(lista[i])\n        i=i+1\nprint \"Valores acima da média:\", acima\nprint \"Quantidade de valores acima da média:\", len(acima)    ","state":"done","pos":10,"type":"cell","end":1496080068085,"id":"73bf0a","kernel":"python2"}
{"output":{"0":{"text":"Valores abaixo de 7: [-2]\nQuantidade de valores abaixo de 7: 1\n","name":"stdout"}},"exec_count":73,"start":1496080216363,"input":"#Calcule e mostre a quantidade de valores abaixo de sete\nabaixosete=[]\nfor i in range(n):\n    if lista[i] <7:\n        abaixosete.append(lista[i])\n        i=i+1\nprint \"Valores abaixo de 7:\", abaixosete\nprint \"Quantidade de valores abaixo de 7:\", len(abaixosete)    ","state":"done","pos":11,"cell_type":"code","type":"cell","end":1496080216390,"id":"f9b32f","kernel":"python2"}
{"type":"cell","id":"87268a","pos":12,"input":"#Encerre o programa com uma mensagem\nprint \"Exercício Finalizado!\"","state":"done","start":1496080343676,"end":1496080344501}
{"type":"cell","id":"1a501f","pos":13,"input":"#### Exercicio 3\n- Calcule as raízes da equação do 2◦ grau ($Ax^2 + Bx + C = 0$) sendo os valores de A, B e C fornecidos pelo usuário, levando em consideração a existência de raízes complexas.**\n#### Exercício está feito na aula de 17/03/2017.","cell_type":"markdown"}
{"exec_count":75,"input":"#### Exercícios 4\n- Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: \"A minha estação predileta é 'estação', especialmente 'mês'\"  repetida um número aleatório de vezes, entre 5 e 20. Comprima essas arquivos usando o comando gzip. Faça isso utilizando o conceito de dicionários.\n#### Exercício está feito na aula de 24/04/2017.","state":"done","pos":14,"cell_type":"markdown","type":"cell","id":"933c91","kernel":"python2"}
{"type":"cell","id":"b0c663","pos":15,"input":"#### Exercícios 5\n1. Com base nos dados de https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon Construa um  dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série\n#### Exercício está feito na aula de 24/04/2017.","cell_type":"markdown"}
{"type":"cell","id":"9988d7","pos":16,"input":"#### Exercício 6\n- Passo 1: Gere um arquivo com 10 notas de cinco alunos (Deve conter o nome do aluno e as notas).\n- Passo 2: Em seguida crie uma array em numpy com essas notas.\n- Passo 3: Crie um DataFrame dessas notas.\n- Passo 4: Identifique qual menor nota e quem foi o aluno que obteve essa nota\n- Passo 5: Identifique o aluno que tirou as melhores notas.","cell_type":"markdown"}
{"output":{"0":{"text":"Overwriting notas.txt\n","name":"stdout"}},"exec_count":5,"start":1496109134065,"input":"%%writefile notas.txt \nAluno,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10\nJoao, 5,6,4,7,8,9,10,8,9,7\nMaria, 4,6,4,10,8,8.5,5.5,7,6,3\nJose, 5,7,2.5,8,10,4.5,9,4.5,8,10\nPedro, 10,8,8,9.5,7,8.5,6.5,9,5,7\nLucia, 1.5,5,6,10,7,8.5,6,7,6.5,7.5","state":"done","pos":17,"type":"cell","end":1496109134152,"id":"370f53","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([[  5. ,   6. ,   4. ,   7. ,   8. ,   9. ,  10. ,   8. ,   9. ,   7. ],\n       [  4. ,   6. ,   4. ,  10. ,   8. ,   8.5,   5.5,   7. ,   6. ,   3. ],\n       [  5. ,   7. ,   2.5,   8. ,  10. ,   4.5,   9. ,   4.5,   8. ,  10. ],\n       [ 10. ,   8. ,   8. ,   9.5,   7. ,   8.5,   6.5,   9. ,   5. ,   7. ],\n       [  1.5,   5. ,   6. ,  10. ,   7. ,   8.5,   6. ,   7. ,   6.5,\n          7.5]])"},"exec_count":85}},"exec_count":85,"start":1496112896236,"input":"#Passo 2\nimport pandas as pd\nAluno=pd.read_csv(\"notas.txt\")\nArray=Aluno[[\"n1\",\"n2\",\"n3\",\"n4\",\"n5\",\"n6\",\"n7\",\"n8\",\"n9\",\"n10\"]].values\nArray","state":"done","pos":18,"type":"cell","end":1496112896263,"id":"c8481d","kernel":"python2"}
{"output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Aluno</th>\n      <th>n1</th>\n      <th>n2</th>\n      <th>n3</th>\n      <th>n4</th>\n      <th>n5</th>\n      <th>n6</th>\n      <th>n7</th>\n      <th>n8</th>\n      <th>n9</th>\n      <th>n10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Joao</td>\n      <td>5.0</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>7.0</td>\n      <td>8</td>\n      <td>9.0</td>\n      <td>10.0</td>\n      <td>8.0</td>\n      <td>9.0</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Maria</td>\n      <td>4.0</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>10.0</td>\n      <td>8</td>\n      <td>8.5</td>\n      <td>5.5</td>\n      <td>7.0</td>\n      <td>6.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jose</td>\n      <td>5.0</td>\n      <td>7</td>\n      <td>2.5</td>\n      <td>8.0</td>\n      <td>10</td>\n      <td>4.5</td>\n      <td>9.0</td>\n      <td>4.5</td>\n      <td>8.0</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Pedro</td>\n      <td>10.0</td>\n      <td>8</td>\n      <td>8.0</td>\n      <td>9.5</td>\n      <td>7</td>\n      <td>8.5</td>\n      <td>6.5</td>\n      <td>9.0</td>\n      <td>5.0</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lucia</td>\n      <td>1.5</td>\n      <td>5</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>7</td>\n      <td>8.5</td>\n      <td>6.0</td>\n      <td>7.0</td>\n      <td>6.5</td>\n      <td>7.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":8}},"exec_count":8,"start":1496109143337,"input":"#Passo 3\ndf=pd.DataFrame(Aluno)\ndf","scrolled":true,"state":"done","pos":19,"type":"cell","end":1496109143390,"id":"be8a22","kernel":"python2"}
{"output":{"0":{"text":"A menor nota é: 1.5\n","name":"stdout"}},"exec_count":84,"start":1496112761437,"input":"#Passo 4\n#[menor1 for menor1  in df.ix[0] if menor1==min(Aluno.values]\nprint \"A menor nota é:\", min(df.min())\n","state":"done","pos":20,"cell_type":"code","type":"cell","end":1496112761470,"id":"2271cb","kernel":"python2"}
{"output":{"0":{"text":"Aluno,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10\nJoao, 5,6,4,7,8,9,10,8,9,7\nMaria, 4,6,4,10,8,8.5,5.5,7,6,3\nJose, 5,7,2.5,8,10,4.5,9,4.5,8,10\nPedro, 10,8,8,9.5,7,8.5,6.5,9,5,7\nLucia, 1.5,5,6,10,7,8.5,6,7,6.5,7.5\n","name":"stdout"}},"exec_count":6,"start":1496109135938,"input":"with open('notas.txt', 'r') as f:\n    print(f.read())","state":"done","pos":17.5,"type":"cell","end":1496109135953,"id":"abfd9c","kernel":"python2"}
{"output":{"0":{"text":"0.6 0.7 0.75 0.5 0.85\nPedro tem melhores notas, com menor desvio padrão: 0.5\n","name":"stdout"}},"exec_count":143,"start":1496115757939,"input":"#Passo 5\nDPJoao=float((max(Array[0])-min(Array[0]))/max(Array[0]))\nDPMaria=float((max(Array[1])-min(Array[1]))/max(Array[1]))\nDPJose=float((max(Array[2])-min(Array[2]))/max(Array[2]))\nDPPedro=float((max(Array[3])-min(Array[3]))/max(Array[3]))\nDPLucia=float((max(Array[4])-min(Array[4]))/max(Array[4]))\nprint DPJoao, DPMaria, DPJose, DPPedro, DPLucia\nif DPJoao<DPMaria and DPJoao<DPJose and DPJoao<DPPedro and DPJoao<DPLucia:\n    print \"Joao tem melhores notas, com menor desvio padrão:\",DPJoao\nelif DPMaria<DPJoao and DPMaria<DPJose and DPMaria<DPPedro and DPMaria<DPLucia :\n    print \"Maria tem melhores notas, com menor desvio padrão:\",DPMaria\nelif DPJose<DPJoao and DPJose<DPMaria and DPJose<DPPedro and DPJose<DPLucia :\n    print \"Jose tem melhores notas, com menor desvio padrão:\",DPJose\nelif DPPedro<DPJoao and DPPedro<DPMaria and DPPedro<DPJose and DPPedro<DPLucia :\n    print \"Pedro tem melhores notas, com menor desvio padrão:\",DPPedro\nelse: \n    print \"Lucia tem melhores notas, com menor desvio padrão:\",DPLucia","state":"done","pos":21,"cell_type":"code","type":"cell","end":1496115757986,"id":"0a44fa","kernel":"python2"}
{"type":"cell","id":"2b52bf","pos":22,"input":""}