{"type":"settings","kernel":"python2","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle","trust":true}
{"type":"cell","id":"a67bba","pos":4,"input":"#Exercício 6\n#Passo 1: Gere um arquivo com 10 notas de cinco alunos (Deve conter o nome do aluno e as notas).\n#Passo 2: Em seguida crie uma array em numpy com essas notas.\n#Passo 3: Crie um DataFrame dessas notas.\n#Passo 4: Identifique qual menor nota e quem foi o aluno que obteve essa nota\n#Passo 5: Identifique o aluno que tirou as melhores notas.\n\nimport random\nimport pandas as pd\nimport numpy as np\nnomes = [\"Lucas\", \"Gustavo\", \"Gabriel\", \"Felipe\", \"Juan\"]\nnotas =[]\nfor i in range(5):\n    a = []\n    for j in range(5):\n        a.append(\"%.1f\" %random.uniform(0,10))\n    notas.append(a)\narqnotas = open(\"Notas.txt\", \"w\")\nfor i in range(5):\n    arqnotas.write(\"As notas do \"+str(nomes[i])+\" são \"+str(notas[i])+\"\\n\")\n    print(\"As notas do \"+str(nomes[i])+\" são \"+str(notas[i]))\narqnotas.close()\nnotasarray = np.array(notas)\nprint(\"As notas em array são: \\n\"+str(notasarray))\ndic = [{'Nome': nomes[i], 'notas': notas[i] } for i in range(5)]\ndf= pd.DataFrame(dic)\ndf\nmenor = min(notasarray[0])\nfor i in range(len(notasarray)):\n    if min(notasarray[i]) < menor:\n        menor = min(notasarray[i])\n\nfor i in range(len(notasarray)):\n    if menor == min(notasarray[i]):\n        idx = i\n\n\nprint(\"A menor nota foi :\"+str(menor)+\" do \"+str(df.loc[idx]))\n","output":{"0":{"name":"stdout","output_type":"stream","text":"As notas do Lucas são ['9.6', '5.5', '9.8', '1.5', '0.3']\nAs notas do Gustavo são ['1.2', '9.9', '9.8', '3.9', '5.6']\nAs notas do Gabriel são ['8.7', '3.2', '5.2', '8.4', '0.5']\nAs notas do Felipe são ['6.2', '8.5', '7.5', '6.9', '2.4']\nAs notas do Juan são ['2.9', '8.0', '5.3', '6.5', '9.0']\nAs notas em array são: \n[['9.6' '5.5' '9.8' '1.5' '0.3']\n ['1.2' '9.9' '9.8' '3.9' '5.6']\n ['8.7' '3.2' '5.2' '8.4' '0.5']\n ['6.2' '8.5' '7.5' '6.9' '2.4']\n ['2.9' '8.0' '5.3' '6.5' '9.0']]\nA menor nota foi :0.3 do Nome                         Lucas\nnotas    [9.6, 5.5, 9.8, 1.5, 0.3]\nName: 0, dtype: object\n"}},"cell_type":"code","exec_count":3}
{"output":{"0":{"ename":"ImportError","evalue":"html5lib not found, please install it","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-2448c1b02e9d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;36m947\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mlispoktab\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_html\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0;34m\"https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlispoktab\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/sage/sage-7.5/local/lib/python2.7/site-packages/pandas/io/html.py\u001b[0m in \u001b[0;36mread_html\u001b[0;34m(io, match, flavor, header, index_col, skiprows, attrs, parse_dates, tupleize_cols, thousands, encoding, decimal, converters, na_values, keep_default_na)\u001b[0m\n\u001b[1;32m    894\u001b[0m                   \u001b[0mthousands\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mthousands\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    895\u001b[0m                   \u001b[0mdecimal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdecimal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconverters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconverters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_values\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_values\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 896\u001b[0;31m                   keep_default_na=keep_default_na)\n\u001b[0m","\u001b[0;32m/projects/sage/sage-7.5/local/lib/python2.7/site-packages/pandas/io/html.py\u001b[0m in \u001b[0;36m_parse\u001b[0;34m(flavor, io, match, attrs, encoding, **kwargs)\u001b[0m\n\u001b[1;32m    721\u001b[0m     \u001b[0mretained\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    722\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mflav\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mflavor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 723\u001b[0;31m         \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_parser_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflav\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    724\u001b[0m         \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompiled_match\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    725\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/sage/sage-7.5/local/lib/python2.7/site-packages/pandas/io/html.py\u001b[0m in \u001b[0;36m_parser_dispatch\u001b[0;34m(flavor)\u001b[0m\n\u001b[1;32m    666\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mflavor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'bs4'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'html5lib'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    667\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_HAS_HTML5LIB\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 668\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mImportError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"html5lib not found, please install it\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    669\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_HAS_BS4\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    670\u001b[0m             raise ImportError(\n","\u001b[0;31mImportError\u001b[0m: html5lib not found, please install it"]}},"exec_count":1,"start":1497304470356,"input":"import pandas as pd\nimport numpy as np\n\ndef preenche(lis):\n    for elem in range(1,len(lis)):\n        if lis[elem]!=lis[elem]: #truque sujo!\n            lis[elem]=lis[elem-1]\n    return lis\n\ndef sint(x):\n    try: \n        return int(x)\n    except:\n        return 947+20+1\n    \nlispoktab=pd.read_html( \"https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon\")\ndf=lispoktab[0]\ndf.ix[2]=np.roll(df.ix[2],2)\ndf.ix[3]=np.roll(df.ix[3],1)\ndf.ix[4]=np.roll(df.ix[4],2)\ndf.ix[5]=np.roll(df.ix[5],2)\ndf.ix[7]=np.roll(df.ix[7],2)\ndf.ix[8]=np.roll(df.ix[8],2)\ndf.ix[9]=np.roll(df.ix[9],2)\ndf.ix[11]=np.roll(df.ix[11],2)\ndf.ix[12]=np.roll(df.ix[12],2)\ndf.ix[13]=np.roll(df.ix[13],2)\ndf.ix[15]=np.roll(df.ix[15],2)\ndf.ix[16]=np.roll(df.ix[16],2)\ndf.ix[18]=np.roll(df.ix[18],2)\ndf.ix[19]=np.roll(df.ix[19],2)\n\n\ndf.columns=df.ix[0] # muda o nome das colunas\ndf=df.drop(0) # elimina a primeira linha\ndf['Série']=preenche(list(df['Série'])) # elimina elementos com Nan\ndf['Geração']=preenche(list(df['Geração']))\ndf['Região']=preenche(list(df['Região']))\ndf['Episódios']=[episodio[0:-7] for episodio in df['Episódios']] # elimina parte final \ndf['Primeiro']=[int(episodio[0:3]) for episodio in df['Episódios']] # separa em duas partes\ndf['Último']=[sint(episodio[4:-1]) for episodio in df['Episódios']]\n\ndf[\"# Episódios\"]=df[\"Último\"]-df[\"Primeiro\"]+1\n","state":"done","pos":6,"cell_type":"code","type":"cell","end":1497304471748,"id":"3c8fe2","kernel":"python2"}
{"type":"file","last_load":1497304328847}
{"type":"cell","id":"f63b6e","pos":3,"input":"#Exercicio 3\n# Calcule as raízes da equação do 2◦ grau () sendo os valores de A, B e C fornecidos pelo usuário, levando em consideração a existência de raízes complexas.**\n\nimport math\n\na = float(input(\"Insira o valor de A:\"))\nb = float(input(\"Insira o valor de B:\"))\nc = float(input(\"Insira o valor de C:\"))\ndelta = math.pow(b,2) - 4*a*c\nprint(\"O delta vale:\"+str(delta))\nif delta > 0:\n    x1 = (-b + math.sqrt(delta))/float(2*a)\n    x2 = (-b - math.sqrt(delta))/float(2*a)\n    print(\"Existem duas raizes reais \"+str(x1)+\" e \"+str(x2))\nelif delta == 0:\n    x = -b/float(2*a)\n    print(\"Existe uma raiz real com multiplicidade 2 :\"+str(x))\n\n\n    \n    ","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de A:"},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de B:"},"output_type":"stream","value":"2"},"2":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de C:"},"output_type":"stream","value":"1"}},"cell_type":"code","exec_count":1,"metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de A:"},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de B:"},"output_type":"stream","value":"2"},"2":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de C:"},"output_type":"stream","value":"1"}}}}}
{"type":"cell","id":"8753b8","pos":2,"input":"# Exercícios 4\n# Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: \"A minha estação predileta é 'estação', especialmente 'mês'\" repetida um número aleatório de vezes, entre 5 e 20. Comprima essas arquivos usando o comando gzip. Faça isso utilizando o conceito de dicionários.\nimport random\nmes = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"]\nestacao = [\"Verao\", \"Inverno\", \"Outono\", \"Primavera\"]\nfor i in range(12):\n    n = random.randint(0,3)\n    arq = open(\"arq_\"+str(mes[i])+\"_\"+str(estacao[n])+\".txt\", \"w\")\n    arq.write( random.randint(5,20)*(\"A minha estacao predileta e\"+str(estacao[n])+\"especialmente em\"+str(mes[i])+\"\\n\") )\n    arq.close()\n    !zip file.zip arq*.txt","output":{"0":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 91%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 94%)\r\nupdating: arq_Junho_Outono.txt (deflated 84%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 92%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\n  adding: arq_Janeiro_Inverno.txt (deflated 79%)\r\n"},"1":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 91%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 94%)\r\nupdating: arq_Junho_Outono.txt (deflated 84%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 92%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\n  adding: arq_Fevereiro_Primavera.txt (deflated 89%)\r\n"},"2":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 91%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 94%)\r\nupdating: arq_Junho_Outono.txt (deflated 84%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 92%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\n  adding: arq_Março_Primavera.txt (deflated 92%)\r\n"},"3":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 91%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 94%)\r\nupdating: arq_Junho_Outono.txt (deflated 84%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 92%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\n  adding: arq_Abril_Verao.txt (deflated 94%)\r\n"},"4":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 91%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 84%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 92%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\n"},"5":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 91%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 93%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 92%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\n"},"6":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 90%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 93%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 92%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\n"},"7":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 90%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 93%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 94%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\n"},"8":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 90%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 93%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 94%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\n  adding: arq_Setembro_Primavera.txt (deflated 84%)\r\n"},"9":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 90%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 93%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 94%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\nupdating: arq_Setembro_Primavera.txt (deflated 84%)\r\n  adding: arq_Outubro_Inverno.txt (deflated 92%)\r\n"},"10":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\n"},"11":{"name":"stdout","output_type":"stream","text":"updating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 90%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 93%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 94%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\nupdating: arq_Setembro_Primavera.txt (deflated 84%)\r\nupdating: arq_Outubro_Inverno.txt (deflated 92%)\r\n  adding: arq_Novembro_Inverno.txt (deflated 94%)\r\n"},"12":{"name":"stdout","output_type":"stream","text":"updating: arq_Abril_Inverno.txt (deflated 86%)\r\nupdating: arq_Agosto_Outono.txt (deflated 94%)\r\nupdating: arq_Dezembro_Primavera.txt (deflated 89%)\r\nupdating: arq_Fevereiro_Verao.txt (deflated 79%)\r\nupdating: arq_Janeiro_Verao.txt (deflated 90%)\r\nupdating: arq_Julho_Outono.txt (deflated 90%)\r\nupdating: arq_Junho_Inverno.txt (deflated 94%)\r\nupdating: arq_Maio_Inverno.txt (deflated 90%)\r\nupdating: arq_Março_Verao.txt (deflated 82%)\r\nupdating: arq_Novembro_Primavera.txt (deflated 93%)\r\nupdating: arq_Outubro_Primavera.txt (deflated 89%)\r\nupdating: arq_Setembro_Outono.txt (deflated 91%)\r\nupdating: arq_Janeiro_Outono.txt (deflated 84%)\r\nupdating: arq_Fevereiro_Outono.txt (deflated 92%)\r\nupdating: arq_Março_Inverno.txt (deflated 93%)\r\nupdating: arq_Maio_Outono.txt (deflated 88%)\r\nupdating: arq_Junho_Outono.txt (deflated 93%)\r\nupdating: arq_Agosto_Inverno.txt (deflated 94%)\r\nupdating: arq_Setembro_Inverno.txt (deflated 90%)\r\nupdating: arq_Janeiro_Inverno.txt (deflated 79%)\r\nupdating: arq_Fevereiro_Primavera.txt (deflated 89%)\r\nupdating: arq_Março_Primavera.txt (deflated 92%)\r\nupdating: arq_Abril_Verao.txt (deflated 94%)\r\nupdating: arq_Setembro_Primavera.txt (deflated 84%)\r\nupdating: arq_Outubro_Inverno.txt (deflated 92%)\r\nupdating: arq_Novembro_Inverno.txt (deflated 94%)\r\n  adding: arq_Dezembro_Inverno.txt (deflated 94%)\r\n"}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"a74c92","pos":1,"input":"# Faça um programa que leia um número indeterminado de valores, correspondentes a notas, encerrando a entrada de dados quando for informado um valor igual a -1 (que não deve ser armazenado). Após esta entrada de dados, faça:\n#Mostre a quantidade de valores que foram lidos;\n# Exiba todos os valores na ordem em que foram informados, um ao lado do outro;\n# Exiba todos os valores na ordem inversa à que foram informados, um abaixo do outro;\n# Calcule e mostre a soma dos valores;\n# Calcule e mostre a média dos valores;\n# Calcule e mostre a quantidade de valores acima da média calculada;\n# Calcule e mostre a quantidade de valores abaixo de sete;\n# Encerre o programa com uma mensagem;\nprint(\"Insira quantos valores quiser, caso seja inserido -1 não será possível inserir novos valores.\")\ncont = 0\nnotas =[]\nwhile cont == 0:\n    a = float(input(\"Insira um numero:\"))\n    if a == -1:\n        cont= 1\n        break\n    else:\n        notas.append(a)\nprint(\"Foram inseridos \"+str(len(notas))+\" valores\")\nprint(\"Vetor notas: \"+str(notas))\nnotasinversa = notas[::-1]\nprint(\"Vetor inverso: \")\nfor i in range(len(notasinversa)):\n    print(notasinversa[i])\nprint(\"A soma dos valores e: \"+str(sum(notas)))\nprint(\"A media dos valores e: \"+str(float(sum(notas))/float(len(notas))))\nmedia = sum(notas)/float(len(notas))\nmaior = []\nmenor = []\nfor i in range(len(notas)):\n    if notas[i] > media:\n        maior.append(notas[i])\n    if notas[i] < 7:\n        menor.append(notas[i])\nprint(\"Os valores acima da media sao:\"+str(maior))\nif len(menor) == 0:\n    print(\"Não há valores menores que 7\")\nelse:\n    menor.sort()\n    print(\"Os valores menores que 7 sao:\"+str(menor))\nprint(\"PASSA NOIS NEY\")","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira um valor:"},"output_type":"stream"},"1":{"name":"stdout","output_type":"stream","text":"Insira um numero: 5"},"2":{"name":"stdout","output_type":"stream","text":"Insira um numero: 2"},"3":{"name":"stdout","output_type":"stream","text":"Insira um numero: 3"},"4":{"name":"stdout","output_type":"stream","text":"Insira um numero: 6"},"5":{"name":"stdout","output_type":"stream","text":"Insira um numero: 7"},"6":{"name":"stdout","output_type":"stream","text":"Insira um numero: -1"},"7":{"name":"stdout","output_type":"stream","text":"Foram inseridos 5 valores\nVetor notas: [5.0, 2.0, 3.0, 6.0, 7.0]\nVetor inverso: \n7.0\n6.0\n3.0\n2.0\n5.0\nA soma dos valores e: 23.0\nA media dos valores e: 4.6\nOs valores acima da media sao:[5.0, 6.0, 7.0]\nOs valores menores que 7 sao:[2.0, 3.0, 5.0, 6.0]\nPASSA NOIS NEY\n"}},"cell_type":"code","exec_count":8,"metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira um valor:"},"output_type":"stream"}}}}}
{"type":"cell","id":"b298f8","pos":0,"input":"##Exercicio 1 Gere uma lista com 100 números aleatórios, em seguida o aluno deverá deverá encontrar os intervalos médios dos elementos da lista.\nimport random\n\nlista = []\nfor i in range(100):\n    lista.append(random.randint(0,9))\nprint(lista)\nfor i in range(len(lista)-1):\n    print(\"O intervalo medio entre o numero \"+str(lista[i])+\" e \"+str(lista[1+i])+\" = \"+str(lista[i+1] - lista[i]))","output":{"0":{"name":"stdout","output_type":"stream","text":"[6, 7, 8, 6, 3, 9, 6, 5, 1, 4, 3, 2, 0, 8, 7, 8, 5, 2, 4, 2, 0, 7, 7, 6, 3, 1, 4, 0, 9, 3, 0, 3, 2, 0, 0, 6, 4, 9, 2, 6, 4, 7, 0, 0, 4, 0, 3, 2, 8, 0, 2, 6, 1, 7, 6, 4, 7, 0, 3, 5, 9, 8, 7, 3, 2, 8, 1, 0, 8, 4, 0, 4, 3, 3, 6, 2, 5, 0, 5, 2, 8, 5, 4, 0, 7, 6, 2, 0, 8, 3, 3, 5, 4, 6, 8, 7, 8, 7, 4, 4]\nO intervalo medio entre o numero 6 e 7 = 1\nO intervalo medio entre o numero 7 e 8 = 1\nO intervalo medio entre o numero 8 e 6 = -2\nO intervalo medio entre o numero 6 e 3 = -3\nO intervalo medio entre o numero 3 e 9 = 6\nO intervalo medio entre o numero 9 e 6 = -3\nO intervalo medio entre o numero 6 e 5 = -1\nO intervalo medio entre o numero 5 e 1 = -4\nO intervalo medio entre o numero 1 e 4 = 3\nO intervalo medio entre o numero 4 e 3 = -1\nO intervalo medio entre o numero 3 e 2 = -1\nO intervalo medio entre o numero 2 e 0 = -2\nO intervalo medio entre o numero 0 e 8 = 8\nO intervalo medio entre o numero 8 e 7 = -1\nO intervalo medio entre o numero 7 e 8 = 1\nO intervalo medio entre o numero 8 e 5 = -3\nO intervalo medio entre o numero 5 e 2 = -3\nO intervalo medio entre o numero 2 e 4 = 2\nO intervalo medio entre o numero 4 e 2 = -2\nO intervalo medio entre o numero 2 e 0 = -2\nO intervalo medio entre o numero 0 e 7 = 7\nO intervalo medio entre o numero 7 e 7 = 0\nO intervalo medio entre o numero 7 e 6 = -1\nO intervalo medio entre o numero 6 e 3 = -3\nO intervalo medio entre o numero 3 e 1 = -2\nO intervalo medio entre o numero 1 e 4 = 3\nO intervalo medio entre o numero 4 e 0 = -4\nO intervalo medio entre o numero 0 e 9 = 9\nO intervalo medio entre o numero 9 e 3 = -6\nO intervalo medio entre o numero 3 e 0 = -3\nO intervalo medio entre o numero 0 e 3 = 3\nO intervalo medio entre o numero 3 e 2 = -1\nO intervalo medio entre o numero 2 e 0 = -2\nO intervalo medio entre o numero 0 e 0 = 0\nO intervalo medio entre o numero 0 e 6 = 6\nO intervalo medio entre o numero 6 e 4 = -2\nO intervalo medio entre o numero 4 e 9 = 5\nO intervalo medio entre o numero 9 e 2 = -7\nO intervalo medio entre o numero 2 e 6 = 4\nO intervalo medio entre o numero 6 e 4 = -2\nO intervalo medio entre o numero 4 e 7 = 3\nO intervalo medio entre o numero 7 e 0 = -7\nO intervalo medio entre o numero 0 e 0 = 0\nO intervalo medio entre o numero 0 e 4 = 4\nO intervalo medio entre o numero 4 e 0 = -4\nO intervalo medio entre o numero 0 e 3 = 3\nO intervalo medio entre o numero 3 e 2 = -1\nO intervalo medio entre o numero 2 e 8 = 6\nO intervalo medio entre o numero 8 e 0 = -8\nO intervalo medio entre o numero 0 e 2 = 2\nO intervalo medio entre o numero 2 e 6 = 4\nO intervalo medio entre o numero 6 e 1 = -5\nO intervalo medio entre o numero 1 e 7 = 6\nO intervalo medio entre o numero 7 e 6 = -1\nO intervalo medio entre o numero 6 e 4 = -2\nO intervalo medio entre o numero 4 e 7 = 3\nO intervalo medio entre o numero 7 e 0 = -7\nO intervalo medio entre o numero 0 e 3 = 3\nO intervalo medio entre o numero 3 e 5 = 2\nO intervalo medio entre o numero 5 e 9 = 4\nO intervalo medio entre o numero 9 e 8 = -1\nO intervalo medio entre o numero 8 e 7 = -1\nO intervalo medio entre o numero 7 e 3 = -4\nO intervalo medio entre o numero 3 e 2 = -1\nO intervalo medio entre o numero 2 e 8 = 6\nO intervalo medio entre o numero 8 e 1 = -7\nO intervalo medio entre o numero 1 e 0 = -1\nO intervalo medio entre o numero 0 e 8 = 8\nO intervalo medio entre o numero 8 e 4 = -4\nO intervalo medio entre o numero 4 e 0 = -4\nO intervalo medio entre o numero 0 e 4 = 4\nO intervalo medio entre o numero 4 e 3 = -1\nO intervalo medio entre o numero 3 e 3 = 0\nO intervalo medio entre o numero 3 e 6 = 3\nO intervalo medio entre o numero 6 e 2 = -4\nO intervalo medio entre o numero 2 e 5 = 3\nO intervalo medio entre o numero 5 e 0 = -5\nO intervalo medio entre o numero 0 e 5 = 5\nO intervalo medio entre o numero 5 e 2 = -3\nO intervalo medio entre o numero 2 e 8 = 6\nO intervalo medio entre o numero 8 e 5 = -3\nO intervalo medio entre o numero 5 e 4 = -1\nO intervalo medio entre o numero 4 e 0 = -4\nO intervalo medio entre o numero 0 e 7 = 7\nO intervalo medio entre o numero 7 e 6 = -1\nO intervalo medio entre o numero 6 e 2 = -4\nO intervalo medio entre o numero 2 e 0 = -2\nO intervalo medio entre o numero 0 e 8 = 8\nO intervalo medio entre o numero 8 e 3 = -5\nO intervalo medio entre o numero 3 e 3 = 0\nO intervalo medio entre o numero 3 e 5 = 2\nO intervalo medio entre o numero 5 e 4 = -1\nO intervalo medio entre o numero 4 e 6 = 2\nO intervalo medio entre o numero 6 e 8 = 2\nO intervalo medio entre o numero 8 e 7 = -1\nO intervalo medio entre o numero 7 e 8 = 1\nO intervalo medio entre o numero 8 e 7 = -1\nO intervalo medio entre o numero 7 e 4 = -3\nO intervalo medio entre o numero 4 e 4 = 0\n"}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"3505c6","pos":5,"input":"#### Exercícios 5\n1. Com base nos dados de https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon Construa um  dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série","cell_type":"markdown"}