{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"file","last_load":1497288720354}
{"type":"cell","id":"7f784d","pos":1,"input":"import numpy as np\n\nv = np.int_(np.random.rand(100,1)*10)\n\nfor i in range(len(v)-1):\n    print(str(i+1)+\": (\"+str(v[i+1])+\" - \"+str(v[i])+\")/2 = \"+str(float((v[i+1]-v[i])/2.0)))\n    \n    \n","output":{"0":{"name":"stdout","output_type":"stream","text":"1: ([1] - [7])/2 = -3.0\n2: ([5] - [1])/2 = 2.0\n3: ([1] - [5])/2 = -2.0\n4: ([5] - [1])/2 = 2.0\n5: ([0] - [5])/2 = -2.5\n6: ([7] - [0])/2 = 3.5\n7: ([5] - [7])/2 = -1.0\n8: ([6] - [5])/2 = 0.5\n9: ([5] - [6])/2 = -0.5\n10: ([3] - [5])/2 = -1.0\n11: ([0] - [3])/2 = -1.5\n12: ([9] - [0])/2 = 4.5\n13: ([4] - [9])/2 = -2.5\n14: ([4] - [4])/2 = 0.0\n15: ([8] - [4])/2 = 2.0\n16: ([7] - [8])/2 = -0.5\n17: ([0] - [7])/2 = -3.5\n18: ([0] - [0])/2 = 0.0\n19: ([7] - [0])/2 = 3.5\n20: ([0] - [7])/2 = -3.5\n21: ([3] - [0])/2 = 1.5\n22: ([6] - [3])/2 = 1.5\n23: ([2] - [6])/2 = -2.0\n24: ([2] - [2])/2 = 0.0\n25: ([7] - [2])/2 = 2.5\n26: ([4] - [7])/2 = -1.5\n27: ([9] - [4])/2 = 2.5\n28: ([5] - [9])/2 = -2.0\n29: ([3] - [5])/2 = -1.0\n30: ([5] - [3])/2 = 1.0\n31: ([6] - [5])/2 = 0.5\n32: ([7] - [6])/2 = 0.5\n33: ([6] - [7])/2 = -0.5\n34: ([4] - [6])/2 = -1.0\n35: ([0] - [4])/2 = -2.0\n36: ([1] - [0])/2 = 0.5\n37: ([8] - [1])/2 = 3.5\n38: ([9] - [8])/2 = 0.5\n39: ([4] - [9])/2 = -2.5\n40: ([6] - [4])/2 = 1.0\n41: ([7] - [6])/2 = 0.5\n42: ([6] - [7])/2 = -0.5\n43: ([6] - [6])/2 = 0.0\n44: ([1] - [6])/2 = -2.5\n45: ([8] - [1])/2 = 3.5\n46: ([0] - [8])/2 = -4.0\n47: ([7] - [0])/2 = 3.5\n48: ([1] - [7])/2 = -3.0\n49: ([9] - [1])/2 = 4.0\n50: ([6] - [9])/2 = -1.5\n51: ([6] - [6])/2 = 0.0\n52: ([0] - [6])/2 = -3.0\n53: ([4] - [0])/2 = 2.0\n54: ([5] - [4])/2 = 0.5\n55: ([0] - [5])/2 = -2.5\n56: ([9] - [0])/2 = 4.5\n57: ([7] - [9])/2 = -1.0\n58: ([6] - [7])/2 = -0.5\n59: ([5] - [6])/2 = -0.5\n60: ([3] - [5])/2 = -1.0\n61: ([8] - [3])/2 = 2.5\n62: ([4] - [8])/2 = -2.0\n63: ([4] - [4])/2 = 0.0\n64: ([6] - [4])/2 = 1.0\n65: ([3] - [6])/2 = -1.5\n66: ([3] - [3])/2 = 0.0\n67: ([8] - [3])/2 = 2.5\n68: ([1] - [8])/2 = -3.5\n69: ([0] - [1])/2 = -0.5\n70: ([6] - [0])/2 = 3.0\n71: ([4] - [6])/2 = -1.0\n72: ([6] - [4])/2 = 1.0\n73: ([4] - [6])/2 = -1.0\n74: ([7] - [4])/2 = 1.5\n75: ([4] - [7])/2 = -1.5\n76: ([5] - [4])/2 = 0.5\n77: ([8] - [5])/2 = 1.5\n78: ([7] - [8])/2 = -0.5\n79: ([3] - [7])/2 = -2.0\n80: ([3] - [3])/2 = 0.0\n81: ([1] - [3])/2 = -1.0\n82: ([2] - [1])/2 = 0.5\n83: ([1] - [2])/2 = -0.5\n84: ([2] - [1])/2 = 0.5\n85: ([4] - [2])/2 = 1.0\n86: ([3] - [4])/2 = -0.5\n87: ([2] - [3])/2 = -0.5\n88: ([8] - [2])/2 = 3.0\n89: ([7] - [8])/2 = -0.5\n90: ([1] - [7])/2 = -3.0\n91: ([1] - [1])/2 = 0.0\n92: ([6] - [1])/2 = 2.5\n93: ([0] - [6])/2 = -3.0\n94: ([2] - [0])/2 = 1.0\n95: ([8] - [2])/2 = 3.0\n96: ([2] - [8])/2 = -3.0\n97: ([7] - [2])/2 = 2.5\n98: ([5] - [7])/2 = -1.0\n99: ([1] - [5])/2 = -2.0\n"}},"cell_type":"code","exec_count":12}
{"type":"cell","id":"4fb895","pos":7,"input":"# Exercício 01. Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: A minha estação predileta é 'estação', especialmente o 'mês' repetida um número aleatório de vezes, entre 5 e 20.\n\n\nm = ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']\ne = ['outono', 'inverno', 'primavera', 'verão']\n\nfrom random import randrange\nfor i in range(1,13):\n    if i > 3 and i <= 6:\n        j = 1\n    elif i >= 6 and i <= 9:\n        j = 2\n    elif i >= 9 and i <= 12:\n        j = 3\n    else:\n        j = 4\n    \n    content = \"A minha estação predileta é \"+str(e[j-1])+\", especialmente o \"+str(m[j-i])+\"mês' repetida um número aleatório de vezes, entre 5 e 20.\\n\"\n    with open('arq_'+str(m[i-1])+'_'+str(e[j-1])+'.txt', 'w') as f:\n        for k in range(1,randrange(6,20)):\n            f.write(content)\n    f.close()\n    \n    !zip file.zip arq*.txt\n    ","output":{"0":{"name":"stdout","output_type":"stream","text":"  adding: arq_janeiro_verão.txt (deflated 94%)\r\n"},"1":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\n  adding: arq_fevereiro_verão.txt (deflated 86%)\r\n"},"2":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\n  adding: arq_março_verão.txt (deflated 94%)\r\n"},"3":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\n  adding: arq_abril_outono.txt (deflated 88%)\r\n"},"4":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\n  adding: arq_maio_outono.txt (deflated 94%)\r\n"},"5":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\nupdating: arq_maio_outono.txt (deflated 94%)\r\n  adding: arq_junho_outono.txt (deflated 91%)\r\n"},"6":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\nupdating: arq_maio_outono.txt (deflated 94%)\r\nupdating: arq_junho_outono.txt (deflated 91%)\r\n  adding: arq_julho_inverno.txt (deflated 94%)\r\n"},"7":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\nupdating: arq_maio_outono.txt (deflated 94%)\r\nupdating: arq_junho_outono.txt (deflated 91%)\r\nupdating: arq_julho_inverno.txt (deflated 94%)\r\n  adding: arq_agosto_inverno.txt (deflated 90%)\r\n"},"8":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\nupdating: arq_maio_outono.txt (deflated 94%)\r\nupdating: arq_junho_outono.txt (deflated 91%)\r\nupdating: arq_julho_inverno.txt (deflated 94%)\r\nupdating: arq_agosto_inverno.txt (deflated 90%)\r\n  adding: arq_setembro_inverno.txt (deflated 81%)\r\n"},"9":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\nupdating: arq_maio_outono.txt (deflated 94%)\r\nupdating: arq_junho_outono.txt (deflated 91%)\r\nupdating: arq_julho_inverno.txt (deflated 94%)\r\nupdating: arq_agosto_inverno.txt (deflated 90%)\r\nupdating: arq_setembro_inverno.txt (deflated 81%)\r\n  adding: arq_outubro_primavera.txt (deflated 92%)\r\n"},"10":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\nupdating: arq_maio_outono.txt (deflated 94%)\r\nupdating: arq_junho_outono.txt (deflated 91%)\r\nupdating: arq_julho_inverno.txt (deflated 94%)\r\nupdating: arq_agosto_inverno.txt (deflated 90%)\r\nupdating: arq_setembro_inverno.txt (deflated 81%)\r\nupdating: arq_outubro_primavera.txt (deflated 92%)\r\n  adding: arq_novembro_primavera.txt (deflated 86%)\r\n"},"11":{"name":"stdout","output_type":"stream","text":"updating: arq_janeiro_verão.txt (deflated 94%)\r\nupdating: arq_fevereiro_verão.txt (deflated 86%)\r\nupdating: arq_março_verão.txt (deflated 94%)\r\nupdating: arq_abril_outono.txt (deflated 88%)\r\nupdating: arq_maio_outono.txt (deflated 94%)\r\nupdating: arq_junho_outono.txt (deflated 91%)\r\nupdating: arq_julho_inverno.txt (deflated 94%)\r\nupdating: arq_agosto_inverno.txt (deflated 90%)\r\nupdating: arq_setembro_inverno.txt (deflated 81%)\r\nupdating: arq_outubro_primavera.txt (deflated 92%)\r\nupdating: arq_novembro_primavera.txt (deflated 86%)\r\n  adding: arq_dezembro_primavera.txt (deflated 84%)\r\n"}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"23359c","pos":0,"input":"#### Exercício 1 - Gere uma lista com 100 números aleatórios, em seguida o aluno deverá deverá encontrar os intervalos médios dos elementos da lista.\n","cell_type":"markdown"}
{"type":"cell","id":"349b5b","pos":8,"input":"#### Exercício 6\n- Passo 1: Gere um arquivo com 10 notas de cinco alunos (Deve conter o nome do aluno e as notas).\n- Passo 2: Em seguida crie uma array em numpy com essas notas.\n- Passo 3: Crie um DataFrame dessas notas.\n- Passo 4: Identifique qual menor nota e quem foi o aluno que obteve essa nota\n- Passo 5: Identifique o aluno que tirou as melhores notas.","cell_type":"markdown"}
{"type":"cell","id":"d68de9","pos":2,"input":"#### Exercício 2 - Faça um programa que leia um número indeterminado de valores, correspondentes a notas, encerrando a entrada de dados quando for informado um valor igual a -1 (que não deve ser armazenado). Após esta entrada de dados, faça:\n\n- Mostre a quantidade de valores que foram lidos;\n- Exiba todos os valores na ordem em que foram informados, um ao lado do outro;\n- Exiba todos os valores na ordem inversa à que foram informados, um abaixo do outro;\n- Calcule e mostre a soma dos valores;\n- Calcule e mostre a média dos valores;\n- Calcule e mostre a quantidade de valores acima da média calculada;\n- Calcule e mostre a quantidade de valores abaixo de sete;\n- Encerre o programa com uma mensagem;\n\n","cell_type":"markdown"}
{"type":"cell","id":"83bb14","pos":4,"input":"#### Exercicio 3\n- Calcule as raízes da equação do 2◦ grau ($Ax^2 + Bx + C = 0$) sendo os valores de A, B e C fornecidos pelo usuário, levando em consideração a existência de raízes complexas.**","cell_type":"markdown"}
{"type":"cell","id":"c1f8dc","pos":3,"input":"i = 1\nv = []\nwhile True:\n    value = float(input(\"Entre com o \"+str(i)+\"o. valor: \"))\n    if value != -1:\n        v.append(value)\n    else:\n        break\n    i = i + 1\n    \ndef media(a):\n    return (sum(a)/len(a))\n\n\ndef acmedia(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] >= media(a):\n            b.append(a[i])\n    return b\n\ndef abmedia(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] < 7:\n            b.append(a[i])\n    return b\n            \nprint(\"Foram lidos \"+str(len(v))+\" valores.\\nValores ordem direta: \"+str(v)+\"\\nValores ordem inversa: \"+str(v[::-1])+\"\\nSoma dos valores: \"+str(sum(v))+\"\\nMédia dos valores: \"+str(media(v))+\"\\nQuantidade de valores acima da media: \"+str(acmedia(v))+\"\\nQuantidade de valores abaixo da média: \"+str(abmedia(v))+\"\\n\\nObrigado por utilizar este programa!\")\n","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Entre com o 1o. valor: "},"output_type":"stream","value":"5"},"1":{"name":"input","opts":{"password":false,"prompt":"Entre com o 2o. valor: "},"output_type":"stream","value":"8"},"2":{"name":"input","opts":{"password":false,"prompt":"Entre com o 3o. valor: "},"output_type":"stream","value":"0"},"3":{"name":"input","opts":{"password":false,"prompt":"Entre com o 4o. valor: "},"output_type":"stream","value":"-4"},"4":{"name":"input","opts":{"password":false,"prompt":"Entre com o 5o. valor: "},"output_type":"stream","value":"-1"},"5":{"name":"stdout","output_type":"stream","text":"Foram lidos 4 valores.\nValores ordem direta: [5.0, 8.0, 0.0, -4.0]\nValores ordem inversa: [-4.0, 0.0, 8.0, 5.0]\nSoma dos valores: 9.0\nMédia dos valores: 2.25\nQuantidade de valores acima da media: [5.0, 8.0]\nQuantidade de valores abaixo da média: [5.0, 0.0, -4.0]\n\nObrigado por utilizar este programa!\n"}},"cell_type":"code","exec_count":13,"metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Entre com o 1o. valor: "},"output_type":"stream","value":"5"},"1":{"name":"input","opts":{"password":false,"prompt":"Entre com o 2o. valor: "},"output_type":"stream","value":"8"},"2":{"name":"input","opts":{"password":false,"prompt":"Entre com o 3o. valor: "},"output_type":"stream","value":"0"},"3":{"name":"input","opts":{"password":false,"prompt":"Entre com o 4o. valor: "},"output_type":"stream","value":"-4"},"4":{"name":"input","opts":{"password":false,"prompt":"Entre com o 5o. valor: "},"output_type":"stream","value":"-1"}}}}}
{"type":"cell","id":"d1b14c","pos":5,"input":"from math import sqrt\nimport cmath\n\nva = input(\"Insira o valor de A: \")\nvb = input(\"Insira o valor de B: \")\nvc = input(\"Insira o valor de C: \")\n\nif type(va) != int or type(vb) != int or type(vc) != int:\n    print(\"Os valores inseridos deverão ser números inteiros.\")\nelse:\n    delta = vb**2-4*va*vc\n    #print(\"Delta = \", delta)\n\n    if delta > 0:\n        r1 = (-vb+sqrt(vb**2-4*va*vc))/2*va\n        r2 = (-vb-sqrt(vb**2-4*va*vc))/2*va\n        print(\"Raiz: \"+str(r1)+\". Raiz: \"+str(r2))\n\n    elif delta == 0:\n        r = -vb/2*va\n        print(\"O valor da raiz é: \", r)\n    else:\n        r1 = (-vb+cmath.sqrt(vb**2-4*va*vc))/2*va\n        r2 = (-vb-cmath.sqrt(vb**2-4*va*vc))/2*va\n        print(\"Raiz: \"+str(r1)+\". Raiz: \"+str(r2))\n        ","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de A: "},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de B: "},"output_type":"stream","value":"4"},"2":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de C: "},"output_type":"stream","value":"5"},"3":{"name":"stdout","output_type":"stream","text":"Raiz: (-2+1j). Raiz: (-2-1j)\n"}},"cell_type":"code","exec_count":15,"metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de A: "},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de B: "},"output_type":"stream","value":"4"},"2":{"name":"input","opts":{"password":false,"prompt":"Insira o valor de C: "},"output_type":"stream","value":"5"}}}}}
{"type":"cell","id":"98553b","pos":6,"input":"#### Exercícios 4\n- Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: \"A minha estação predileta é 'estação', especialmente 'mês'\"  repetida um número aleatório de vezes, entre 5 e 20. Comprima essas arquivos usando o comando gzip. Faça isso utilizando o conceito de dicionários.","cell_type":"markdown"}
{"type":"cell","id":"1f9e1d","pos":11,"input":"import pandas as pd\nimport numpy as np\n\ndef preenche(lis):\n    for elem in range(1,len(lis)):\n        if lis[elem]!=lis[elem]: #truque sujo!\n            lis[elem]=lis[elem-1]\n    return lis\n\ndef sint(x):\n    try: \n        return int(x)\n    except:\n        return 947+20+1\n    \nlispoktab=pd.read_html( \"https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon\")\ndf=lispoktab[0]\ndf.ix[2]=np.roll(df.ix[2],2)\ndf.ix[3]=np.roll(df.ix[3],1)\ndf.ix[4]=np.roll(df.ix[4],2)\ndf.ix[5]=np.roll(df.ix[5],2)\ndf.ix[7]=np.roll(df.ix[7],2)\ndf.ix[8]=np.roll(df.ix[8],2)\ndf.ix[9]=np.roll(df.ix[9],2)\ndf.ix[11]=np.roll(df.ix[11],2)\ndf.ix[12]=np.roll(df.ix[12],2)\ndf.ix[13]=np.roll(df.ix[13],2)\ndf.ix[15]=np.roll(df.ix[15],2)\ndf.ix[16]=np.roll(df.ix[16],2)\ndf.ix[18]=np.roll(df.ix[18],2)\ndf.ix[19]=np.roll(df.ix[19],2)\n\n\ndf.columns=df.ix[0] # muda o nome das colunas\ndf=df.drop(0) # elimina a primeira linha\ndf['Série']=preenche(list(df['Série'])) # elimina elementos com Nan\ndf['Geração']=preenche(list(df['Geração']))\ndf['Região']=preenche(list(df['Região']))\ndf['Episódios']=[episodio[0:-7] for episodio in df['Episódios']] # elimina parte final \ndf['Primeiro']=[int(episodio[0:3]) for episodio in df['Episódios']] # separa em duas partes\ndf['Último']=[sint(episodio[4:-1]) for episodio in df['Episódios']]\n\ndf[\"# Episódios\"]=df[\"Último\"]-df[\"Primeiro\"]+1"}
{"type":"cell","id":"f63de2","pos":10,"input":"#### Exercícios 5\n1. Com base nos dados de https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon Construa um  dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série\n","cell_type":"markdown"}