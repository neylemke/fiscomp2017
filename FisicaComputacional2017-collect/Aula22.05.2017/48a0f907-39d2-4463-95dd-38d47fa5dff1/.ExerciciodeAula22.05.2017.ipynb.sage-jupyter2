{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1495478185135}
{"output":{"0":{"text":"1[2] - [7])/2 = -2.5\n2[5] - [2])/2 = 1.5\n3[3] - [5])/2 = -1.0\n4[5] - [3])/2 = 1.0\n5[9] - [5])/2 = 2.0\n6[7] - [9])/2 = -1.0\n7[7] - [7])/2 = 0.0\n8[9] - [7])/2 = 1.0\n9[7] - [9])/2 = -1.0\n10[7] - [7])/2 = 0.0\n11[4] - [7])/2 = -1.5\n12[9] - [4])/2 = 2.5\n13[0] - [9])/2 = -4.5\n14[8] - [0])/2 = 4.0\n15[0] - [8])/2 = -4.0\n16[0] - [0])/2 = 0.0\n17[4] - [0])/2 = 2.0\n18[1] - [4])/2 = -1.5\n19[2] - [1])/2 = 0.5\n20[6] - [2])/2 = 2.0\n21[0] - [6])/2 = -3.0\n22[9] - [0])/2 = 4.5\n23[4] - [9])/2 = -2.5\n24[7] - [4])/2 = 1.5\n25[4] - [7])/2 = -1.5\n26[4] - [4])/2 = 0.0\n27[1] - [4])/2 = -1.5\n28[3] - [1])/2 = 1.0\n29[3] - [3])/2 = 0.0\n30[5] - [3])/2 = 1.0\n31[1] - [5])/2 = -2.0\n32[5] - [1])/2 = 2.0\n33[3] - [5])/2 = -1.0\n34[2] - [3])/2 = -0.5\n35[9] - [2])/2 = 3.5\n36[5] - [9])/2 = -2.0\n37[3] - [5])/2 = -1.0\n38[0] - [3])/2 = -1.5\n39[7] - [0])/2 = 3.5\n40[9] - [7])/2 = 1.0\n41[5] - [9])/2 = -2.0\n42[5] - [5])/2 = 0.0\n43[2] - [5])/2 = -1.5\n44[2] - [2])/2 = 0.0\n45[9] - [2])/2 = 3.5\n46[0] - [9])/2 = -4.5\n47[7] - [0])/2 = 3.5\n48[5] - [7])/2 = -1.0\n49[8] - [5])/2 = 1.5\n50[0] - [8])/2 = -4.0\n51[4] - [0])/2 = 2.0\n52[1] - [4])/2 = -1.5\n53[4] - [1])/2 = 1.5\n54[3] - [4])/2 = -0.5\n55[9] - [3])/2 = 3.0\n56[5] - [9])/2 = -2.0\n57[2] - [5])/2 = -1.5\n58[0] - [2])/2 = -1.0\n59[5] - [0])/2 = 2.5\n60[9] - [5])/2 = 2.0\n61[7] - [9])/2 = -1.0\n62[7] - [7])/2 = 0.0\n63[7] - [7])/2 = 0.0\n64[8] - [7])/2 = 0.5\n65[4] - [8])/2 = -2.0\n66[5] - [4])/2 = 0.5\n67[7] - [5])/2 = 1.0\n68[2] - [7])/2 = -2.5\n69[5] - [2])/2 = 1.5\n70[6] - [5])/2 = 0.5\n71[4] - [6])/2 = -1.0\n72[4] - [4])/2 = 0.0\n73[2] - [4])/2 = -1.0\n74[8] - [2])/2 = 3.0\n75[6] - [8])/2 = -1.0\n76[5] - [6])/2 = -0.5\n77[6] - [5])/2 = 0.5\n78[0] - [6])/2 = -3.0\n79[7] - [0])/2 = 3.5\n80[2] - [7])/2 = -2.5\n81[3] - [2])/2 = 0.5\n82[2] - [3])/2 = -0.5\n83[2] - [2])/2 = 0.0\n84[4] - [2])/2 = 1.0\n85[0] - [4])/2 = -2.0\n86[9] - [0])/2 = 4.5\n87[4] - [9])/2 = -2.5\n88[1] - [4])/2 = -1.5\n89[7] - [1])/2 = 3.0\n90[8] - [7])/2 = 0.5\n91[9] - [8])/2 = 0.5\n92[1] - [9])/2 = -4.0\n93[2] - [1])/2 = 0.5\n94[6] - [2])/2 = 2.0\n95[9] - [6])/2 = 1.5\n96[1] - [9])/2 = -4.0\n97[9] - [1])/2 = 4.0\n98[2] - [9])/2 = -3.5\n99[9] - [2])/2 = 3.5\n","name":"stdout"}},"exec_count":1,"start":1495478257784,"input":"#Exercicio1\n##Gere uma lista com 100 números aleatórios, em seguida o aluno deverá deverá encontrar os intervalos médios dos elementos da lista.\n\nimport numpy as np\n\nv = np.int_(np.random.rand(100,1)*10)\n\nfor i in range(len(v)-1):\n    print(str(i+1)+\"\"+str(v[i+1])+\" - \"+str(v[i])+\")/2 = \"+str(float((v[i+1]-v[i])/2.0)))","state":"done","pos":0,"type":"cell","end":1495478257842,"id":"7ff369","kernel":"python2"}
{"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Digite valor para 'a'= "},"value":"3"},"1":{"name":"input","opts":{"password":false,"prompt":"Digite valor para 'b'= "},"value":"4"},"2":{"name":"input","opts":{"password":false,"prompt":"Digite valor para 'c'= "},"value":"5"},"3":{"text":"-44\nNão possui solução real\n","name":"stdout"}},"exec_count":7,"start":1495478590290,"input":"#Exericio3\n##Calcule as raízes da equação do 2◦ grau (Ax^2 + Bx + C = 0) sendo os valores de A, B e C fornecidos pelo usuário, levando em consideração a existência de raízes complexas\n\na=int(input(\"Digite valor para 'a'= \"))\nb=int(input(\"Digite valor para 'b'= \"))\nc=int(input(\"Digite valor para 'c'= \"))\n\ndelta=((pow(b,2))-4*a*c)\nprint(delta)\n\nif delta<0:\n    print (\"Não possui solução real\")\n    import sys\n    \nelif delta ==0:\n    print (\"Delta nulo. Equação apresenta apenas uma solução real.\")\n    print (-b,a)\n    print (-b,a,(-b)/2*a)\n    \nelse:\n    import math\n    print(a,b,c)\n    float(delta)\n    delta_quadrado=math.sqrt(delta)\n    raiz_pos=(-b+raiz_quadrada)\n    raiz_neg=(-b-raiz_quadrada)\n    baixo_bsk=(2*a)\n    resultado_raiz_pos=(raiz_pos, raiz_neg)\n    resultado_raiz_neg=(raiz_pos, baixo_bsk)\n    print(b,raiz_pos,raiz_neg)\n    print(b,raiz_pos,raiz_neg)\n    print(\"Duas casas após a virgula.\")\n","state":"done","pos":1,"type":"cell","end":1495478599183,"id":"62cb22","kernel":"python2"}
{"type":"cell","id":"26fba4","pos":2,"input":"","cell_type":"markdown"}
{"type":"cell","id":"6601df","pos":3,"input":""}