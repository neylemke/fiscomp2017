{"type":"cell","id":"e5935d","pos":7,"input":"Y","output":{"0":{"data":{"text/plain":"array([5, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1])"},"output_type":"execute_result","exec_count":17}},"cell_type":"code","exec_count":17}
{"type":"cell","id":"818bf5","pos":6,"input":"X","output":{"0":{"data":{"text/plain":"array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75])"},"output_type":"execute_result","exec_count":16}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"48977a","pos":13,"input":"exercicio do grafico de dispersao do matplotlib","cell_type":"markdown"}
{"type":"cell","id":"d3e05e","pos":10,"input":"ifg","output":{"0":{"ename":"NameError","evalue":"name 'ifg' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-cbe47751f9aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mifg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'ifg' is not defined"]}},"cell_type":"code","exec_count":20}
{"type":"cell","id":"c4499f","pos":27,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"a63ba8","pos":9,"input":"logx=np.log(X)\nlogy=np.log(Y)\nfig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \nx = fig.gca() # define eixo               \nplt.plot(logx,logy)\nax.set_title('Poema') # Título Principal\nax.set_xlabel('rank') # Eixo x\nax.set_ylabel('Freq')# Eixo y","output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f7cd2ef1be0>"},"output_type":"execute_result","exec_count":19},"1":{"data":{"image/png":"4fea8c689aa185e8144f37d2555cd91a2e3207ff"},"output_type":"execute_result","exec_count":19}},"cell_type":"code","exec_count":19}
{"type":"cell","id":"cd1bf9","pos":19,"input":"c=pd.DataFrame(matriz)","cell_type":"code","exec_count":24}
{"type":"cell","id":"f2626d","pos":24,"input":"c.ix[2]","output":{"0":{"data":{"text/plain":"Nomes     Sophia\nNota 1         4\nNota 2         5\nNota 3         7\nName: 2, dtype: object"},"output_type":"execute_result","exec_count":31}},"cell_type":"code","exec_count":31}
{"type":"file","last_load":1497269621838}
{"type":"cell","id":"574b92","pos":22,"input":"c","output":{"0":{"data":{"text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nomes</th>\n      <th>Nota 1</th>\n      <th>Nota 2</th>\n      <th>Nota 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Ana</td>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bia</td>\n      <td>7</td>\n      <td>8</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sophia</td>\n      <td>4</td>\n      <td>5</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"output_type":"execute_result","exec_count":28}},"cell_type":"code","exec_count":28}
{"type":"settings","kernel":"python3","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.3"}},"kernel_state":"idle","trust":true}
{"output":{"0":{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-84bc62d73c79>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# define plot area\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# define axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mauto_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'scatter'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'price'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'engine-size'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Tamanho do motot por preço'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Give the plot a main title\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Preço'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Set text for the x axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'auto_prices' is not defined"],"evalue":"name 'auto_prices' is not defined","ename":"NameError"},"1":{"data":{"image/png":"2dc1a81cd0aaadc0dfcf31923ff0497f64517fcd"}}},"exec_count":4,"start":1497271495275,"input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8)) # define plot area\nax = fig.gca() # define axis                   \nauto_prices.plot(kind = 'scatter', x = 'price', y = 'engine-size', ax = ax)\nax.set_title('Tamanho do motot por preço') # Give the plot a main title\nax.set_xlabel('Preço') # Set text for the x axis\nax.set_ylabel('Tamanho do motor')# Set text for y axis","state":"done","pos":16,"cell_type":"code","type":"cell","end":1497271495645,"id":"40b86e","kernel":"python3"}
{"type":"cell","id":"75e6ec","pos":5,"input":"teste=list(dict.values())\nteste.sort()\nteste.reverse()\nX=np.array(range(len(teste)))+1\nY=np.array(teste)","cell_type":"code","exec_count":8}
{"type":"cell","id":"492a7f","pos":17,"input":"## Exercício 6 da revisão","cell_type":"markdown"}
{"type":"cell","id":"7cb09f","pos":11,"input":"fig","output":{"0":{"data":{"image/png":"4fea8c689aa185e8144f37d2555cd91a2e3207ff"},"output_type":"execute_result","exec_count":21}},"cell_type":"code","exec_count":21}
{"type":"cell","id":"05d93b","pos":4,"input":"dict","output":{"0":{"data":{"text/plain":"{'(': 1,\n 'A': 5,\n 'BAIXO': 1,\n 'BRANCOS': 1,\n 'CABELOS': 1,\n 'CARROÇA': 1,\n 'CERTA,': 2,\n 'COISAS': 1,\n 'COM': 3,\n 'CONDUZIR': 1,\n 'CONSTANTEMENTE': 1,\n 'CRUZADA': 1,\n 'DAIS': 1,\n 'DAS': 2,\n 'DE': 4,\n 'DESCONHECIDAMENTE': 1,\n 'DESTINO': 1,\n 'DO': 4,\n 'DOS': 2,\n 'E': 3,\n 'EM': 1,\n 'ESTRADA': 1,\n 'GENTE,': 1,\n 'HOMENS,': 1,\n 'IMPOSSIVELMENTE': 1,\n 'INACESSÍVEL': 1,\n 'ISSO,': 1,\n 'JANELAS': 1,\n 'MEU': 2,\n 'MILHÕES': 1,\n 'MIM': 1,\n 'MISTÉRIO': 2,\n 'MORTE': 1,\n 'MUNDO.': 2,\n 'NADA.': 4,\n 'NAS': 1,\n 'NINGUÉM': 1,\n 'NOS': 1,\n 'NUNCA': 1,\n 'NÃO': 2,\n 'O': 4,\n 'OS': 2,\n 'PARA': 2,\n 'PAREDES': 1,\n 'PARTE': 1,\n 'PEDRAS': 1,\n 'PELA': 1,\n 'PENSAMENTOS,': 1,\n 'POR': 3,\n 'POSSO': 1,\n 'QUARTO': 1,\n 'QUARTO,': 1,\n 'QUE': 2,\n 'QUEM': 2,\n 'QUERER': 1,\n 'REAL,': 2,\n 'RUA': 2,\n 'SABE': 1,\n 'SABERIAM?),': 1,\n 'SE': 1,\n 'SER': 1,\n 'SEREI': 1,\n 'SERES,': 1,\n 'SONHOS': 1,\n 'SOU': 1,\n 'SOUBESSEM': 1,\n 'TENHO': 1,\n 'TODOS': 2,\n 'TUDO': 1,\n 'UM': 1,\n 'UMA': 2,\n 'UMIDADE': 1,\n 'À': 1,\n 'É': 1,\n 'É,': 1}"},"output_type":"execute_result","exec_count":6}},"cell_type":"code","exec_count":6}
{"type":"cell","id":"5966aa","pos":20,"input":"c","output":{"0":{"data":{"text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Ana</td>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bia</td>\n      <td>7</td>\n      <td>8</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sophia</td>\n      <td>4</td>\n      <td>5</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"output_type":"execute_result","exec_count":25}},"cell_type":"code","exec_count":25}
{"type":"cell","id":"788813","pos":23,"input":"c.min()","output":{"0":{"data":{"text/plain":"Nomes     Ana\nNota 1      4\nNota 2      5\nNota 3     10\ndtype: object"},"output_type":"execute_result","exec_count":29}},"cell_type":"code","exec_count":29}
{"type":"cell","id":"e320cb","pos":2,"input":"texto=file.readlines()","cell_type":"code","exec_count":4}
{"output":{"0":{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-ad563e170312>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mauto_prices\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mauto_prices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_auto_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-2-ad563e170312>\u001b[0m in \u001b[0;36mread_auto_data\u001b[0;34m(fileName)\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;31m## Read the .csv file with the pandas read_csv method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mauto_prices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileName\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;31m## Remove rows with missing values, accounting for mising values coded as '?'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, skip_footer, doublequote, delim_whitespace, as_recarray, compact_ints, use_unsigned, low_memory, buffer_lines, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    644\u001b[0m                     skip_blank_lines=skip_blank_lines)\n\u001b[1;32m    645\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 646\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    647\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    648\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    387\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnrows\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mchunksize\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m    921\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    922\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 923\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    924\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    925\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'python'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.4/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1388\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'allow_leading_cols'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex_col\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1390\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_parser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1391\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m         \u001b[0;31m# XXX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/parser.pyx\u001b[0m in \u001b[0;36mpandas.parser.TextReader.__cinit__ (pandas/parser.c:4184)\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/parser.pyx\u001b[0m in \u001b[0;36mpandas.parser.TextReader._setup_parser_source (pandas/parser.c:8449)\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: File b'Automobile price data.csv' does not exist"],"evalue":"File b'Automobile price data.csv' does not exist","ename":"FileNotFoundError"}},"exec_count":2,"start":1497271493738,"input":"def read_auto_data(fileName = \"Automobile price data.csv\"): \n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()","state":"done","pos":14,"cell_type":"code","type":"cell","end":1497271494238,"id":"c4199d","kernel":"python3"}
{"type":"cell","id":"8786a2","pos":21,"input":"c.rename(columns={0: 'Nomes', 1: 'Nota 1',2: 'Nota 2',3: 'Nota 3'}, inplace=True)","cell_type":"code","exec_count":27}
{"type":"cell","id":"58ece8","pos":1,"input":"file=open(\"poema.txt\",\"r\")","cell_type":"code","exec_count":3}
{"type":"cell","id":"6ed7d2","pos":3,"input":"dict={}\nfor line in texto:\n    for word in line.split():\n        word2=word.upper()\n        word=word2.strip(\".,;!?\")\n        if word2 in dict:\n            dict[word2]=dict[word2]+1\n        else:\n            dict[word2]=1","cell_type":"code","exec_count":5}
{"type":"cell","id":"23e4f4","pos":25,"input":"aqui=np.array(matriz[:,1:4],int).min()\naqui","output":{"0":{"data":{"text/plain":"4"},"output_type":"execute_result","exec_count":38}},"cell_type":"code","exec_count":38}
{"output":{"0":{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-f68b9e1cbbe8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mauto_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'auto_prices' is not defined"],"evalue":"name 'auto_prices' is not defined","ename":"NameError"}},"exec_count":5,"start":1497271537929,"input":"auto_prices.head()","state":"done","pos":15,"cell_type":"code","type":"cell","end":1497271537938,"id":"2173f7","kernel":"python3"}
{"type":"cell","id":"38bc50","pos":18,"input":"notes= [['Ana',8,9,10],['Bia',7,8,10],['Sophia',4,5,7]]\nmatriz = np.array(notes)\nmatriz","output":{"0":{"data":{"text/plain":"array([['Ana', '8', '9', '10'],\n       ['Bia', '7', '8', '10'],\n       ['Sophia', '4', '5', '7']], \n      dtype='<U6')"},"output_type":"execute_result","exec_count":23}},"cell_type":"code","exec_count":23}
{"type":"cell","id":"72a102","pos":26,"input":"aqui=np.array(matriz[:,1:4],int).min()\nindex=0\nfor k in range(0,len(matriz)):\n    for j in range(0,len(matriz)):\n        try:\n            teste=float(matriz[k,j])\n            if teste == aqui:\n                index=k;\n        except:\n            do=0;\n            \nmatriz[index,0]\n        \n#aqui\n\n","output":{"0":{"data":{"text/plain":"'Sophia'"},"output_type":"execute_result","exec_count":37}},"cell_type":"code","exec_count":37}
{"type":"cell","id":"498fa6","pos":0,"input":"import numpy as np\nimport matplotlib.pyplot as plt\n\nimport pandas as pd","cell_type":"code","exec_count":1}
{"type":"cell","id":"920e67","pos":12,"input":"ax","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f7cd3702d30>"},"output_type":"execute_result","exec_count":22}},"cell_type":"code","exec_count":22}
{"type":"cell","id":"1d03cb","pos":8,"input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \nx = fig.gca() # define eixo               \nplt.plot(X,Y)\nax.set_title('Poema qualquer') # Título Principal\nax.set_xlabel('rank') # Eixo x\nax.set_ylabel('Freq')# Eixo y","output":{"0":{"data":{"text/plain":"<matplotlib.text.Text at 0x7f7cd37af0f0>"},"output_type":"execute_result","exec_count":18},"1":{"data":{"image/png":"053e9d08781a4db22efd800c31fb529766ef4e07"},"output_type":"execute_result","exec_count":18}},"cell_type":"code","exec_count":18}