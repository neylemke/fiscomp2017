{"type":"settings","kernel":"python2","backend_state":"ready","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1495473005363}
{"type":"cell","id":"4c84e2","pos":0,"input":"#### Exercicio 1\n\n- Gere uma lista com 100 números aleatórios, em seguida o aluno deverá deverá encontrar os intervalos médios dos elementos da lista.","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"[1,\n 69,\n 24,\n 92,\n 20,\n 25,\n 83,\n 31,\n 62,\n 50,\n 71,\n 65,\n 79,\n 11,\n 96,\n 35,\n 58,\n 33,\n 63,\n 9,\n 86,\n 30,\n 91,\n 39,\n 52,\n 22,\n 6,\n 94,\n 55,\n 34,\n 36,\n 4,\n 43,\n 53,\n 77,\n 78,\n 75,\n 29,\n 54,\n 82,\n 2,\n 48,\n 57,\n 15,\n 90,\n 68,\n 73,\n 19,\n 26,\n 41,\n 89,\n 70,\n 3,\n 13,\n 66,\n 14,\n 28,\n 21,\n 64,\n 0,\n 47,\n 59,\n 12,\n 16,\n 46,\n 56,\n 93,\n 44,\n 87,\n 5,\n 27,\n 97,\n 38,\n 76,\n 37,\n 80,\n 84,\n 23,\n 95,\n 99,\n 18,\n 85,\n 32,\n 51,\n 45,\n 67,\n 74,\n 17,\n 40,\n 72,\n 88,\n 81,\n 10,\n 61,\n 98,\n 8,\n 60,\n 49,\n 7,\n 42]"},"exec_count":38}},"exec_count":38,"start":1495474878080,"input":"import random \nlista= random.sample(range(0, 100), 100)\nlista\n","state":"done","pos":1,"type":"cell","end":1495474878096,"id":"df1e00","kernel":"python2"}
{"exec_count":11,"input":"#### Exercicio 3\n- Calcule as raízes da equação do 2◦ grau ($Ax^2 + Bx + C = 0$) sendo os valores de A, B e C fornecidos pelo usuário, levando em consideração a existência de raízes complexas.**","state":"done","pos":16,"cell_type":"markdown","type":"cell","id":"8ee07c","kernel":"python2"}
{"type":"cell","id":"4353d6","pos":3,"input":"#### Exercicio 2\nFaça um programa que leia um número indeterminado de valores, correspondentes a notas, encerrando a entrada de dados quando for informado um valor igual a -1 (que não deve ser armazenado). Após esta entrada de dados, faça:\n- Mostre a quantidade de valores que foram lidos; (ok)\n- Exiba todos os valores na ordem em que foram informados, um ao lado do outro; (ok)\n- Exiba todos os valores na ordem inversa à que foram informados, um abaixo do outro; (não feito)\n- Calcule e mostre a soma dos valores; (ok)\n- Calcule e mostre a média dos valores; (ok)\n- Calcule e mostre a quantidade de valores acima da média calculada; (ok)\n- Calcule e mostre a quantidade de valores abaixo de sete; (ok)\n- Encerre o programa com uma mensagem; (ok)","cell_type":"markdown"}
{"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira A: "},"value":"2"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira B: "},"value":"2."},"2":{"name":"input","opts":{"password":false,"prompt":"Insira C: "},"value":"2.0"}},"exec_count":89,"start":1495886488440,"input":"A= float(input(\"Insira A: \"))\nB= float(input(\"Insira B: \") )\nC= float(input(\"Insira C: \"))\n","state":"done","pos":17,"type":"cell","end":1495886492939,"id":"560d53","kernel":"python2"}
{"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Insira as notas dos alunos"},"value":"5.5"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira as notas dos alunos"},"value":"9"},"2":{"name":"input","opts":{"password":false,"prompt":"Insira as notas dos alunos"},"value":"3.6"},"3":{"name":"input","opts":{"password":false,"prompt":"Insira as notas dos alunos"},"value":"8.7"},"4":{"name":"input","opts":{"password":false,"prompt":"Insira as notas dos alunos"},"value":"0.5"},"5":{"name":"input","opts":{"password":false,"prompt":"Insira as notas dos alunos"},"value":"-1"}},"exec_count":2,"start":1497285072493,"input":"    nota= input('Insira as notas dos alunos')\nn=[]\nn.append(nota)\nwhile nota !=(-1):\n    nota= input('Insira as notas dos alunos')\n    n.append(nota)\n    if nota == -1:\n        n.remove(nota)\n        break;","state":"done","pos":4,"type":"cell","end":1497285084995,"id":"b9de7e","kernel":"python2"}
{"start":1495476721434,"input":"imedio=[]\n\nfor i in range(0,99):\n    imedio.append((lista[i]+lista[i+1])/2.)\n\nprint imedio","state":"done","pos":2,"type":"cell","end":1495476721434,"id":"bcd70c","kernel":"python2"}
{"output":{"0":{"name":"input","opts":{"password":false,"prompt":"insira o nome do aluno"},"value":"Vanessa"},"1":{"name":"input","opts":{"password":false,"prompt":"insira o nome do aluno"},"value":"Felipe"},"2":{"name":"input","opts":{"password":false,"prompt":"insira o nome do aluno"},"value":"Elian"},"3":{"name":"input","opts":{"password":false,"prompt":"insira o nome do aluno"},"value":"Ana"},"4":{"name":"input","opts":{"password":false,"prompt":"insira o nome do aluno"},"value":"Joao"},"5":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"10"},"6":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"9"},"7":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"8"},"8":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"7"},"9":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"3.4"},"10":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"4.2"},"11":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"5.7"},"12":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"6.1"},"13":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"5.5"},"14":{"name":"input","opts":{"password":false,"prompt":"Insira as notas aqui"},"value":"4.9"}},"exec_count":282,"start":1495890681140,"input":"aluno=[]\nnota=[]\nfor i in range(5):\n    aluno.append(raw_input ('insira o nome do aluno'))\nfor i in aluno:\n    nota.append(input ('Insira as notas aqui'))\n    nota.append(input ('Insira as notas aqui'))\n","state":"done","pos":19,"type":"cell","end":1495890711777,"id":"f032c2","kernel":"python2"}
{"type":"cell","id":"3b5388","pos":18,"input":"#### Exercício 6\n- Passo 1: Gere um arquivo com 10 notas de cinco alunos (Deve conter o nome do aluno e as notas). (ok)\n- Passo 2: Em seguida crie uma array em numpy com essas notas. (ok)\n- Passo 3: Crie um DataFrame dessas notas. (ok)\n- Passo 4: Identifique qual menor nota e quem foi o aluno que obteve essa nota (ok)\n- Passo 5: Identifique o aluno que tirou as melhores notas. (ok)","cell_type":"markdown"}
{"output":{"0":{"text":"A quantidade de valores lidos foram: 5\n","name":"stdout"}},"exec_count":3,"start":1497285086764,"input":"print 'A quantidade de valores lidos foram:', len(n)","state":"done","pos":5,"type":"cell","end":1497285086804,"id":"7e7593","kernel":"python2"}
{"output":{"0":{"text":"[5.5, 9, 3.6, 8.7, 0.5]\n","name":"stdout"}},"exec_count":4,"start":1497285088294,"input":"import numpy as np\nprint n","state":"done","pos":6,"type":"cell","end":1497285088304,"id":"9086a3","kernel":"python2"}
{"output":{"0":{"text":"[ 5.5  9.   3.6  8.7  0.5]\n","name":"stdout"}},"exec_count":5,"start":1497285090227,"input":"print np.ravel(n)","state":"done","pos":7,"type":"cell","end":1497285090237,"id":"1183b6","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"' 5.5 9 3.6 8.7 0.5 '"},"exec_count":6}},"exec_count":6,"start":1497285091797,"input":"\nstrn=\" \"\nfor i in n:\n    strn = strn+str(i)+\" \"\nstrn","state":"done","pos":8,"type":"cell","end":1497285091808,"id":"ca29a7","kernel":"python2"}
{"output":{"0":{"text":"\n0.5\n8.7\n3.6\n9\n5.5 \n","name":"stdout"}},"exec_count":8,"start":1497285106694,"input":"#precisa ser inverso!!\nstrn=\" \"\nfor i in n:\n    strn = \"\\n\"+str(i)+strn\nprint strn","state":"done","pos":9,"type":"cell","end":1497285106718,"id":"fd9dd2","kernel":"python2"}
{"output":{"0":{"text":"A soma dos valores de [5.5, 9, 3.6, 8.7, 0.5] é: 27.3\n","name":"stdout"}},"exec_count":9,"start":1497285116796,"input":"soma=sum(n)\nprint 'A soma dos valores de' , n, 'é:', soma","state":"done","pos":10,"type":"cell","end":1497285116809,"id":"7e7da1","kernel":"python2"}
{"output":{"0":{"text":"A média dos valores de [5.5, 9, 3.6, 8.7, 0.5] é: 5.46\n","name":"stdout"}},"exec_count":10,"start":1497285118394,"input":"media= soma/len(n)\nprint 'A média dos valores de', n, 'é:', media","state":"done","pos":11,"type":"cell","end":1497285118408,"id":"e0c13c","kernel":"python2"}
{"output":{"0":{"text":"5.5\n9\n8.7\n","name":"stdout"}},"exec_count":11,"start":1497285120393,"input":"for elem in n:\n    if elem> media:\n        print elem","state":"done","pos":12,"type":"cell","end":1497285120406,"id":"71ed8e","kernel":"python2"}
{"output":{"0":{"text":"5.5\n3.6\n0.5\n","name":"stdout"}},"exec_count":12,"start":1497285121836,"input":"for elem in n:\n    if elem<7:\n        print elem","state":"done","pos":13,"type":"cell","end":1497285121849,"id":"98140c","kernel":"python2"}
{"output":{"0":{"text":"O programa termina aqui. Até mais e obrigado pelos peixes!\n","name":"stdout"}},"exec_count":13,"start":1497285125392,"input":"print 'O programa termina aqui. Até mais e obrigado pelos peixes!'","state":"done","pos":14,"cell_type":"code","type":"cell","end":1497285125402,"id":"720116","kernel":"python2"}
{"output":{"0":{"text":"[10, 9, 8, 7, 3.4, 4.2, 5.7, 6.1, 5.5, 4.9]\n['Vanessa', 'Felipe', 'Elian', 'Ana', 'Joao']\n","name":"stdout"}},"exec_count":283,"start":1495890712954,"input":"print nota\nprint aluno\n","state":"done","pos":20,"cell_type":"code","type":"cell","end":1495890713015,"id":"e64724","kernel":"python2"}
{"output":{"0":{"text":"Os alunos e suas respectivas notas são:\n[('Vanessa', [10, 9]), ('Felipe', [8, 7]), ('Elian', [3.4, 4.2]), ('Ana', [5.7, 6.1]), ('Joao', [5.5, 4.9])]\n","name":"stdout"}},"exec_count":284,"start":1495890715242,"input":"import pandas as pd\nnotaal=range(9)\nfor i in range(9):\n    notaal[i]=[nota[i],nota[i+1]]\n\ndel notaal[1::2]\n\nnotaealu=zip(aluno,notaal)\nprint 'Os alunos e suas respectivas notas são:\\n', notaealu\nnotss=str(notaealu)\n\nwith open('notaealu','w')as arq:\n    arq.write(notss)","state":"done","pos":23,"type":"cell","end":1495890715292,"id":"33af6d","kernel":"python2"}
{"output":{"0":{"text":"[ 10.    9.    8.    7.    3.4   4.2   5.7   6.1   5.5   4.9]\n","name":"stdout"}},"exec_count":285,"start":1495890717640,"input":"import numpy as np\nnots=np.array(nota)\nprint nots\n","state":"done","pos":24,"type":"cell","end":1495890717692,"id":"2a89f3","kernel":"python2"}
{"output":{"0":{"text":"     Aluno       Notas\n0  Vanessa     [10, 9]\n1   Felipe      [8, 7]\n2    Elian  [3.4, 4.2]\n3      Ana  [5.7, 6.1]\n4     Joao  [5.5, 4.9]\n","name":"stdout"},"1":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Aluno</th>\n      <th>Maior nota</th>\n      <th>Menor nota</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Vanessa</td>\n      <td>10.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Felipe</td>\n      <td>8.0</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Elian</td>\n      <td>4.2</td>\n      <td>3.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Ana</td>\n      <td>6.1</td>\n      <td>5.7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Joao</td>\n      <td>5.5</td>\n      <td>4.9</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":405}},"exec_count":405,"start":1495895096756,"input":"import pandas as pd \ndf=pd.DataFrame(nots)\ndff=pd.DataFrame(notaealu)#,index=['Nota e Aluno', 'Nota e Aluno', 'Nota e Aluno', 'Nota e Aluno','Nota e Aluno'])\ndff['Aluno']=dff[0]\ndff['Notas']=dff[1]\ndff=dff.drop(0,axis=1)\ndff=dff.drop(1,axis=1)\nprint dff\ndff['Maior nota']=[max(elem) for elem in notaal]\ndff['Menor nota']=[min(elem) for elem in notaal]\ndff=dff.drop('Notas', axis=1)\ndff","state":"done","pos":25,"type":"cell","end":1495895096854,"id":"13b78f","kernel":"python2"}
{"output":{"0":{"text":"Delta menor que zero, raízes complexas. Por favor, insira outros valores de A, B e C: \n","name":"stdout"},"1":{"name":"input","opts":{"password":false,"prompt":"Insira A: "},"value":"2."},"2":{"name":"input","opts":{"password":false,"prompt":"Insira B: "},"value":"4.8"},"3":{"name":"input","opts":{"password":false,"prompt":"Insira C: "},"value":"9"},"4":{"text":"Delta menor que zero, raízes complexas. Por favor, insira outros valores de A, B e C: \n","name":"stdout"},"5":{"name":"input","opts":{"password":false,"prompt":"Insira A: "},"value":"9."},"6":{"name":"input","opts":{"password":false,"prompt":"Insira B: "},"value":"-3"},"7":{"name":"input","opts":{"password":false,"prompt":"Insira C: "},"value":"2"},"8":{"name":"input","opts":{"password":false,"prompt":"Insira A: "}},"9":{"text":"Delta menor que zero, raízes complexas. Por favor, insira outros valores de A, B e C: \n","name":"stdout","value":"1."},"10":{"name":"input","opts":{"password":false,"prompt":"Insira B: "},"value":"4"},"11":{"name":"input","opts":{"password":false,"prompt":"Insira C: "},"value":"5."},"12":{"text":"Delta menor que zero, raízes complexas. Por favor, insira outros valores de A, B e C: \n","name":"stdout"},"13":{"name":"input","opts":{"password":false,"prompt":"Insira A: "},"value":"7."},"14":{"name":"input","opts":{"password":false,"prompt":"Insira B: "},"value":"4."},"15":{"name":"input","opts":{"password":false,"prompt":"Insira C: "},"value":"-3."},"16":{"text":"x1: -0.214285714286\nx2: -0.357142857143\n","name":"stdout"}},"exec_count":90,"start":1495886494943,"input":"## from math import sqrt\ndelta= (B**2)-4*A*C\nwhile delta<0:\n    print (\"Delta menor que zero, raízes complexas. Por favor, insira outros valores de A, B e C: \")\n    A= input(\"Insira A: \")\n    B= input(\"Insira B: \") \n    C= input(\"Insira C: \")\n    float(A), float(B), float(C)\n    delta= (B**2)-4*A*C\n\nx1= (-B+(delta)**(1/2))/(2*A)\nx2= (-B-(delta)**(1/2))/(2*A)\nprint \"x1:\",x1\nprint \"x2:\",x2  ","state":"done","pos":17.5,"cell_type":"code","type":"cell","end":1495886522673,"id":"dc1d94","kernel":"python2"}
{"output":{"0":{"text":"O aluno com menor nota é: Elian e a nota é 3.4\n","name":"stdout"}},"exec_count":479,"start":1495897215080,"input":"for elem in dff['Menor nota']:\n    for i in range(len(dff['Menor nota'])):\n        if elem == dff['Menor nota'].min():\n            if dff.loc[i]['Menor nota']== dff['Menor nota'].min():\n                print 'O aluno com menor nota é:', dff.loc[i]['Aluno'], 'e a nota é', dff.loc[i]['Menor nota']\n           ","state":"done","pos":27,"type":"cell","end":1495897215169,"id":"6c0d9b","kernel":"python2"}
{"output":{"0":{"text":"O aluno com maior nota é: Vanessa e a nota é 10.0\n","name":"stdout"}},"exec_count":482,"start":1495897362499,"input":"for elem in dff['Maior nota']:\n    for i in range(len(dff['Maior nota'])):\n        if elem == dff['Maior nota'].max():\n            if dff.loc[i]['Maior nota']== dff['Maior nota'].max():\n                print 'O aluno com maior nota é:', dff.loc[i]['Aluno'], 'e a nota é', dff.loc[i]['Maior nota']\n           ","state":"done","pos":30,"type":"cell","end":1495897362589,"id":"64706d","kernel":"python2"}
{"type":"cell","id":"66ae46","pos":31,"input":"#### Exercicio 8\nConsidere um conjunto de 10 triplets descrevendo 10 triângulos (com vértices compartilhados), encontrar o conjunto de segmentos de linha única compondo todos os triângulos ","cell_type":"markdown"}
{"type":"cell","id":"dff1c7","pos":32,"input":""}
{"exec_count":1,"input":"#### Exercícios 4\n- Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: \"A minha estação predileta é 'estação', especialmente 'mês'\"  repetida um número aleatório de vezes, entre 5 e 20. Comprima essas arquivos usando o comando gzip. Faça isso utilizando o conceito de dicionários.","state":"done","pos":17.75,"cell_type":"markdown","type":"cell","id":"7cd01c","kernel":"python2"}
{"output":{"0":{"text":"arq_dezembro_inverno.txt  estacao2.txt\testacao8.txt\r\narq_janeiero_inverno.txt  estacao3.txt\testacao9.txt\r\nCronograma.ipynb\t  estacao4.txt\testacao.txt\r\nestacao10.txt\t\t  estacao5.txt\tExerciciosrevisao22.05.2017.ipynb\r\nestacao11.txt\t\t  estacao6.txt\tnotaealu\r\nestacao12.txt\t\t  estacao7.txt\tRevisão.ipynb\r\n","name":"stdout"}},"exec_count":24,"start":1497323181244,"input":"!ls ","state":"done","pos":17.9375,"type":"cell","end":1497323181363,"id":"46646b","kernel":"python2"}
{"output":{"0":{"text":"None\n","name":"stdout"}},"exec_count":23,"start":1497323179741,"input":"from random import randint\nwith open('estacao12.txt','w') as f:\n    print (f.write(randint(5,20)*\"A minha estação preferida é Inverno, especialmente fevereiro \\n\"))","state":"done","pos":17.890625,"type":"cell","end":1497323179756,"id":"834cee","kernel":"python2"}
{"exec_count":25,"start":1497323294599,"input":"!gzip estacao2.txt estacao8.txt arq_janeiero_inverno.txt  estacao3.txt estacao9.txt estacao4.txt estacao.txt estacao10.txt\t\t  estacao5.txt\n!gzip estacao11.txt  estacao6.txt\n!gzip estacao12.txt   estacao7.txt","state":"done","pos":17.96875,"type":"cell","end":1497323294971,"id":"e5afec","kernel":"python2"}
{"output":{"0":{"text":"arq_dezembro_inverno.txt     estacao2.txt.gz  estacao8.txt.gz\r\narq_janeiero_inverno.txt.gz  estacao3.txt.gz  estacao9.txt.gz\r\nCronograma.ipynb\t     estacao4.txt.gz  estacao.txt.gz\r\nestacao10.txt.gz\t     estacao5.txt.gz  Exerciciosrevisao22.05.2017.ipynb\r\nestacao11.txt.gz\t     estacao6.txt.gz  notaealu\r\nestacao12.txt.gz\t     estacao7.txt.gz  Revisão.ipynb\r\n","name":"stdout"}},"exec_count":26,"start":1497323302877,"input":"!ls","state":"done","pos":17.984375,"type":"cell","end":1497323302992,"id":"10fc32","kernel":"python2"}
{"output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Série</th>\n      <th>Geração</th>\n      <th>Temporada</th>\n      <th>Primeiro Episódio</th>\n      <th>Último Episódio</th>\n      <th>Região</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Série Original</td>\n      <td>Primeira</td>\n      <td>Liga Indigo</td>\n      <td>1</td>\n      <td>83</td>\n      <td>Kanto</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Série Original</td>\n      <td>Primeira</td>\n      <td>As Aventuras nas Ilhas Laranja</td>\n      <td>84</td>\n      <td>118</td>\n      <td>Ilhas Laranja</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Série Original</td>\n      <td>Segunda</td>\n      <td>A Jornada Johto</td>\n      <td>119</td>\n      <td>159</td>\n      <td>Johto</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Série Original</td>\n      <td>Segunda</td>\n      <td>Campeões da Liga Johto</td>\n      <td>160</td>\n      <td>211</td>\n      <td>Johto</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Série Original</td>\n      <td>Segunda</td>\n      <td>Master Quest</td>\n      <td>212</td>\n      <td>276</td>\n      <td>Johto</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Pokémon: Avançado</td>\n      <td>277</td>\n      <td>316</td>\n      <td>Hoenn</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Desafio Avançado</td>\n      <td>317</td>\n      <td>368</td>\n      <td>Hoenn</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Batalha Avançada</td>\n      <td>369</td>\n      <td>421</td>\n      <td>Hoenn</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Geração Avançada</td>\n      <td>Terceira</td>\n      <td>Batalha da Fronteira</td>\n      <td>422</td>\n      <td>468</td>\n      <td>Kanto</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Diamante e Pérola</td>\n      <td>469</td>\n      <td>520</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Batalha Dimensional</td>\n      <td>521</td>\n      <td>572</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Batalhas Galácticas</td>\n      <td>573</td>\n      <td>625</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Diamante e Pérola</td>\n      <td>Quarta</td>\n      <td>Vencedores da Liga Sinnoh</td>\n      <td>626</td>\n      <td>659</td>\n      <td>Sinnoh</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Preto e Branco</td>\n      <td>Quinta</td>\n      <td>Preto e Branco</td>\n      <td>660</td>\n      <td>707</td>\n      <td>Unova</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Preto e Branco</td>\n      <td>Quinta</td>\n      <td>Destinos Rivais</td>\n      <td>708</td>\n      <td>756</td>\n      <td>Unova</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Preto e Branco</td>\n      <td>Quinta</td>\n      <td>Aventuras em Unova (e Mais Além)</td>\n      <td>757</td>\n      <td>803</td>\n      <td>Unova</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>XY</td>\n      <td>Sexta</td>\n      <td>A Série XY</td>\n      <td>804</td>\n      <td>852</td>\n      <td>Kalos</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>XY</td>\n      <td>Sexta</td>\n      <td>Kalos Quest</td>\n      <td>853</td>\n      <td>897</td>\n      <td>Kalos</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>XY</td>\n      <td>Sexta</td>\n      <td>XY &amp; Z</td>\n      <td>898</td>\n      <td>946</td>\n      <td>Kalos</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Sun and Moon</td>\n      <td>Sétima</td>\n      <td>Sun and Moon</td>\n      <td>947</td>\n      <td>Não tem</td>\n      <td>Alola</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":27}},"exec_count":27,"start":1497323490507,"input":"import pandas as pd\n\n#DataFrame\ndata={\n'Série': ['Série Original','Série Original','Série Original','Série Original','Série Original','Geração Avançada','Geração Avançada',\n        'Geração Avançada','Geração Avançada','Diamante e Pérola','Diamante e Pérola','Diamante e Pérola',\n        'Diamante e Pérola','Preto e Branco','Preto e Branco','Preto e Branco','XY','XY','XY','Sun and Moon'],\n'Geração': ['Primeira','Primeira','Segunda','Segunda','Segunda','Terceira','Terceira','Terceira','Terceira',\n            'Quarta','Quarta','Quarta','Quarta','Quinta','Quinta','Quinta','Sexta','Sexta','Sexta','Sétima'],\n'Temporada': ['Liga Indigo', 'As Aventuras nas Ilhas Laranja','A Jornada Johto','Campeões da Liga Johto','Master Quest','Pokémon: Avançado',\n      'Desafio Avançado','Batalha Avançada','Batalha da Fronteira','Diamante e Pérola','Batalha Dimensional','Batalhas Galácticas',\n     'Vencedores da Liga Sinnoh','Preto e Branco','Destinos Rivais', 'Aventuras em Unova (e Mais Além)','A Série XY','Kalos Quest','XY & Z',\n      'Sun and Moon'],\n'Primeiro Episódio': [1,84,119,160,212,277,317,369,422, 469,521,573,626,660,708,757,804,853,898,947] ,\n'Último Episódio': [83,118,159,211,276,316,368,421,468,520,572,625,659,707,756,803,852,897,946,'Não tem'],\n\n'Região': ['Kanto','Ilhas Laranja','Johto','Johto','Johto','Hoenn','Hoenn','Hoenn','Kanto','Sinnoh','Sinnoh','Sinnoh','Sinnoh','Unova','Unova',\n           'Unova','Kalos','Kalos','Kalos','Alola']}\n\ndf = pd.DataFrame(data, columns=['Série','Geração','Temporada','Primeiro Episódio','Último Episódio','Região'])\ndf","state":"done","pos":17.9921875,"type":"cell","end":1497323491977,"id":"85cab9","kernel":"python2"}
{"type":"cell","id":"f451ac","pos":17.98828125,"input":"#### Exercícios 5\n1. Com base nos dados de https://pt.wikipedia.org/wiki/Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon Construa um  dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série","cell_type":"markdown"}
{"output":{"0":{"text":"A geração mais longeva é a Terceira com 192 episódios\n","name":"stdout"}},"exec_count":28,"start":1497323491993,"input":"prim=0\nseg=0\nter=0\nqua=0\nqui=0\nsex=0\n\nfor i in range(19):\n    if df.ix[i]['Geração']== 'Primeira':\n        prim= prim+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Segunda':\n        seg= seg+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Terceira':\n        ter= ter+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Quarta':\n         qua= qua+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Quinta':\n         qui= qui+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\n    if df.ix[i]['Geração']== 'Sexta':\n         sex= sex+df['Último Episódio'][i]-df['Primeiro Episódio'][i]+1\nepis=[prim,seg,ter,qua,qui,sex]\ntemps={'Primeira':prim,'Segunda':seg,'Terceira':ter,'Quarta':qua,'Quinta':qui,'Sexta':sex}\ngerlongeva= max(temps)\n\nfor elem in epis:\n    #print elem\n    if elem==max(epis):\n        print 'A geração mais longeva é a', gerlongeva, 'com', elem, 'episódios' ","state":"done","pos":17.99609375,"type":"cell","end":1497323492026,"id":"cbf10c","kernel":"python2"}
{"output":{"0":{"text":"A Série Original durou 5 temporadas\nA Geração Avançada durou 4 temporadas\nDiamante e Pérola durou 4 temporadas\nPreto e Branco durou 3 temporadas\nXY durou 3 temporadas\nSun and Moon durou 1 temporada\n","name":"stdout"}},"exec_count":29,"start":1497323492032,"input":"print 'A Série Original durou', len([elem for elem in df['Série'] if elem == 'Série Original']) , 'temporadas'\nprint 'A Geração Avançada durou', len([elem for elem in df['Série'] if elem == 'Geração Avançada']), 'temporadas'\nprint 'Diamante e Pérola durou', len([elem for elem in df['Série'] if elem == 'Diamante e Pérola']), 'temporadas'\nprint 'Preto e Branco durou', len([elem for elem in df['Série'] if elem == 'Preto e Branco']), 'temporadas'\nprint 'XY durou', len([elem for elem in df['Série'] if elem == 'XY']), 'temporadas'\nprint 'Sun and Moon durou', len([elem for elem in df['Série'] if elem == 'Sun and Moon']), 'temporada'","state":"done","pos":17.998046875,"type":"cell","end":1497323492036,"id":"03bc12","kernel":"python2"}
{"output":{"0":{"text":"[[0 0 0 0 0 0]\n [0 0 0 1 0 0]\n [0 1 0 1 0 0]\n [0 0 1 1 0 0]\n [0 0 0 0 0 0]\n [0 0 0 0 0 0]]\n\n[[0 0 0 0 0 0]\n [0 0 0 0 0 0]\n [0 0 0 0 1 0]\n [0 0 1 0 1 0]\n [0 0 0 1 1 0]\n [0 0 0 0 0 0]]\n","name":"stdout"}},"exec_count":52,"start":1497323786793,"input":"import numpy as np\n\ndef iterate_1(Z):\n    # Contagem vizinhança\n    N = np.zeros(Z.shape, int)\n    N[1:-1,1:-1] += (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +\n                     Z[1:-1,0:-2]                + Z[1:-1,2:] +\n                     Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])\n    N_ = N.ravel()\n    Z_ = Z.ravel()\n\n    # Aplicação das regras\n    R1 = np.argwhere( (Z_==1) & (N_ < 2) )\n    R2 = np.argwhere( (Z_==1) & (N_ > 3) )\n    R3 = np.argwhere( (Z_==1) & ((N_==2) | (N_==3)) )\n    R4 = np.argwhere( (Z_==0) & (N_==3) )\n\n    # Definir novos valores\n    Z_[R1] = 0\n    Z_[R2] = 0\n    Z_[R3] = Z_[R3]\n    Z_[R4] = 1\n\n    # Garantia de que as fronteiras permaneçam nulas\n    Z[0,:] = Z[-1,:] = Z[:,0] = Z[:,-1] = 0\n\n\ndef iterate_2(Z):\n    # Contagem vizinhança\n    N = (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +\n         Z[1:-1,0:-2]                + Z[1:-1,2:] +\n         Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])\n\n    # Aplicação das regras\n    birth = (N==3) & (Z[1:-1,1:-1]==0)\n    survive = ((N==2) | (N==3)) & (Z[1:-1,1:-1]==1)\n    Z[...] = 0\n    Z[1:-1,1:-1][birth | survive] = 1\n    return Z\n\n\nZ = np.array([[0,0,0,0,0,0],\n              [0,0,0,1,0,0],\n              [0,1,0,1,0,0],\n              [0,0,1,1,0,0],\n              [0,0,0,0,0,0],\n              [0,0,0,0,0,0]])\n\nprint Z\nprint\nfor i in range(4): iterate_2(Z)\nprint Z\n","state":"done","pos":30.5,"type":"cell","end":1497323786858,"id":"686669","kernel":"python2"}
{"type":"cell","id":"4fc99e","pos":30.25,"input":"#### Exercicio 7\n- O Jogo da Vida (The Game of Life) é um autômato celular (cellular automaton) introduzido por John Horton Conway em 1970. Um automato celular consiste de uma rede de células. Cada célula pode estar em um número finito de estados, como morta ou viva. O “jogo” é na verdade uma simulação que permite observar a evolução de um processo a partir de uma certa condição inicial.\n- O jogo se desenvolve sobre uma matriz bi-dimensional que pode ser tão grande quanto se queira. Vamos chamar essa matriz de mapa. Cada posição ou célula do mapa pode estar vazia (= célula morta) ou ocupada por um agente (= célula viva). Cada posição possui também até 8 posições vizinhas: imediatamente acima, abaixo, aos lados e nas diagonais. Em um determinado instante, o mapa contém uma geração de agentes. A geração no instante seguinte é determinada segundo as regras abaixo:\n- Novos agentes nascem em células vazias que possuam exatamente 3 agentes vizinhos;\n- **Agentes com 2 ou 3 agentes vizinhos sobrevivem;**\n- **Agentes com menos de 2 agentes vizinhos morrem for falta de recursos;**\n- **Agentes com mais de 3 agentes vizinhos morrem por excesso de competição.**","cell_type":"markdown"}
{"exec_count":53,"start":1497323787768,"input":"\n#para muitos pontos, visualização gráfica\n","state":"done","pos":30.75,"type":"cell","end":1497323787770,"id":"43b1ee","kernel":"python2"}
{"output":{"0":{"ename":"NameError","evalue":"name 'U' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-0babbac62ff4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfacecolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"white\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_axes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mframeon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mU\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minterpolation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'nearest'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPurples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'U' is not defined"]},"1":{"data":{"image/png":"415cc0aa22cf962c68580a17665106118bd237c8"}}},"exec_count":55,"start":1497323789764,"input":"import matplotlib.pyplot as plt\n\nsize = np.array(Z.shape)\ndpi = 72.0\nfigsize= size[1]/float(dpi),size[0]/float(dpi)\nfig= plt.figure(figsize=figsize, dpi=dpi, facecolor=\"white\")\nfig.add_axes([0.0, 0.0, 1.0, 1.0], frameon=False)\nplt.imshow(U,interpolation='nearest', cmap=plt.cm.Purples)\nplt.xticks([]), plt.yticks([])\nplt.show()","state":"done","pos":30.875,"type":"cell","end":1497323789928,"id":"99b8af","kernel":"python2"}
{"exec_count":54,"start":1497323788765,"input":"for i in range(100): iterate_1(Z)","state":"done","pos":30.8125,"type":"cell","end":1497323788777,"id":"1f2e97","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"0a51025460daf6a32f68daaaa4d333b27b631bac"}}},"exec_count":56,"start":1497323790777,"input":"size = np.array(Z.shape)\ndpi = 72.0\nfigsize= size[1]/float(dpi),size[0]/float(dpi)\nfig=plt.figure(figsize=figsize, dpi=dpi,facecolor=\"white\")\nfig.add_axes([0.0, 0.0, 1.0, 1.0], frameon=False)\nplt.imshow(Z,interpolation='nearest', cmap=plt.cm.gray_r)\nplt.xticks([]), plt.yticks([])\nplt.show()","state":"done","pos":30.9375,"type":"cell","end":1497323790855,"id":"867535","kernel":"python2"}