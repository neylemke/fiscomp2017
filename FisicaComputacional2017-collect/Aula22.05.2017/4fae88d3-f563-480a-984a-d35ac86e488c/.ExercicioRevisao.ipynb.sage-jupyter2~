{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"file","last_load":1497283513755}
{"output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-2-dc7cab789d5f>, line 3)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-dc7cab789d5f>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    for i in r for j in r: # iterate over range in 2d\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"exec_count":2,"start":1497283631740,"input":"#7\n\nfor i in r for j in r: # iterate over range in 2d\n if not i == j == 0) # exclude the center cell\n\n\ndef advance(board):\n    \"\"\"Advance the board one step and return it.\"\"\"\n    new_board = set()\n    for cell in board:\n        cell_neighbors = set(neighbors(cell))\n        # test if live cell dies\n        if len(board & cell_neighbors) in [2, 3]:\n            new_board.add(cell)\n\n            return new_board\ndef print_board(board, size=None):\n    sizex = sizey = size or 0\n    for x, y in board:\n        sizex = x if x > sizex else sizex\n        sizey = y if y > sizey else sizey\n    for i in xrange(sizex + 1):\n        for j in xrange(sizey + 1):\n            sys.stdout.write(' x ' if (i, j) in board else ' . ')\n        print\n\n\ndef constrain(board, size):\n    return set(cell for cell in board if cell[0] <= size and cell[1] <= size)\n\n\ndef main(board, steps=75, size=20):\n    for i in xrange(1, steps + 1):\n        sys.stdout.write('\\033[H')  # move to the top\n        sys.stdout.write('\\033[J')  # clear the screen\n        print 'step:', i, '/', steps\n        print_board(board, size)\n        time.sleep(0.1)\n        board = constrain(advance(board), size)\n\n\nif __name__ == '__main__':\n    main(GLIDER)","state":"done","pos":2,"cell_type":"code","type":"cell","end":1497283631747,"id":"a9baf9","kernel":"python2"}
{"type":"cell","id":"960821","pos":0,"input":"#1\n\nimport random\n\nlista = []    \nintervalomed = []\nfor i in range(100):\n    lista.append(random.randint(0,1000))\nprint lista   \nprint \nfor i in range(len(lista)-1):     \n    intervalomed.append((lista[i] + lista[i+1])/2)\nprint intervalomed    ","output":{"0":{"name":"stdout","output_type":"stream","text":"[498, 167, 423, 130, 102, 84, 653, 533, 455, 708, 881, 581, 482, 682, 297, 289, 354, 475, 88, 95, 683, 694, 21, 41, 359, 412, 409, 381, 760, 802, 375, 458, 248, 245, 975, 529, 200, 106, 296, 419, 908, 436, 846, 198, 367, 864, 676, 811, 748, 729, 586, 226, 982, 533, 413, 754, 391, 274, 998, 743, 830, 256, 172, 789, 181, 490, 610, 533, 809, 115, 151, 635, 432, 942, 149, 667, 804, 488, 317, 138, 601, 345, 708, 800, 919, 289, 834, 606, 422, 866, 996, 905, 913, 834, 933, 946, 720, 822, 799, 403]\n\n[332, 295, 276, 116, 93, 368, 593, 494, 581, 794, 731, 531, 582, 489, 293, 321, 414, 281, 91, 389, 688, 357, 31, 200, 385, 410, 395, 570, 781, 588, 416, 353, 246, 610, 752, 364, 153, 201, 357, 663, 672, 641, 522, 282, 615, 770, 743, 779, 738, 657, 406, 604, 757, 473, 583, 572, 332, 636, 870, 786, 543, 214, 480, 485, 335, 550, 571, 671, 462, 133, 393, 533, 687, 545, 408, 735, 646, 402, 227, 369, 473, 526, 754, 859, 604, 561, 720, 514, 644, 931, 950, 909, 873, 883, 939, 833, 771, 810, 601]\n"}},"cell_type":"code","exec_count":3}
{"type":"cell","id":"6dc860","pos":1,"input":"#3\n\nimport math \n     #De os valores para a, b e c respectivamente\na = int(input(\"Digite um valor para A: \"))\nb = int(input(\"Digite um valor para B: \"))\nc = int(input(\"Digite um valor para C: \"))\n\n#Calculando o delta\n\ndelta = b*b - 4 * a * c\n\n\nif delta < 0:\n    print(\"A equacao possui raizes imaginarias\")\nelif delta == 0:\n    raiz = (-1*b + math.sqrt(delta))/(2 * a)\n    print(\"A equacao possui apenas uma raiz \",raiz)\nelif delta > 0:\n    raiz1 =(-1*b + math.sqrt(delta))/(2 * a)\n    raiz2 =(-1*b - math.sqrt(delta))/(2 * a)\n    print(\"As raizes da equacao sao \",raiz1, \"e\",raiz2)","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Digite um valor para A: "},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Digite um valor para B: "},"output_type":"stream","value":"2"},"2":{"name":"input","opts":{"password":false,"prompt":"Digite um valor para C: "},"output_type":"stream","value":"-3"},"3":{"name":"stdout","output_type":"stream","text":"('As raizes da equacao sao ', 1.0, 'e', -3.0)\n"}},"cell_type":"code","exec_count":4,"metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Digite um valor para A: "},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Digite um valor para B: "},"output_type":"stream","value":"2"},"2":{"name":"input","opts":{"password":false,"prompt":"Digite um valor para C: "},"output_type":"stream","value":"-3"}}}}}
{"output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-1-fc8a7554f03f>, line 5)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-fc8a7554f03f>\"\u001b[0;36m, line \u001b[0;32m5\u001b[0m\n\u001b[0;31m    print 'π: %.30f' % math.pi print 'e: %.30f' % math.e\u001b[0m\n\u001b[0m                                    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"exec_count":1,"start":1497283611491,"input":"##Exercício 2: math, numpy, matplotlib, pandas e string\n\nimport math\n\nprint 'π: %.30f' % math.pi print 'e: %.30f' % math.e\n\nNumPy\nGrandes partes do uso NumPy, é para um pacote de matriz oferecendo N-dimensional, digitado matrizes e funções úteis para a álgebra linear, transformadas de Fourier, números aleatórios, e outras tarefas científicas básicas.\n\nimport numpy as np\n\nExemplos: Criar um grande vetor(array) com com 1 milhão de amostras.\n\nx = np.linspace(start=0, stop=100, num=1E6, dtype=np.float64)\n\nA maioria das operações é por elemento.\n\ny = x ** 2\n\nUsuário de C e Fortran.\n\nprint(y.sum())\n\nFFT e Inversa.\n\nx = np.random.random(100) large_X = np.fft.fft(x) x = np.fft.ifft(large_X)\n\nMatplotlib\nGráficos são feitos usando Matplotlib, um pacote para a criação de lotes estáticas de alta qualidade. Ele tem uma interface que imita Matlab que muitas pessoas estão familiarizados.\n\nimport matplotlib.pylab as plt\n\nplt.plot(np.sin(np.linspace(0, 2 * np.pi, 2000)), color=\"green\", label=\"Some Curve\")\n\nplt.legend()\n\nplt.ylim(-1.1, 1.1)\n\nplt.show()\n\nPandas\nPython é uma ótima linguagem para fazer a análise de dados, principalmente por causa do fantástico ecossistema de pacotes centrados em dados Python. Pandas é um desses pacotes, e torna a importação e análise de dados muito mais fácil. Pandas baseia-se em pacotes como NumPy e matplotlib para dar-lhe um único, conveniente, lugar para fazer a maioria de sua análise de dados e trabalho de visualização.\n\nimport pandas as pd\n\ndf_data = {'pais': ['Brasil', 'Argentina','Argentina', 'Brasil', 'Chile','Chile'],'ano': [2005, 2006, 2005, 2006, 2007, 2008],'populacao': [170.1, 30.5, 32.2, 172.6, 40.8, 42.0]} df = pd.DataFrame(df_data) print(df)\n\nString\nStrings estão entre os tipos mais populares em Python. Podemos criá-los simplesmente anexando caracteres entre aspas. Python trata citações simples o mesmo que aspas duplas. Criar strings é tão simples como atribuir um valor a uma variável. Por exemplo:\n\nvar1 = 'Hello World!' var2 = \"Python Programming\"","state":"done","pos":0.5,"type":"cell","end":1497283611546,"id":"a2e37e","kernel":"python2"}
{"type":"cell","id":"b43075","pos":3,"input":""}