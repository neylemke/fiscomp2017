{"kernelspec":{"display_name":"Python 3 (Ubuntu Linux)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"},"latex_envs":{"bibliofile":"biblio.bib","cite_by":"apalike","current_citInitial":1,"eqLabelWithNumbers":true,"eqNumInitial":0}}
{"cell_type":"code","execution_count":1,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T11:20:54.418738Z","start_time":"2017-04-21T11:20:53.274689Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"  File \"/usr/lib/python3.4/site.py\", line 182\r\n    file=sys.stderr)\r\n        ^\r\nSyntaxError: invalid syntax\r\n"}],"source":"!pip install tabulate"}
{"cell_type":"code","execution_count":2,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T11:24:34.074444Z","start_time":"2017-04-21T11:24:34.068991Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"ename":"ImportError","evalue":"No module named 'tabulate'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-6349001bac2d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtabulate\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtabulate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m table = [[\"Sun\",696000,1989100000],[\"Earth\",6371,5973.6],\n\u001b[1;32m      4\u001b[0m [\"Moon\",1737,73.5],[\"Mars\",3390,641.85]]\n\u001b[1;32m      5\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Planet'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Mass'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Year'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: No module named 'tabulate'"]}],"source":"from tabulate import tabulate\n\ntable = [[\"Sun\",696000,1989100000],[\"Earth\",6371,5973.6],\n[\"Moon\",1737,73.5],[\"Mars\",3390,641.85]]\nheaders=['Planet','Mass','Year']\nprint( tabulate(table,  headers,tablefmt=\"latex\"))"}
{"cell_type":"code","execution_count":20,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T11:27:19.990235Z","start_time":"2017-04-21T11:27:19.984850Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"<table>\n<thead>\n<tr><th>Planet  </th><th style=\"text-align: right;\">  Mass</th><th style=\"text-align: right;\">         Year</th></tr>\n</thead>\n<tbody>\n<tr><td>Sun     </td><td style=\"text-align: right;\">696000</td><td style=\"text-align: right;\">   1.9891e+09</td></tr>\n<tr><td>Earth   </td><td style=\"text-align: right;\">  6371</td><td style=\"text-align: right;\">5973.6       </td></tr>\n<tr><td>Moon    </td><td style=\"text-align: right;\">  1737</td><td style=\"text-align: right;\">  73.5       </td></tr>\n<tr><td>Mars    </td><td style=\"text-align: right;\">  3390</td><td style=\"text-align: right;\"> 641.85      </td></tr>\n</tbody>\n</table>\n"}],"source":"from tabulate import tabulate\n\ntable = [[\"Sun\",696000,1989100000],[\"Earth\",6371,5973.6],\n[\"Moon\",1737,73.5],[\"Mars\",3390,641.85]]\nheaders=['Planet','Mass','Year']\nprint( tabulate(table,  headers,tablefmt=\"html\"))"}
{"cell_type":"code","execution_count":23,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T11:28:18.219864Z","start_time":"2017-04-21T11:28:18.215416Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::b9816c97-d376-437d-975e-4eea85bcb5f1","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"}],"source":"%%html\n<table>\n<thead>\n<tr><th>Planet  </th><th style=\"text-align: right;\">  Mass</th><th style=\"text-align: right;\">         Year</th></tr>\n</thead>\n<tbody>\n<tr><td>Sun     </td><td style=\"text-align: right;\">696000</td><td style=\"text-align: right;\">   1.9891e+09</td></tr>\n<tr><td>Earth   </td><td style=\"text-align: right;\">  6371</td><td style=\"text-align: right;\">5973.6       </td></tr>\n<tr><td>Moon    </td><td style=\"text-align: right;\">  1737</td><td style=\"text-align: right;\">  73.5       </td></tr>\n<tr><td>Mars    </td><td style=\"text-align: right;\">  3390</td><td style=\"text-align: right;\"> 641.85      </td></tr>\n</tbody>\n</table>"}
{"cell_type":"code","execution_count":25,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T11:36:05.400365Z","start_time":"2017-04-21T11:36:03.161224Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Collecting ipy_table\n  Downloading ipy_table-v1.12.tgz\nInstalling collected packages: ipy-table\n  Running setup.py install for ipy-table ... \u001b[?25ldone\n\u001b[?25hSuccessfully installed ipy-table-1.12\n"}],"source":"! pip install ipy_table"}
{"cell_type":"code","execution_count":3,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T15:04:09.707520Z","start_time":"2017-04-21T15:04:09.699607Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::329f60c6-1d3b-47cb-951c-5824ddc6a591","text/plain":"<ipy_table.IpyTable at 0x7ffb54fa6da0>"},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":"from ipy_table import *\nplanets = [\n    ['Planet', 'Mass (kg)', 'Diameter (km)'],\n    ['Mercury', 3.3022E23, 4879], \n    ['Venus', 4.896E24, 12104],\n    ['Earth', 5.972E24,\"$x^2$\"],\n    ['Mars', 6.4191E23, 6772]];\nmake_table(planets)\napply_theme('basic')\nset_column_style(2, color='lightBlue')\nset_row_style(2, color='red',thick_border='top,bottom')"}
{"cell_type":"code","execution_count":4,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T17:41:50.005026Z","start_time":"2017-04-21T17:41:50.001056Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"data_matrix = [['Name', 'Equation'],\n               ['Pythagorean Theorem', '$a^{2}+b^{2}=c^{2}$'],\n               ['Euler\\'s Formula', '$F-E+V=2$'],\n               ['The Origin of Complex Numbers', '$i^{2}=-1$'],\n               ['Einstein\\'s Theory of Relativity', '$E=m c^{2}$']]\n"}
{"cell_type":"code","execution_count":5,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T17:54:46.522511Z","start_time":"2017-04-21T17:54:46.516486Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::8cba8a69-d9b5-4739-9b5c-af6b481d0ed0","text/plain":"<ipy_table.IpyTable at 0x7ffb54fa6dd8>"},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":"make_table(data_matrix)\napply_theme('basic')\nset_column_style(0, color='lightBlue',align='left')\nset_column_style(1,width=150,align='center')\nset_row_style(0, color='lightblue',thick_border='top,bottom',bold=True,align='center')"}
{"cell_type":"code","execution_count":6,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T18:06:31.731395Z","start_time":"2017-04-21T18:06:28.750184Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"scrolled":true,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"  File \"/usr/lib/python3.4/site.py\", line 182\r\n    file=sys.stderr)\r\n        ^\r\nSyntaxError: invalid syntax\r\n"}],"source":"!pip install httplib2\n"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"!pip install --upgrade google-api-python-client"}
{"cell_type":"code","execution_count":7,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T18:26:57.108078Z","start_time":"2017-04-21T18:26:57.101600Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"from __future__ import print_function\nimport httplib2\nimport os\n\nfrom apiclient import discovery\nfrom oauth2client import client\nfrom oauth2client import tools\nfrom oauth2client.file import Storage\nimport argparse\nflags=None\n#flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()\n\n# If modifying these scopes, delete your previously saved credentials\n# at ~/.credentials/sheets.googleapis.com-python-quickstart.json\nSCOPES = 'https://www.googleapis.com/auth/spreadsheets.readonly'\nCLIENT_SECRET_FILE = 'client_secret.json'\nAPPLICATION_NAME = 'Google Sheets API Python Quickstart'"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"import pandas as pd"}
{"cell_type":"code","execution_count":85,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T18:26:58.758620Z","start_time":"2017-04-21T18:26:58.745577Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"def get_credentials():\n    \"\"\"Gets valid user credentials from storage.\n\n    If nothing has been stored, or if the stored credentials are invalid,\n    the OAuth2 flow is completed to obtain the new credentials.\n\n    Returns:\n        Credentials, the obtained credential.\n    \"\"\"\n    home_dir = os.path.expanduser('~')\n    credential_dir = os.path.join(home_dir, '.credentials')\n    if not os.path.exists(credential_dir):\n        os.makedirs(credential_dir)\n    credential_path = os.path.join(credential_dir,\n                                   'sheets.googleapis.com-python-quickstart.json')\n\n    store = Storage(credential_path)\n    credentials = store.get()\n    if not credentials or credentials.invalid:\n        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)\n        flow.user_agent = APPLICATION_NAME\n        credentials = tools.run_flow(flow, store,flags)\n        print('Storing credentials to ' + credential_path)\n    return credentials"}
{"cell_type":"code","execution_count":89,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T18:42:11.258324Z","start_time":"2017-04-21T18:42:11.249433Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"<oauth2client.client.OAuth2Credentials at 0x110a4b160>"},"execution_count":89,"metadata":{},"output_type":"execute_result"}],"source":"get_credentials()"}
{"cell_type":"code","execution_count":184,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T20:00:25.233753Z","start_time":"2017-04-21T20:00:23.159762Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::f75f0723-a68e-49f3-b25f-79f0131b835e","text/plain":"<ipy_table.IpyTable at 0x10ca9d8d0>"},"execution_count":184,"metadata":{},"output_type":"execute_result"}],"source":"\"\"\"Shows basic usage of the Sheets API.\n\nCreates a Sheets API service object and prints the names and majors of\nstudents in a sample spreadsheet:\nhttps://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit\n\"\"\"\ncredentials = get_credentials()\nhttp = credentials.authorize(httplib2.Http())\ndiscoveryUrl = ('https://sheets.googleapis.com/$discovery/rest?'\n                'version=v4')\nservice = discovery.build('sheets', 'v4', http=http,\n                          discoveryServiceUrl=discoveryUrl)\n\nspreadsheetId = '16Bmq1nd0rwTr8euOTMDETOgVddOGNtRl45R-F3IjWLg'\nrangeName = 'data!A1:E'\nresult = service.spreadsheets().values().get(\n    spreadsheetId=spreadsheetId, range=rangeName).execute()\nvalues = result.get('values', [])\nmake_table(values)\napply_theme('basic')\nset_column_style(0, color='lightBlue',align='left')\nset_column_style(1,width=150,align='center')\nset_row_style(0, color='lightblue',thick_border='top,bottom',bold=True,align='center')"}
{"cell_type":"code","execution_count":176,"metadata":{"ExecuteTime":{"end_time":"2017-04-21T19:46:59.756366Z","start_time":"2017-04-21T19:46:59.753835Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":""}
{"cell_type":"code","execution_count":585,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T19:48:25.376903Z","start_time":"2017-04-22T19:48:25.363116Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"df=pd.DataFrame(values[1:],columns=values[0])\nfor col in df.columns[2:]:\n    df[col]=df[col].apply(float)\ndf['Média']=df.iloc[0:,2:].mean(axis=1)\nformat = lambda x: \"{0:.2f}\".format(x)\ndf['Média']=df['Média'].apply(format)\nvalues2=df.values.tolist()\n"}
{"cell_type":"code","execution_count":586,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T19:48:27.663393Z","start_time":"2017-04-22T19:48:27.651541Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::291192bb-48f6-4b06-9134-d7dd8a3112b4","text/plain":"<ipy_table.IpyTable at 0x119ea2e10>"},"execution_count":586,"metadata":{},"output_type":"execute_result"}],"source":"\nheader=[elem for elem in df.columns]\nmake_table([header]+values2)\napply_theme('basic')\nset_column_style(1,width=150,align='left')\nset_row_style(0, color='lightblue',thick_border='top,bottom',bold=True,align='center')\nnum=len(header)-1\nset_column_style(num, color='lightblue',float_format='%0.3f')"}
{"cell_type":"code","execution_count":562,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T19:36:50.420343Z","start_time":"2017-04-22T19:36:50.411761Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"       RA  Nome                                    Civilizações    Pré-Socráticos    Grecia Clássica\n141102233  Abner Alves de Oliveira                            0                 8                9\n141101725  Alexandre Locci Nogueira dos Santos                9                 8                9\n141101611  Amanda Anselmo Rosa                                7                 9                9.5\n151100667  Ana Beatriz Marques Carlos                        10                 9                9.5\n141101571  Andre Felipe da Silva                              7                 9                8\n141100613  Caroline Piovesan Pinheiro                         9                 8                9\n141101423  Eduarda Pio Costa da Silva                         9                 8                9\n101105454  Franciane Ribeiro                                  7                 8                9\n151102139  Gabriel de Castro Chacon                           8                 8                9\n151102431  Giovanna Holanda Oliveira de Almeida               8                 8                9\n141100583  Gustavo Henrique Tomanik                           9                 9                9\n141102209  Gustavo Serafim Rodrigues                          9                 9                9\n151100616  Hamine Cristina de Oliveira                        8                 8                9\n141102519  Isabella Velloso Arrigo                            8                 0                9\n151102481  Isabelle Rodrigues de Paula                        9                 8                9\n141100061  Juan Lopes Costa                                   9                 9                9\n141100869  Julia Willmersdorf Goncalves Correa                9                 9                8\n141102551  Karoline Cafisso                                   7                 8                9\n141102691  Kerolyn Adorne Moda                                9                 9                9\n121101215  Leandro Augusto do Nascimento                      7                 8                9\n131102044  Leticia Ferreira Godoi                             7                 8                9\n141102381  Lorraine Letiele Pires                             7                 9                8\n141102071  Lucas Faconi Camargo                               9                 9                9\n151100454  Maria Eliza Antunes                                8                 8                9\n151100497  Milena Foltran de Miranda                         10                 9                9.5\n141101891  Murilo Tireli Gonzaga                              7                 0                8\n151102155  Nurya Pinheiro                                    10                 9                9.5\n141100508  Paulo Zago Leonel                                  9                 8                9\n151101752  Raphaella Navarro                                  7                 8                9\n151100519  Samuel Perri Gimenes                              10                 9                9.5\n141100621  Suelen Simoes Costa                                7                 9                8\n141100893  Thiago Souza Dias                                  7                 9                8\n131101064  Tiago Fernando Alves de Moura                      7                 8                9\n151100039  Vanessa Ulisses Amorim da Silva                   10                 9                9.5\n121101509  Victor Santos Silva                                7                 9                8\n"}],"source":"print(tabulate(values[1:],values[0],tablefmt=\"plain\"))"}
{"cell_type":"markdown","metadata":{"run_control":{"frozen":false,"read_only":false}},"source":"{{ print(‘hello world’}}"}
{"cell_type":"markdown","metadata":{"ExecuteTime":{"end_time":"2017-04-22T00:51:17.280459Z","start_time":"2017-04-22T00:51:17.271728Z"},"run_control":{"frozen":false,"read_only":false}},"source":"{{ print(‘hello world’}}"}
{"cell_type":"code","execution_count":228,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:04:12.771154Z","start_time":"2017-04-22T01:04:12.762645Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"import ipywidgets as widgets"}
{"cell_type":"code","execution_count":236,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:07:58.996825Z","start_time":"2017-04-22T01:07:58.967989Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"L=5*[0]\nfor i in range(4):\n    widgets.FloatText(\n        value=7.5,\n        description='Any:',\n        disabled=False,\n        color='black'\n    )"}
{"cell_type":"code","execution_count":241,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:10:11.191890Z","start_time":"2017-04-22T01:10:11.173951Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"a1=widgets.FloatText(\n        value=7.5,\n        description='Any:',\n        disabled=False,\n        color='black'\n    )"}
{"cell_type":"code","execution_count":242,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:10:18.604397Z","start_time":"2017-04-22T01:10:18.591681Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"a2=widgets.FloatText(\n        value=7.5,\n        description='Any:',\n        disabled=False,\n        color='black'\n    )"}
{"cell_type":"code","execution_count":249,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:24:54.794774Z","start_time":"2017-04-22T01:24:54.739904Z"},"collapsed":true,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[],"source":"items = [widgets.FloatText(value=4.8) for i in range(4)]\nw=widgets.HBox([widgets.VBox([items[0], items[1]]), widgets.VBox([items[2], items[3]])])"}
{"cell_type":"code","execution_count":248,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:21:22.071687Z","start_time":"2017-04-22T01:21:22.067196Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"990b2d0010634fcb82ec0c69901bf27b"}},"metadata":{},"output_type":"display_data"}],"source":"items[0]"}
{"cell_type":"code","execution_count":251,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:25:31.812258Z","start_time":"2017-04-22T01:25:31.806022Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"50e7ac23baba460a91a2b2516494fc24"}},"metadata":{},"output_type":"display_data"}],"source":"from IPython.display import display\ndisplay(w)"}
{"cell_type":"code","execution_count":257,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:27:24.916730Z","start_time":"2017-04-22T01:27:24.907080Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"<bound method HasTraits.traits of <ipywidgets.widgets.widget_box.HBox object at 0x1106de710>>"},"execution_count":257,"metadata":{},"output_type":"execute_result"}],"source":"w.traits"}
{"cell_type":"code","execution_count":258,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:30:28.221126Z","start_time":"2017-04-22T01:30:28.216295Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"<bound method Widget.get_state of <ipywidgets.widgets.widget_box.HBox object at 0x1106de710>>"},"execution_count":258,"metadata":{},"output_type":"execute_result"}],"source":"w.get_state"}
{"cell_type":"code","execution_count":262,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:32:00.841721Z","start_time":"2017-04-22T01:32:00.832572Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"['_dom_classes',\n '_model_module',\n '_model_module_version',\n '_model_name',\n '_view_module',\n '_view_module_version',\n '_view_name',\n 'box_style',\n 'children',\n 'layout',\n 'msg_throttle']"},"execution_count":262,"metadata":{},"output_type":"execute_result"}],"source":"w.keys"}
{"cell_type":"code","execution_count":272,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T01:35:03.307124Z","start_time":"2017-04-22T01:35:03.298880Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"4.8"},"execution_count":272,"metadata":{},"output_type":"execute_result"}],"source":"w.children[0].children[0].value\n"}
{"cell_type":"code","execution_count":299,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T12:00:47.393537Z","start_time":"2017-04-22T12:00:47.351130Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6244aada81ab45a1b2c1ab4dbcbdc587"}},"metadata":{},"output_type":"display_data"}],"source":"items=[[widgets.FloatText(value=4.8) for i in range(2)] for j in range(2)]\nw=widgets.HBox([widgets.VBox(items[0]),widgets.VBox(items[1])])\ndisplay(w)"}
{"cell_type":"code","execution_count":301,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T12:02:28.209450Z","start_time":"2017-04-22T12:02:28.205368Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"text/plain":"4.5"},"execution_count":301,"metadata":{},"output_type":"execute_result"}],"source":"w.children[0].children[1].value"}
{"cell_type":"code","execution_count":587,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T19:48:43.725041Z","start_time":"2017-04-22T19:48:42.563761Z"},"collapsed":false,"run_control":{"frozen":false,"read_only":false},"trusted":false},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5249d8b878524ac891ec3a6e4e1e2bcc"}},"metadata":{},"output_type":"display_data"}],"source":"b1 = widgets.Button(description='Custom color')\nb1.style.button_color = 'lightgreen'\nbox_layout = Layout(display='flex',\n                    flex_flow='row',\n                    align_items='stretch',\n                    border='solid',\n                    width='100%')\nbox_layout2 = Layout(display='flex',\n                    flex_flow='column',\n                    align_items='stretch',\n            #        justify-content='flex-end',\n                    border='thin',\n                    width='100%')\nliskeys=list(df.keys())\nnumcol=len(liskeys)\nRAwidgets=[widgets.Button(description='RA',style=b1.style)]+[widgets.Label(ra) for ra in df['RA']]\nNAMEwidgets=[widgets.Button(description='Nome',layout=Layout(width='auto'), style=b1.style)]+[widgets.Label(name,layout=Layout(width='auto') ) for name in df['Nome']]\nwRA=widgets.Box(children=RAwidgets,layout=box_layout2)\nwNAMES=widgets.Box(children=NAMEwidgets,layout=box_layout2)\nwtemp=[widgets.VBox([widgets.Button(description=liskeys[i],style=b1.style,layout=Layout(width='auto'))]\n                   +[widgets.FloatText(value=dfvalue,layout=Layout(width='auto')) \n                     for dfvalue in df.iloc[:,i]]) for i in range(2,numcol-1)]\nwtempmedia=widgets.VBox([widgets.Button(description='Media',layout=Layout(width='40%'),style=b1.style)]+[widgets.FloatText(value=dfvalue,layout=Layout(width='40%')) for dfvalue in df.iloc[:,-1]])\nwdf=[wRA,wNAMES]+wtemp+[wtempmedia]\nw=widgets.Box(children=wdf,layout=box_layout)\ndisplay(w)"}
{"cell_type":"code","execution_count":588,"metadata":{"ExecuteTime":{"end_time":"2017-04-22T19:48:56.630723Z","start_time":"2017-04-22T19:48:56.626147Z"},"collapsed":true,"trusted":false},"outputs":[],"source":"for i in range(1,len(df)):\n    for j in range(2,numcol-1):\n        df=df.set_value(i-1,liskeys[j],w.children[j].children[i].value) "}