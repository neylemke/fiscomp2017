
/*
Evaluation of code with streaming output built on both the clients and
server (local hub) using a sync_table.  This evaluator is associated
to a syncstring editing session, and provides code evaluation that
may be used to enhance the experience of document editing.
 */

(function() {
  var async, defaults, misc, required, sagews, stringify,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  stringify = require('json-stable-stringify');

  sagews = require('./sagews');

  misc = require('./misc');

  defaults = misc.defaults, required = misc.required;

  exports.Evaluator = (function() {
    function Evaluator(string, cb) {
      this.string = string;
      this._evaluate_using_shell = bind(this._evaluate_using_shell, this);
      this._evaluate_using_sage = bind(this._evaluate_using_sage, this);
      this._init_project_evaluator = bind(this._init_project_evaluator, this);
      this._handle_input_change = bind(this._handle_input_change, this);
      this._execute_code_hook = bind(this._execute_code_hook, this);
      this.call = bind(this.call, this);
      this.close = bind(this.close, this);
      this._init_eval_outputs = bind(this._init_eval_outputs, this);
      this._init_eval_inputs = bind(this._init_eval_inputs, this);
      this._init_sync_tables = bind(this._init_sync_tables, this);
      this._init_sync_tables((function(_this) {
        return function(err) {
          if (err) {
            return typeof cb === "function" ? cb(err) : void 0;
          } else {
            if (_this.string._client.is_project()) {
              _this._init_project_evaluator();
            }
            return typeof cb === "function" ? cb() : void 0;
          }
        };
      })(this));
    }

    Evaluator.prototype._init_sync_tables = function(cb) {
      return async.parallel([this._init_eval_inputs, this._init_eval_outputs], (function(_this) {
        return function(err) {
          return cb(err);
        };
      })(this));
    };

    Evaluator.prototype._init_eval_inputs = function(cb) {
      var query;
      query = {
        eval_inputs: {
          string_id: this.string._string_id,
          time: {
            '>=': misc.server_seconds_ago(30)
          },
          input: null
        }
      };
      this._inputs = this.string._client.sync_table(query, void 0, 500);
      return this._inputs.once('connected', (function(_this) {
        return function() {
          return cb();
        };
      })(this));
    };

    Evaluator.prototype._init_eval_outputs = function(cb) {
      var query;
      query = {
        eval_outputs: {
          string_id: this.string._string_id,
          time: {
            '>=': misc.server_seconds_ago(30)
          },
          output: null
        }
      };
      this._outputs = this.string._client.sync_table(query, void 0, 500);
      this._outputs.setMaxListeners(100);
      return this._outputs.once('connected', (function(_this) {
        return function() {
          return cb();
        };
      })(this));
    };

    Evaluator.prototype.close = function() {
      var ref, ref1, ref2;
      this._closed = true;
      if ((ref = this._inputs) != null) {
        ref.close();
      }
      delete this._inputs;
      if ((ref1 = this._outputs) != null) {
        ref1.close();
      }
      delete this._outputs;
      if ((ref2 = this._sage_session) != null) {
        ref2.close();
      }
      return delete this._sage_session;
    };

    Evaluator.prototype.call = function(opts) {
      var handle_output, mesg_number, messages, send, time;
      opts = defaults(opts, {
        program: required,
        input: required,
        cb: void 0
      });
      if (this._closed) {
        if (typeof opts.cb === "function") {
          opts.cb("closed");
        }
        return;
      }
      time = this.string._client.server_time();
      if ((this._last_time != null) && time <= this._last_time) {
        time = new Date(this._last_time - 0 + 1);
      }
      this._last_time = time;
      this._inputs.set({
        string_id: this.string._string_id,
        time: time,
        user_id: 0,
        input: misc.copy_without(opts, 'cb')
      });
      this._inputs.save();
      if (opts.cb != null) {
        messages = {};
        mesg_number = 0;
        send = (function(_this) {
          return function(mesg) {
            if (mesg.done) {
              _this._outputs.removeListener('change', handle_output);
            }
            return typeof opts.cb === "function" ? opts.cb(mesg) : void 0;
          };
        })(this);
        handle_output = (function(_this) {
          return function(keys) {
            var k, key, len, mesg, ref, ref1, results, t;
            if (_this._closed) {
              if (typeof opts.cb === "function") {
                opts.cb("closed");
              }
              return;
            }
            results = [];
            for (k = 0, len = keys.length; k < len; k++) {
              key = keys[k];
              t = misc.from_json(key);
              if (t[1] - time === 0) {
                mesg = (ref = _this._outputs.get(key)) != null ? (ref1 = ref.get('output')) != null ? ref1.toJS() : void 0 : void 0;
                if (mesg != null) {
                  delete mesg.id;
                  if (t[2] === mesg_number) {
                    send(mesg);
                    mesg_number += 1;
                    results.push((function() {
                      var results1;
                      results1 = [];
                      while (messages[mesg_number] != null) {
                        send(messages[mesg_number]);
                        delete messages[mesg_number];
                        results1.push(mesg_number += 1);
                      }
                      return results1;
                    })());
                  } else {
                    results.push(messages[t[2]] = mesg);
                  }
                } else {
                  results.push(void 0);
                }
              } else {
                results.push(void 0);
              }
            }
            return results;
          };
        })(this);
        return this._outputs.on('change', handle_output);
      }
    };

    Evaluator.prototype._execute_code_hook = function(output_uuid) {
      var dbg, hook, output_line, process;
      dbg = this.string._client.dbg("_execute_code_hook('" + output_uuid + "')");
      dbg();
      if (this._closed) {
        dbg("closed");
        return;
      }
      output_line = sagews.MARKERS.output;
      process = (function(_this) {
        return function(mesg) {
          var S, cell_id, content, i, j, n, x;
          dbg("processing mesg '" + (misc.to_json(mesg)) + "'");
          content = _this.string.to_str();
          i = content.indexOf(sagews.MARKERS.output + output_uuid);
          if (i === -1) {
            process = void 0;
            return;
          }
          i += 37;
          n = content.indexOf('\n', i);
          if (n === -1) {
            return;
          }
          output_line += stringify(misc.copy_without(mesg, ['id', 'event'])) + sagews.MARKERS.output;
          if (output_line.length > n - i) {
            dbg("sage_execute_code: initiating client didn't maintain sync promptly. fixing");
            x = content.slice(0, i);
            content = x + output_line + content.slice(n);
            if (mesg.done) {
              j = x.lastIndexOf(sagews.MARKERS.cell);
              if (j !== -1) {
                j = x.lastIndexOf('\n', j);
                cell_id = x.slice(j + 2, j + 38);
                S = sagews.sagews(content);
                S.remove_cell_flag(cell_id, sagews.FLAGS.running);
                S.set_cell_flag(cell_id, sagews.FLAGS.this_session);
                content = S.content;
              }
            }
            _this.string.from_str(content);
            return _this.string.save();
          }
        };
      })(this);
      hook = (function(_this) {
        return function(mesg) {
          return setTimeout((function() {
            return typeof process === "function" ? process(mesg) : void 0;
          }), 5000);
        };
      })(this);
      return hook;
    };

    Evaluator.prototype._handle_input_change = function(key) {
      var dbg, f, hook, id, number, ref, ref1, ref2, string_id, t, time, x;
      dbg = this.string._client.dbg('_handle_input_change');
      dbg("change: " + key);
      if (this._closed) {
        dbg("closed");
        return;
      }
      t = misc.from_json(key);
      id = (ref = [t[0], t[1], 0], string_id = ref[0], time = ref[1], number = ref[2], ref);
      if (this._outputs.get(JSON.stringify(id)) == null) {
        dbg("no outputs with key " + (misc.to_json(id)));
        x = (ref1 = this._inputs.get(key)) != null ? (ref2 = ref1.get('input')) != null ? typeof ref2.toJS === "function" ? ref2.toJS() : void 0 : void 0 : void 0;
        if (x == null) {
          return;
        }
        if ((x.program != null) && (x.input != null)) {
          f = this["_evaluate_using_" + x.program];
          if (f != null) {
            if (x.input.event === 'execute_code' && (x.input.output_uuid != null)) {
              hook = this._execute_code_hook(x.input.output_uuid);
            }
            return f(x.input, (function(_this) {
              return function(output) {
                if (_this._closed) {
                  return;
                }
                if (typeof hook === "function") {
                  hook(output);
                }
                _this._outputs.set({
                  string_id: string_id,
                  time: time,
                  number: number,
                  output: output
                });
                _this._outputs.save();
                return number += 1;
              };
            })(this));
          } else {
            this._outputs.set({
              string_id: string_id,
              time: time,
              number: number,
              output: misc.to_json({
                error: "no program '" + x.program + "'",
                done: true
              })
            });
            return this._outputs.save();
          }
        } else {
          this._outputs.set({
            string_id: string_id,
            time: time,
            number: number,
            output: misc.to_json({
              error: "must specify program and input",
              done: true
            })
          });
          return this._outputs.save();
        }
      }
    };

    Evaluator.prototype._init_project_evaluator = function() {
      var dbg;
      dbg = this.string._client.dbg('project_evaluator');
      dbg('init');
      return this._inputs.on('change', (function(_this) {
        return function(keys) {
          var k, key, len, results;
          results = [];
          for (k = 0, len = keys.length; k < len; k++) {
            key = keys[k];
            results.push(_this._handle_input_change(key));
          }
          return results;
        };
      })(this));
    };

    Evaluator.prototype._evaluate_using_sage = function(input, cb) {
      if (this._sage_session == null) {
        this._sage_session = this.string._client.sage_session({
          path: this.string._path
        });
      }
      if (input.event === 'execute_code') {
        input = misc.copy_with(input, ['code', 'data', 'preparse', 'event', 'id']);
      }
      return this._sage_session.call({
        input: input,
        cb: cb
      });
    };

    Evaluator.prototype._evaluate_using_shell = function(input, cb) {
      input.cb = (function(_this) {
        return function(err, output) {
          if (output == null) {
            output = {};
          }
          if (err) {
            output.error = err;
          }
          output.done = true;
          return cb(output);
        };
      })(this);
      return this.string._client.shell(input);
    };

    return Evaluator;

  })();

}).call(this);
