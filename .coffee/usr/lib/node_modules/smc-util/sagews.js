
/*
Some functions for working with Sage worksheets (sagews files) --
 */

(function() {
  var FLAGS, SageWS,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports.MARKERS = {
    cell: "\uFE20",
    output: "\uFE21"
  };

  exports.FLAGS = FLAGS = {
    execute: "x",
    waiting: "w",
    running: "r",
    interrupt: "c",
    this_session: "s",
    hide_input: "i",
    hide_output: "o"
  };

  exports.ACTION_FLAGS = [FLAGS.execute, FLAGS.running, FLAGS.waiting, FLAGS.interrupt];

  exports.ACTION_SESSION_FLAGS = [FLAGS.execute, FLAGS.running, FLAGS.waiting, FLAGS.interrupt, FLAGS.this_session];

  exports.uuids_of_linked_files = function(doc) {
    var i, j, k, len, line, m, mesg, ref, ref1, uuid, uuids;
    uuids = [];
    i = 0;
    while (true) {
      i = doc.indexOf(exports.MARKERS.output, i);
      if (i === -1) {
        return uuids;
      }
      j = doc.indexOf('\n', i);
      if (j === -1) {
        j = doc.length;
      }
      line = doc.slice(i, j);
      ref = line.split(exports.MARKERS.output).slice(1);
      for (k = 0, len = ref.length; k < len; k++) {
        m = ref[k];
        if (m.slice(0, 8) === '{"file":') {
          mesg = JSON.parse(m);
          uuid = (ref1 = mesg.file) != null ? ref1.uuid : void 0;
          if (uuid != null) {
            uuids.push(uuid);
          }
        }
      }
      i = j;
    }
  };

  SageWS = (function() {
    function SageWS(content1) {
      this.content = content1;
      this.set_cell_flag = bind(this.set_cell_flag, this);
      this.remove_cell_flag = bind(this.remove_cell_flag, this);
      this.set_cell_flagstring = bind(this.set_cell_flagstring, this);
      this.get_cell_flagstring = bind(this.get_cell_flagstring, this);
      this.find_cell_meta = bind(this.find_cell_meta, this);
    }

    SageWS.prototype.find_cell_meta = function(id, start) {
      var i, j;
      i = this.content.indexOf(exports.MARKERS.cell + id, start);
      j = this.content.indexOf(exports.MARKERS.cell, i + 1);
      if (j === -1) {
        return void 0;
      }
      return {
        start: i,
        end: j
      };
    };

    SageWS.prototype.get_cell_flagstring = function(id) {
      var pos;
      pos = this.find_cell_meta(id);
      if (pos != null) {
        return this.content.slice(pos.start + 37, pos.end);
      }
    };

    SageWS.prototype.set_cell_flagstring = function(id, flags) {
      var pos;
      pos = this.find_cell_meta(id);
      if (pos != null) {
        return this.content = this.content.slice(0, pos.start + 37) + flags + this.content.slice(pos.end);
      }
    };

    SageWS.prototype.remove_cell_flag = function(id, flag) {
      var s;
      s = this.get_cell_flagstring(id);
      if ((s != null) && indexOf.call(s, flag) >= 0) {
        return this.content = this.set_cell_flagstring(id, s.replace(new RegExp(flag, "g"), ""));
      }
    };

    SageWS.prototype.set_cell_flag = function(id, flag) {
      var s;
      s = this.get_cell_flagstring(id);
      if ((s != null) && indexOf.call(s, flag) < 0) {
        return this.content = this.set_cell_flagstring(id, s + flag);
      }
    };

    return SageWS;

  })();

  exports.sagews = function(content) {
    return new SageWS(content);
  };

}).call(this);
