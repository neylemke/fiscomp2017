
/*
Very, very simple key:value store.

The keys can be arbitrary json-able objects.
A frozen copy of the object is saved in the key:value store,
so it won't get mutated.
 */

(function() {
  var KeyValueStore, json,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  json = require('json-stable-stringify');

  exports.key_value_store = function() {
    return new KeyValueStore();
  };

  KeyValueStore = (function() {
    function KeyValueStore() {
      this.close = bind(this.close, this);
      this["delete"] = bind(this["delete"], this);
      this.get = bind(this.get, this);
      this.set = bind(this.set, this);
      this._data = {};
    }

    KeyValueStore.prototype.set = function(key, value) {
      if (this._data == null) {
        throw Error("closed");
      }
      if (value.freeze != null) {
        value = value.freeze();
      }
      return this._data[json(key)] = value;
    };

    KeyValueStore.prototype.get = function(key) {
      if (this._data == null) {
        throw Error("closed");
      }
      return this._data[json(key)];
    };

    KeyValueStore.prototype["delete"] = function(key) {
      if (this._data == null) {
        throw Error("closed");
      }
      return delete this._data[json(key)];
    };

    KeyValueStore.prototype.close = function() {
      return delete this._data;
    };

    return KeyValueStore;

  })();

}).call(this);
