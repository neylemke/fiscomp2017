
/*
 *
 * Library for working with JSON messages for Salvus.
 *
 * We use functions to work with messages to ensure some level of
 * consistency, defaults, and avoid errors from typos, etc.
 *
 */

(function() {
  var API, _, defaults, doc_intro, message, message2, misc, required;

  doc_intro = "## About the API\n\n### Purpose\n\nThe purpose of the CoCalc API (application programming interface) is to make\nessential operations within the CoCalc platform available to automated\nclients. This allows embedding of CoCalc services within other products\nand customizing the external look and feel of the application.\n\n### Protocol and Data Format\n\nEach API command is invoked using an HTTPS PUT request.\nAll commands support request parameters in JSON format, with request header\n`Content-Type: application/json`. Many commands (those that do not\nrequire lists or objects as parameters)\nalso accept request parameters as key-value pairs, i.e. \n`Content-Type: application/x-www-form-urlencoded`.\n\nResponses are formatted as JSON strings.\nNote that it is possible for a request to fail and return\na response code of 200. In that case, the response\nstring may contain helpful information on the nature of\nthe failure. In other cases, if the request cannnot\nbe completed, a response code other than 200 may be\nreturned, and the response body may be a\ngeneric HTML message rather than a JSON string.\n\n### Authentication\n\nA valid API key is required on all API requests.\nTo obtain a key, log into\nCoCalc and click on Settings (gear icon next to user name at upper\nright), and look under `Account Settings`.\nWith the `API key` dialogue, you can create a key,\nview a previously assigned key, generate a replacement key,\nand delete your key entirely.\n\nYour API key carries access privileges, just like your\nlogin and password.\n__Keep it secret.__\nDo not share your API key with others or post it in publicly accessible\nforums.\n\n### Additional References\n\n- The CoCalc PostgreSQL schema definition\n[src/smc-util/db-schema.coffee]\n(https://github.com/sagemathinc/cocalc/blob/master/src/smc-util/db-schema.coffee)\nhas information on tables and fields used with the API `query` request.\n- The API test suite\n[src/smc-hub/test/api/]\n(https://github.com/sagemathinc/cocalc/tree/master/src/smc-hub/test/api)\ncontains mocha unit tests for the API messages.\n- The CoCalc message definition file\n[src/smc-util/message.coffee]\n(https://github.com/sagemathinc/cocalc/blob/master/src/smc-util/message.coffee)\ncontains the source for this guide.\n\n### API Message Reference\n\nThe remainder of this guide explains the individual API endpoints.\nEach API request definition begins with the path of the\nURL used to invoke the request,\nfor example `/api/v1/change_email_address`.\nThe path name ends with the name of the request,\nfor example, `change_email_address`.\nFollowing the path is the list of options.\nAfter options are one or more sample invocations\nillustrating format of the request as made with the `curl`\ncommand, and the format of the response.\n\nThe following two options appear on all API messages\n(request parameters are often referred to\nas 'options' in the guide):\n\n- **event**: the command to be executed, for example \"ping\"\n- **id**: uuid for the API call, returned in response in most cases.\nIf id is not provided in the API message, a random id will be\ngenerated and returned in the response.";

  misc = require('./misc');

  defaults = misc.defaults;

  required = defaults.required;

  _ = require('underscore');

  message = function(obj) {
    exports[obj.event] = function(opts, strict) {
      if (opts == null) {
        opts = {};
      }
      if (strict == null) {
        strict = false;
      }
      if (opts.event != null) {
        throw Error("ValueError: must not define 'event' when calling message creation function (opts=" + (JSON.stringify(opts)) + ", obj=" + (JSON.stringify(obj)) + ")");
      }
      return defaults(opts, obj, false, strict);
    };
    return obj;
  };

  message2 = function(obj) {
    var fdesc, mesg_v1, mk_desc, ref;
    mk_desc = function(val) {
      var desc;
      desc = val.desc;
      if (val.init === required) {
        desc += ' (required)';
      } else if (val.init != null) {
        desc += " (default: " + (misc.to_json(val.init)) + ")";
      }
      return desc;
    };
    mesg_v1 = _.mapObject(obj.fields, (function(val) {
      return val.init;
    }));
    mesg_v1.event = obj.event;
    fdesc = _.mapObject(obj.fields, mk_desc);
    exports.documentation.events[obj.event] = {
      description: (ref = obj.desc) != null ? ref : '',
      fields: fdesc
    };
    exports.examples[obj.event] = obj.examples;
    message(mesg_v1);
    return obj;
  };

  exports.api_messages = {};

  exports.documentation = {
    intro: doc_intro,
    events: {}
  };

  exports.examples = {};

  API = function(obj) {
    return exports.api_messages[obj.event] = true;
  };

  message({
    event: 'compute_server_status',
    status: void 0
  });

  message({
    event: 'compute',
    project_id: void 0,
    action: required,
    args: void 0,
    param: void 0,
    id: void 0
  });

  message({
    event: 'project_state_update',
    project_id: required,
    state: required,
    time: required,
    state_error: void 0
  });

  message({
    event: 'start_session',
    type: required,
    project_id: void 0,
    session_uuid: void 0,
    params: void 0,
    id: void 0,
    limits: void 0
  });

  message({
    event: 'session_started',
    id: void 0,
    session_uuid: void 0,
    limits: void 0,
    data_channel: void 0
  });

  message({
    event: 'session_reconnect',
    session_uuid: void 0,
    data_channel: void 0
  });

  message({
    event: 'connect_to_session',
    id: void 0,
    type: required,
    project_id: required,
    session_uuid: required,
    params: void 0
  });

  message({
    event: 'session_connected',
    id: void 0,
    session_uuid: required,
    data_channel: void 0,
    history: void 0
  });

  message({
    event: 'session_description',
    pid: required,
    limits: void 0
  });

  message({
    event: 'terminate_session',
    project_id: void 0,
    session_uuid: void 0,
    reason: void 0,
    done: void 0
  });

  message({
    event: 'execute_code',
    id: void 0,
    code: required,
    data: void 0,
    session_uuid: void 0,
    cell_id: void 0,
    preparse: true,
    allow_cache: true
  });

  message({
    event: 'output',
    id: void 0,
    stdout: void 0,
    stderr: void 0,
    html: void 0,
    md: void 0,
    tex: void 0,
    d3: void 0,
    hide: void 0,
    show: void 0,
    auto: void 0,
    javascript: void 0,
    interact: void 0,
    obj: void 0,
    file: void 0,
    raw_input: void 0,
    done: false,
    session_uuid: void 0,
    once: void 0,
    clear: void 0,
    events: void 0
  });

  message({
    event: 'execute_javascript',
    session_uuid: void 0,
    code: required,
    obj: void 0,
    coffeescript: false,
    cell_id: void 0
  });

  API(message2({
    event: 'get_usernames',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      account_ids: {
        init: required,
        desc: 'list of account_ids'
      }
    },
    desc: "Get first and last names for a list of account ids.\n\nNote: Options for the `get_usernames` API message must be sent as JSON object.\n\nExample:\n```\n  curl -u sk_abcdefQWERTY090900000000: -H \"Content-Type: application/json\" \\\n    -d '{\"account_ids\":[\"cc3cb7f1-14f6-4a18-a803-5034af8c0004\",\"9b896055-920a-413c-9172-dfb4007a8e7f\"]}' \\\n    https://cocalc.com/api/v1/get_usernames\n  ==>  {\"event\":\"usernames\",\n        \"id\":\"32b485a8-f214-4fda-a622-4dbfe0db2b9c\",\n        \"usernames\": {\n           \"cc3cb7f1-14f6-4a18-a803-5034af8c0004\":{\"first_name\":\"John\",\"last_name\":\"Smith\"},\n           \"9b896055-920a-413c-9172-dfb4007a8e7f\":{\"first_name\":\"Jane\",\"last_name\":\"Doe\"}}}\n```"
  }));

  message({
    event: 'usernames',
    id: void 0,
    usernames: required
  });

  API(message2({
    event: 'create_account',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      first_name: {
        init: required
      },
      last_name: {
        init: required
      },
      email_address: {
        init: required
      },
      password: {
        init: required,
        desc: 'must be between 6 and 64 characters in length'
      },
      agreed_to_terms: {
        init: required,
        desc: 'must be true for request to succeed'
      },
      token: {
        init: void 0,
        desc: 'account creation token - see src/dev/docker/README.md'
      }
    },
    desc: "Examples:\n\nCreate a new account:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d first_name=John00 \\\n    -d last_name=Doe00 \\\n    -d email_address=jd@some_email \\\n    -d password=xyzabc09090 \\\n    -d agreed_to_terms=true https://cocalc.com/api/v1/create_account\n```\n\nOption `agreed_to_terms` must be present and specified as true.\nAccount creation fails if there is already an account using the\ngiven email address, if `email_address` is improperly formatted,\nand if password is fewer than 6 or more than 64 characters.\n\nAttempting to create the same account a second time results in an error:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d first_name=John00 \\\n    -d last_name=Doe00 \\\n    -d email_address=jd@some_email \\\n    -d password=xyzabc09090 \\\n    -d agreed_to_terms=true https://cocalc.com/api/v1/create_account\n  ==> {\"event\":\"account_creation_failed\",\n       \"id\":\"2332be03-aa7d-49a6-933a-cd9824b7331a\",\n       \"reason\":{\"email_address\":\"This e-mail address is already taken.\"}}\n```"
  }));

  message({
    event: 'account_created',
    id: void 0,
    account_id: required
  });

  message({
    event: 'account_creation_failed',
    id: void 0,
    reason: required
  });

  API(message2({
    event: 'delete_account',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      account_id: {
        init: required,
        desc: 'account_id for account to be deleted'
      }
    },
    desc: "Example:\n\nDelete an existing account:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d account_id=99ebde5c-58f8-4e29-b6e4-b55b8fd71a1b \\\n    https://cocalc.com/api/v1/delete_account\n  ==> {\"event\":\"account_deleted\",\"id\":\"9e8b68ac-08e8-432a-a853-398042fae8c9\"}\n```\n\nEvent `account_deleted` is also returned if the account was already\ndeleted before the API call, or if the account never existed.\n\nAfter successful `delete_account`, the owner of the deleted account\nwill not be able to login, but will still be listed as collaborator\nor owner on projects which the user collaborated on or owned\nrespectively."
  }));

  message({
    event: 'account_deleted',
    id: void 0,
    error: void 0
  });

  message({
    id: void 0,
    event: 'sign_in',
    email_address: required,
    password: required,
    remember_me: false
  });

  message({
    id: void 0,
    event: 'sign_in_using_auth_token',
    auth_token: required
  });

  message({
    id: void 0,
    event: 'remember_me_failed',
    reason: required
  });

  message({
    id: void 0,
    event: 'sign_in_failed',
    email_address: required,
    reason: required
  });

  message({
    event: 'signed_in',
    id: void 0,
    remember_me: required,
    hub: required,
    account_id: required,
    email_address: void 0,
    first_name: void 0,
    last_name: void 0
  });

  message({
    event: 'sign_out',
    everywhere: false,
    id: void 0
  });

  message({
    event: 'signed_out',
    id: void 0
  });

  API(message2({
    event: 'change_password',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      email_address: {
        init: required,
        desc: 'email address for account whose password is changed'
      },
      old_password: {
        init: "",
        desc: ''
      },
      new_password: {
        init: required,
        desc: 'must be between 6 and 64 characters in length'
      }
    },
    desc: "Given email address and old password for an account, set a new password.\n\nExample:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d email_address=... \\\n    -d old_password=... \\\n    -d new_password=... \\\n    https://cocalc.com/api/v1/change_password\n  ==> {\"event\":\"changed_password\",\"id\":\"41ff89c3-348e-4361-ad1d-372b55e1544a\"}\n```"
  }));

  message({
    event: 'changed_password',
    id: void 0,
    error: void 0
  });

  API(message2({
    event: "forgot_password",
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      email_address: {
        init: required,
        desc: 'email address for account requesting password reset'
      }
    },
    desc: "Given the email address of an existing account, send password reset email.\n\nExample:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d email_address=... \\\n    https://cocalc.com/api/v1/forgot_password\n  ==> {\"event\":\"forgot_password_response\",\n       \"id\":\"26ed294b-922b-47e1-8f3f-1e54d8c8e558\",\n       \"error\":false}\n```"
  }));

  message({
    event: "forgot_password_response",
    id: void 0,
    error: false
  });

  API(message2({
    event: "reset_forgot_password",
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      reset_code: {
        init: required,
        desc: 'id code that was sent in a password reset email'
      },
      new_password: {
        init: required,
        desc: 'must be between 6 and 64 characters in length'
      }
    },
    desc: "Reset password, given reset code.\n\nExample:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d reset_code=35a0eea6-370a-45c3-ab2f-3210df68748f \\\n    -d new_password=qjqhddfsfj \\\n    https://cocalc.com/api/v1/reset_forgot_password\n  ==> {\"event\":\"reset_forgot_password_response\",\"id\":\"85bd6027-644d-4859-9e17-5e835bd47570\",\"error\":false}\n```"
  }));

  message({
    event: "reset_forgot_password_response",
    id: void 0,
    error: false
  });

  API(message2({
    event: 'change_email_address',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      account_id: {
        init: required,
        desc: 'account_id for account whose email address is changed'
      },
      old_email_address: {
        init: "",
        desc: 'ignored -- deprecated'
      },
      new_email_address: {
        init: required,
        desc: ''
      },
      password: {
        init: "",
        desc: ''
      }
    },
    desc: "Given the `account_id` for an account, set a new email address.\n\nExamples:\n\nSuccessful change of email address.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d account_id=99ebde5c-58f8-4e29-b6e4-b55b8fd71a1b \\\n    -d password=secret_password \\\n    -d new_email_address=new@email.com \\\n    https://cocalc.com/api/v1/change_email_address\n  ==> {\"event\":\"changed_email_address\",\n       \"id\":\"8f68f6c4-9851-4b88-bd65-37cb983298e3\",\n       \"error\":false}\n```\n\nFails if new email address is already in use.\n\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d account_id=99ebde5c-58f8-4e29-b6e4-b55b8fd71a1b \\\n    -d password=secret_password \\\n    -d new_email_address=used@email.com \\\n    https://cocalc.com/api/v1/change_email_address\n  ==> {\"event\":\"changed_email_address\",\n       \"id\":\"4501f022-a57c-4aaf-9cd8-af0eb05ebfce\",\n       \"error\":\"email_already_taken\"}\n```\n\n**Note:** `account_id` and `password` must match the `id` of the current login."
  }));

  message({
    event: 'changed_email_address',
    id: void 0,
    error: false,
    ttl: void 0
  });

  API(message2({
    event: 'unlink_passport',
    fields: {
      strategy: {
        init: required,
        desc: 'passport strategy'
      },
      id: {
        init: required,
        desc: 'numeric id for user and passport strategy'
      }
    },
    desc: "Unlink a passport auth for the account.\n\nStrategies are defined in the database and may be viewed at [/auth/strategies](https://cocalc.com/auth/strategies).\n\nExample:\n\nGet passport id for some strategy for current user.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"query\":{\"accounts\":{\"account_id\":\"e6993694-820d-4f78-bcc9-10a8e336a88d\",\"passports\":null}}}' \\\n    https://cocalc.com/api/v1/query\n  ==> {\"query\":{\"accounts\":{\"account_id\":\"e6993694-820d-4f78-bcc9-10a8e336a88d\",\n                            \"passports\":{\"facebook-14159265358\":{\"id\":\"14159265358\",...}}}},\n       \"multi_response\":false,\n       \"event\":\"query\",\n       \"id\":\"a2554ec8-665b-495b-b0e2-8e248b54eb94\"}\n```\n\nUnlink passport for that strategy and id.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d strategy=facebook \\\n    -d id=14159265358 \\\n    https://cocalc.com/api/v1/unlink_passport\n  ==> {\"event\":\"success\",\n       \"id\":\"14159265358\"}\n```\n\nNote that success is returned regardless of whether or not passport was linked\nfor the given strategy and id before issuing the API command."
  }));

  message({
    event: 'error',
    id: void 0,
    error: void 0
  });

  message({
    event: 'success',
    id: void 0
  });

  message({
    event: 'reconnect',
    id: void 0,
    reason: void 0
  });

  message({
    event: 'cookies',
    id: required,
    url: "/cookies",
    get: void 0,
    set: void 0,
    value: void 0
  });


  /*
  
  Project Server <---> Hub interaction
  
  These messages are mainly focused on working with individual projects.
  
  Architecture:
  
    * The database stores a files object (with the file tree), logs
      (of each branch) and a sequence of git bundles that when
      combined together give the complete history of the repository.
      Total disk usage per project is limited by hard/soft disk quota,
      and includes the space taken by the revision history (the .git
      directory).
  
    * A project should only be opened by at most one project_server at
      any given time (not implemented: if this is violated then we'll
      merge the resulting conflicting repo's.)
  
    * Which project_server that has a project opened is stored in the
      database.  If a hub cannot connect to a given project server,
      the hub assigns a new project_server for the project and opens
      the project on the new project_server.  (The error also gets
      logged to the database.)  All hubs will use this new project
      server henceforth.
   */

  message({
    event: 'open_project',
    id: required,
    project_id: required,
    quota: required,
    idle_timeout: required,
    ssh_public_key: required
  });

  message({
    event: 'project_opened',
    id: required
  });

  API(message2({
    event: 'project_exec',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'id of project where command is to be executed'
      },
      path: {
        init: '',
        desc: 'path of working directory for the command'
      },
      command: {
        init: required,
        desc: 'command to be executed'
      },
      args: {
        init: [],
        desc: 'command line options for the command'
      },
      timeout: {
        init: 10,
        desc: 'maximum allowed time, in seconds'
      },
      max_output: {
        init: void 0,
        desc: 'maximum number of characters in the output'
      },
      bash: {
        init: false,
        desc: 'if true, args are ignored and command is run as a bash command'
      },
      err_on_exit: {
        init: true,
        desc: 'if exit code is nonzero send error return message instead of the usual output'
      }
    },
    desc: "Execute a shell command in a given project.\n\nExamples:\n\nSimple built-in shell command.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d command=pwd \\\n    -d project_id=e49e86aa-192f-410b-8269-4b89fd934fba \\\n    https://cocalc.com/api/v1/project_exec\n  ==> {\"event\":\"project_exec_output\",\n       \"id\":\"8a78a37d-b2fb-4e29-94ae-d66acdeac949\",\n       \"stdout\":\"/projects/e49e86aa-192f-410b-8269-4b89fd934fba\\n\",\"stderr\":\"\",\"exit_code\":0}\n```\n\nShell command with different working directory.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d command=pwd \\\n    -d path=Private \\\n    -d project_id=e49e86aa-192f-410b-8269-4b89fd934fba \\\n    https://cocalc.com/api/v1/project_exec\n  ==> {\"event\":\"project_exec_output\",\n       \"id\":\"8a78a37d-b2fb-4e29-94ae-d66acdeac949\",\n       \"stdout\":\"/projects/e49e86aa-192f-410b-8269-4b89fd934fba/Private\\n\",\"stderr\":\"\",\"exit_code\":0}\n```\n\nCommand line arguments specified by 'args' option. Note JSON format for request parameters.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"command\":\"echo\",\"args\":[\"xyz\",\"abc\"],\"project_id\":\"e49e86aa-192f-410b-8269-4b89fd934fba\"}' \\\n    https://cocalc.com/api/v1/project_exec\n  ==> {\"event\":\"project_exec_output\",\n       \"id\":\"39289ba7-0333-48ad-984e-b25c8b8ffa0e\",\n       \"stdout\":\"xyz abc\\n\",\n       \"stderr\":\"\",\n       \"exit_code\":0}\n```\n\nLimiting output of the command to 3 characters.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"command\":\"echo\",\"args\":[\"xyz\",\"abc\"],\"max_output\":3,\"project_id\":\"e49e86aa-192f-410b-8269-4b89fd934fba\"}' \\\n    https://cocalc.com/api/v1/project_exec\n  ==> {\"event\":\"project_exec_output\",\n       \"id\":\"02feab6c-a743-411a-afca-8a23b58988a9\",\n       \"stdout\":\"xyz (truncated at 3 characters)\",\n       \"stderr\":\"\",\n       \"exit_code\":0}\n```\n\nSetting a timeout for the command.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"command\":\"sleep 5\",\"timeout\":2,\"project_id\":\"e49e86aa-192f-410b-8269-4b89fd934fba\"}' \\\n    https://cocalc.com/api/v1/project_exec\n  ==>  {\"event\":\"error\",\n        \"id\":\"86fea3f0-6a90-495b-a541-9c14a25fbe58\",\n        \"error\":\"Error executing command 'sleep 5' with args '' -- killed command 'bash /tmp/f-11757-1677-8ei2z0.t4fex0qkt9', , \"}\n```\n\nNotes:\n- Argument `command` may invoke an executable file or a built-in shell command. It may include\n  a path and command line arguments.\n- If option `args` is provided, options must be sent as a JSON object.\n- Argument `path` is optional. When provided, `path` is relative to home directory in target project\n  and specifies the working directory in which the command will be run."
  }));

  message({
    event: 'project_exec_output',
    id: required,
    stdout: required,
    stderr: required,
    exit_code: required
  });

  API(message({
    event: 'jupyter_port',
    port: void 0,
    id: void 0,
    mathjax_url: void 0
  }));

  message({
    event: 'read_file_from_project',
    id: void 0,
    project_id: required,
    path: required,
    archive: 'tar.bz2'
  });

  message({
    event: 'file_read_from_project',
    id: required,
    data_uuid: required,
    archive: void 0
  });

  message({
    event: 'temporary_link_to_file_read_from_project',
    id: required,
    url: required
  });

  API(message2({
    event: 'read_text_file_from_project',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'id of project containing file to be read'
      },
      path: {
        init: required,
        desc: 'path to file to be read in target project'
      }
    },
    desc: "Read a text file in the project whose id is supplied.\nUser must be owner or collaborator in the target project.\nArgument 'path' is relative to home directory in target project.\nUnix user in the target project must have permissions to read file\nand containing directories if they do not already exist.\n\nExample:\n\nRead a text file.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d project_id=e49e86aa-192f-410b-8269-4b89fd934fba \\\n    -d path=Assignments/A1/h1.txt \\\n    https://cocalc.com/api/v1/read_text_file_from_project\n  ==> {\"event\":\"text_file_read_from_project\",\n       \"id\":\"481d6055-5609-450f-a229-480e518b2f84\",\n       \"content\":\"hello\"}\n```"
  }));

  message({
    event: 'text_file_read_from_project',
    id: required,
    content: required
  });

  message({
    event: 'write_file_to_project',
    id: required,
    project_id: required,
    path: required,
    data_uuid: required
  });

  API(message2({
    event: 'write_text_file_to_project',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'id of project where file is created'
      },
      path: {
        init: required,
        desc: 'path to file, relative to home directory in destination project'
      },
      content: {
        init: required,
        desc: 'contents of the text file to be written'
      }
    },
    desc: "Create a text file in the target project.\nUser must be owner or collaborator in the target project.\nDirectories containing the file are created if they do not exist already.\nUnix user in the target project must have permissions to create file\nand containing directories if they do not already exist.\nIf a file already exists at the destination path, it is overwritten.\n\nExample:\n\nCreate a text file.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d project_id=e49e86aa-192f-410b-8269-4b89fd934fba \\\n    -d \"content=hello$'\\n'world\" \\\n    -d path=Assignments/A1/h1.txt \\\n    https://cocalc.com/api/v1/write_text_file_to_project\n```"
  }));

  message({
    event: 'file_written_to_project',
    id: required
  });

  API(message2({
    event: 'create_project',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      title: {
        init: '',
        desc: 'project title'
      },
      description: {
        init: '',
        desc: 'project description'
      },
      start: {
        init: false,
        desc: 'start running the moment the project is created -- uses more resources, but possibly better user experience'
      }
    },
    desc: "Example:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d title='MY NEW PROJECT' \\\n    -d description='sample project' \\\n    https://cocalc.com/api/v1/create_project\n  == > {\"event\":\"project_created\",\n        \"id\":\"0b4df293-d518-45d0-8a3c-4281e501b85e\",\n        \"project_id\":\"07897899-6bbb-4fbc-80a7-3586c43348d1\"}\n```"
  }));

  message({
    event: 'project_created',
    id: required,
    project_id: required
  });

  message({
    event: 'project_list_updated'
  });

  API(message2({
    event: 'user_search',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      query: {
        init: required,
        desc: "comma separated list of email addresses or strings such as 'foo bar'"
      },
      limit: {
        init: 20,
        desc: 'maximum number of results returned'
      }
    },
    desc: "There are two possible item types in the query list: email addresses\nand strings that are not email addresses. An email query item will return\naccount id, first name, last name, and email address for the unique\naccount with that email address, if there is one. A string query item\nwill return account id, first name, and last name for all matching\naccounts.\n\nWe do not reveal email addresses of users queried by name.\n\nString query matches first and last names that start with the given string.\nIf a string query item consists of two strings separated by space,\nthe search will return accounts in which the first name begins with one\nof the two strings and the last name begins with the other.\nString and email queries may be mixed in the list for a single\nuser_search call. Searches are case-insensitive.\n\nNote: there is a hard limit of 50 returned items in the results.\n\nExamples:\n\nSearch for account by email.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d query=jd@m.local \\\n    https://cocalc.com/api/v1/user_search\n  ==> {\"event\":\"user_search_results\",\n       \"id\":\"3818fa50-b892-4167-b9d9-d22d521b36af\",\n       \"results\":[{\"account_id\":\"96c523b8-321e-41a3-9523-39fde95dc71d\",\n                   \"first_name\":\"John\",\n                   \"last_name\":\"Doe\",\n                   \"email_address\":\"jd@m.local\"}\n```\n\nSearch for at most 3 accounts where first and last name begin with 'foo' or 'bar'.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d 'query=foo bar'\\\n    -d limit=3 \\\n    https://cocalc.com/api/v1/user_search\n  ==> {\"event\":\"user_search_results\",\n       \"id\":\"fd9b025b-25d0-4e27-97f4-2c080bb07155\",\n       \"results\":[{\"account_id\":\"1a842a67-eed3-405d-a222-2f23a33f675e\",\n                   \"first_name\":\"foo\",\n                   \"last_name\":\"bar\"},\n                  {\"account_id\":\"0e9418a7-af6a-4004-970a-32fafe733f29\",\n                   \"first_name\":\"bar123\",\n                   \"last_name\":\"fooxyz\"},\n                  {\"account_id\":\"93f8131c-6c21-401a-897d-d4abd9c6c225\",\n                   \"first_name\":\"Foo\",\n                   \"last_name\":\"Bar\"}]}\n```\n\nThe same result as the last example above would be returned with a\nsearch string of 'bar foo'.\nA name of \"Xfoo YBar\" would not match.\n\nNote that email addresses are not returned for string search items.\n\nEmail and string search types may be mixed in a single query:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d 'query=foo bar,jd@m.local' \\\n    -d limit=4 \\\n    https://cocalc.com/api/v1/user_search\n```"
  }));

  message({
    event: 'user_search_results',
    id: void 0,
    results: required
  });

  message({
    event: 'project_users',
    id: void 0,
    users: required
  });

  API(message2({
    event: 'invite_collaborator',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'project_id of project into which user is invited'
      },
      account_id: {
        init: required,
        desc: 'account_id of invited user'
      }
    },
    desc: "Invite a user who already has a CoCalc account to\nbecome a collaborator on a project. You must be owner\nor collaborator on the target project.\n\nExample:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d account_id=99ebde5c-58f8-4e29-b6e4-b55b8fd71a1b \\\n    -d project_id=18955da4-4bfa-4afa-910c-7f2358c05eb8 \\\n    https://cocalc.com/api/v1/invite_collaborator\n  ==> {\"event\":\"success\",\n       \"id\":\"e80fd64d-fd7e-4cbc-981c-c0e8c843deec\"}\n```"
  }));

  API(message2({
    event: 'remove_collaborator',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'project_id of project from which user is removed'
      },
      account_id: {
        init: required,
        desc: 'account_id of removed user'
      }
    },
    desc: "Remove a user from a CoCalc project.\nYou must be owner or collaborator on the target project.\nYou cannot remove the project owner.\n\nExample:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d account_id=99ebde5c-58f8-4e29-b6e4-b55b8fd71a1b \\\n    -d project_id=18955da4-4bfa-4afa-910c-7f2358c05eb8 \\\n    https://cocalc.com/api/v1/remove_collaborator\n  ==> {\"event\":\"success\",\n       \"id\":\"e80fd64d-fd7e-4cbc-981c-c0e8c843deec\"}\n```"
  }));

  API(message2({
    event: 'invite_noncloud_collaborators',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'project_id of project into which users are invited'
      },
      to: {
        init: required,
        desc: 'comma- or semicolon-delimited string of email addresses'
      },
      email: {
        init: required,
        desc: 'body of the email to be sent, may include HTML markup'
      },
      title: {
        init: required,
        desc: 'string that will be used for project title in the email'
      },
      link2proj: {
        init: required,
        desc: 'URL for the target project'
      },
      replyto: {
        init: void 0,
        desc: 'Reply-To email address'
      },
      replyto_name: {
        init: void 0,
        desc: 'Reply-To name'
      },
      subject: {
        init: void 0,
        desc: 'email Subject'
      }
    },
    desc: "Invite users who do not already have a CoCalc account\nto join a project.\nAn invitation email is sent to each user in the `to`\noption.\nInvitation is not sent if there is already a CoCalc\naccount with the given email address.\nYou must be owner or collaborator on the target project.\n\nLimitations:\n- Total length of the request message must be less than or equal to 1024 characters.\n- Length of each email address must be less than 128 characters.\n\n\nExample:\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d project_id=18955da4-4bfa-4afa-910c-7f2358c05eb8 \\\n    -d to=someone@m.local \\\n    -d 'email=Please sign up and join this project.' \\\n    -d 'title=Class Project' \\\n    -d link2proj=https://cocalc.com/projects/18955da4-4bfa-4afa-910c-7f2358c05eb8 \\\n    https://cocalc.com/api/v1/invite_noncloud_collaborators\n  ==>  {\"event\":\"invite_noncloud_collaborators_resp\",\n        \"id\":\"39d7203d-89b1-4145-8a7a-59e41d5682a3\",\n        \"mesg\":\"Invited someone@m.local to collaborate on a project.\"}\n```\n\nEmail sent by the previous example:\n\n```\nTo: someone@m.local\nFrom: CoCalc <invites@sagemath.com\nReply-To: help@sagemath.com\nSubject: CoCalc Invitation\n\nPlease sign up and join this project.<br/><br/>\\n<b>\nTo accept the invitation, please sign up at\\n\n<a href='https://cocalc.com'>https://cocalc.com</a>\\n\nusing exactly the email address 'someone@m.local'.\\n\nThen go to <a href='https://cocalc.com/projects/18955da4-4bfa-4afa-910c-7f2358c05eb8'>\nthe project 'Team Project'</a>.</b><br/>\n```"
  }));

  message({
    event: 'invite_noncloud_collaborators_resp',
    id: void 0,
    mesg: required
  });


  /*
  Send/receive the current webapp code version number.
  
  This can be used by clients to suggest a refresh/restart.
  The client may sends their version number on connect.
  If the client sends their version and later it is out of date
  due to an update, the server sends a new version number update
  message to that client.
   */

  message({
    event: 'version',
    version: void 0,
    min_version: void 0
  });

  message({
    event: 'save_blob',
    id: void 0,
    sha1: required,
    ttl: void 0,
    error: void 0
  });

  message({
    event: 'remove_blob_ttls',
    id: void 0,
    uuids: required
  });

  message({
    event: 'storage',
    action: required,
    project_id: void 0,
    param: void 0,
    id: void 0
  });

  message({
    event: 'projects_running_on_server',
    id: void 0,
    projects: void 0
  });


  /*
  Direct messaging between browser client and local_hub,
  forwarded on by global hub after ensuring write access.
   */

  message({
    event: 'local_hub',
    project_id: required,
    timeout: void 0,
    id: void 0,
    multi_response: false,
    message: required
  });

  API(message({
    event: 'copy_path_between_projects',
    id: void 0,
    src_project_id: required,
    src_path: required,
    target_project_id: required,
    target_path: void 0,
    overwrite_newer: false,
    delete_missing: false,
    backup: false,
    timeout: void 0,
    exclude_history: false
  }));

  message({
    event: 'project_set_quotas',
    id: void 0,
    project_id: required,
    memory: void 0,
    cpu_shares: void 0,
    cores: void 0,
    disk_quota: void 0,
    mintime: void 0,
    network: void 0,
    member_host: void 0
  });


  /*
  Printing Files
   */

  message({
    event: "print_to_pdf",
    id: void 0,
    path: required,
    options: void 0
  });

  message({
    event: 'printed_to_pdf',
    id: void 0,
    path: required
  });


  /*
  Ping/pong -- used for clock sync, etc.
   */

  API(message2({
    event: 'ping',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      }
    },
    desc: "Test API connection, return time as ISO string when server responds to ping.\n\nExamples:\n\nOmitting request id:\n```\n  curl -X POST -u sk_abcdefQWERTY090900000000: https://cocalc.com/api/v1/ping\n  ==> {\"event\":\"pong\",\"id\":\"c74afb40-d89b-430f-836a-1d889484c794\",\"now\":\"2017-05-24T13:29:11.742Z\"}\n```\n\nUsing `uuid` shell command to create a request id:\n```\n  uuid\n  ==> 553f2815-1508-416d-8e69-2dde5af3aed8\n  curl -u sk_abcdefQWERTY090900000000: https://cocalc.com/api/v1/ping -d id=553f2815-1508-416d-8e69-2dde5af3aed8\n  ==> {\"event\":\"pong\",\"id\":\"553f2815-1508-416d-8e69-2dde5af3aed8\",\"now\":\"2017-05-24T13:47:21.312Z\"}\n```\n\nUsing JSON format to provide request id:\n```\n  curl -u sk_abcdefQWERTY090900000000: -H \"Content-Type: application/json\" \\\n    -d '{\"id\":\"8ec4ac73-2595-42d2-ad47-0b9641043b46\"}' https://cocalc.com/api/v1/ping\n  ==> {\"event\":\"pong\",\"id\":\"8ec4ac73-2595-42d2-ad47-0b9641043b46\",\"now\":\"2017-05-24T17:15:59.288Z\"}\n```"
  }));

  message({
    event: 'pong',
    id: void 0,
    now: void 0
  });


  /*
  Reading listings and files from projects
  without invoking the project server and
  write auth requirement.  Instead the given
  path in the project must be public.  These
  functions don't even assume the client has
  logged in.
   */

  API(message2({
    event: 'public_get_directory_listing',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'id of project containing public file to be read'
      },
      path: {
        init: required,
        desc: 'path of directory in target project'
      },
      hidden: {
        init: false,
        desc: 'show hidden files'
      },
      time: {
        init: false,
        desc: 'sort by timestamp, with newest first'
      },
      start: {
        init: 0,
        desc: ''
      },
      limit: {
        init: -1,
        desc: ''
      }
    },
    desc: "Given a project id and relative path (i.e. not beginning with a slash),\nlist all public files and subdirectories under that path.\nPath is required, but may be the empty string, in which case\na public listing of the home directory in the target project is\nreturned.\n\nExamples:\n\nGet public directory listing. Directory \"Public\" is shared and\ncontains one file \"hello.txt\" and one subdirectory \"p2\".\n\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d path=Public \\\n    -d project_id=9a19cca3-c53d-4c7c-8c0f-e166aada7bb6 \\\n    https://cocalc.com/api/v1/public_get_directory_listing\n  ==> {\"event\":\"public_directory_listing\",\n       \"id\":\"3e576b3b-b673-4d5c-9bce-780883f92958\",\n       \"result\":{\"files\":[{\"size\":41,\"name\":\"hello.txt\",\"mtime\":1496430932},\n                          {\"isdir\":true,\"name\":\"p2\",\"mtime\":1496461616}]}\n```"
  }));

  message({
    event: 'public_directory_listing',
    id: void 0,
    result: required
  });

  API(message2({
    event: 'public_get_text_file',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      project_id: {
        init: required,
        desc: 'id of project containing public file to be read'
      },
      path: {
        init: required,
        desc: 'path to file to be read in target project'
      }
    },
    desc: "Read a public (shared) text file in the project whose id is supplied.\nUser does not need to be owner or collaborator in the target project\nand does not need to be logged into CoCalc.\nArgument `path` is relative to home directory in target project.\n\nExamples\n\nRead a public file.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d project_id=e49e86aa-192f-410b-8269-4b89fd934fba \\\n    -d path=Public/hello.txt\n    https://cocalc.com/api/v1/public_get_text_file\n  ==> {\"event\":\"public_text_file_contents\",\n       \"id\":\"2d0e2faa-893a-44c1-9f64-59203bbbb017\",\n       \"data\":\"hello world\\nToday is Friday\\n\"}\n```\n\nAttempt to read a file which is not public.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d project_id=e49e86aa-192f-410b-8269-4b89fd934fba \\\n    -d path=Private/hello.txt\n    https://cocalc.com/api/v1/public_get_text_file\n  ==> {\"event\":\"error\",\"id\":\"0288b7d0-dda9-4895-87ba-aa71929b2bfb\",\n       \"error\":\"path 'Private/hello.txt' of project with id 'e49e86aa-192f-410b-8269-4b89fd934fba' is not public\"}+\n```"
  }));

  message({
    event: 'public_text_file_contents',
    id: void 0,
    data: required
  });

  API(message({
    event: 'copy_public_path_between_projects',
    id: void 0,
    src_project_id: required,
    src_path: required,
    target_project_id: required,
    target_path: void 0,
    overwrite_newer: false,
    delete_missing: false,
    timeout: void 0,
    exclude_history: false,
    backup: false
  }));

  API(message({
    event: 'log_client_error',
    error: required
  }));

  message({
    event: 'webapp_error',
    name: required,
    message: required,
    comment: void 0,
    stacktrace: void 0,
    file: void 0,
    path: void 0,
    lineNumber: void 0,
    columnNumber: void 0,
    severity: void 0,
    browser: void 0,
    mobile: void 0,
    responsive: void 0,
    user_agent: void 0,
    smc_version: void 0,
    build_date: void 0,
    smc_git_rev: void 0,
    uptime: void 0,
    start_time: void 0
  });


  /*
  Stripe integration
   */

  API(message({
    event: 'stripe_get_customer',
    id: void 0
  }));

  API(message({
    event: 'stripe_customer',
    id: void 0,
    customer: void 0,
    stripe_publishable_key: void 0
  }));

  API(message({
    event: 'stripe_create_source',
    id: void 0,
    token: required
  }));

  API(message({
    event: 'stripe_delete_source',
    card_id: required,
    id: void 0
  }));

  API(message({
    event: 'stripe_set_default_source',
    card_id: required,
    id: void 0
  }));

  API(message({
    event: 'stripe_update_source',
    card_id: required,
    info: required,
    id: void 0
  }));

  API(message({
    event: 'stripe_get_plans',
    id: void 0
  }));

  API(message({
    event: 'stripe_plans',
    id: void 0,
    plans: required
  }));

  API(message({
    event: 'stripe_create_subscription',
    id: void 0,
    plan: required,
    quantity: 1,
    coupon: void 0
  }));

  API(message({
    event: 'stripe_cancel_subscription',
    id: void 0,
    subscription_id: required,
    at_period_end: true
  }));

  API(message({
    event: 'stripe_update_subscription',
    id: void 0,
    subscription_id: required,
    quantity: void 0,
    projects: void 0,
    plan: void 0,
    coupon: void 0
  }));

  API(message({
    event: 'stripe_get_subscriptions',
    id: void 0,
    limit: void 0,
    ending_before: void 0,
    starting_after: void 0
  }));

  message({
    event: 'stripe_subscriptions',
    id: void 0,
    subscriptions: void 0
  });

  API(message({
    event: 'stripe_get_charges',
    id: void 0,
    limit: void 0,
    ending_before: void 0,
    starting_after: void 0
  }));

  message({
    event: 'stripe_charges',
    id: void 0,
    charges: void 0
  });

  API(message({
    event: 'stripe_get_invoices',
    id: void 0,
    limit: void 0,
    ending_before: void 0,
    starting_after: void 0
  }));

  message({
    event: 'stripe_invoices',
    id: void 0,
    invoices: void 0
  });

  message({
    event: 'stripe_admin_create_invoice_item',
    id: void 0,
    email_address: void 0,
    account_id: void 0,
    amount: void 0,
    description: void 0
  });


  /*
  Support Tickets → right now going through Zendesk
   */

  API(message({
    event: 'create_support_ticket',
    id: void 0,
    username: void 0,
    email_address: required,
    subject: required,
    body: required,
    tags: void 0,
    account_id: void 0,
    location: void 0,
    info: void 0
  }));

  message({
    event: 'support_ticket_url',
    id: void 0,
    url: required
  });

  API(message({
    event: 'get_support_tickets',
    id: void 0
  }));

  message({
    event: 'support_tickets',
    id: void 0,
    tickets: required
  });


  /*
  Queries directly to the database (sort of like Facebook's GraphQL)
   */

  API(message2({
    event: 'query',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      query: {
        init: required,
        desc: 'The actual query'
      },
      changes: {
        init: void 0,
        desc: ''
      },
      multi_response: {
        init: false,
        desc: ''
      },
      options: {
        init: void 0,
        desc: ''
      }
    },
    desc: "This queries directly the database (sort of Facebook's GraphQL)\nOptions for the 'query' API message must be sent as JSON object.\nA query is either _get_ (read from database), or _set_ (write to database).\nA query is _get_ if any query keys are null, otherwise the query is _set_.\n\nExamples of _get_ query:\n\nGet title and description for a project, given the project id.\n```\n  curl -u sk_abcdefQWERTY090900000000: -H \"Content-Type: application/json\" \\\n    -d '{\"query\":{\"projects\":{\"project_id\":\"29163de6-b5b0-496f-b75d-24be9aa2aa1d\",\"title\":null,\"description\":null}}}' \\\n    https://cocalc.com/api/v1/query\n  ==> {\"event\":\"query\",\n       \"id\":\"8ec4ac73-2595-42d2-ad47-0b9641043b46\",\n       \"query\":{\"projects\":{\"project_id\":\"29163de6-b5b0-496f-b75d-24be9aa2aa1d\",\n                            \"title\":\"MY NEW PROJECT 2\",\n                            \"description\":\"desc 2\"}},\n       \"multi_response\":false}\n```\n\nGet project id, given title and description.\n```\n  curl -u sk_abcdefQWERTY090900000000: -H \"Content-Type: application/json\" \\\n    -d '{\"query\":{\"projects\":{\"project_id\":null,\"title\":\"MY NEW PROJECT 2\",\"description\":\"desc 2\"}}}' \\\n    https://cocalc.com/api/v1/query\n  ==> {\"event\":\"query\",\n       \"query\":{\"projects\":{\"project_id\":\"29163de6-b5b0-496f-b75d-24be9aa2aa1d\",\n                            \"title\":\"MY NEW PROJECT 2\",\n                            \"description\":\"desc 2\"}},\n       \"multi_response\":false,\n       \"id\":\"2be22e08-f00c-4128-b112-fa8581c2d584\"}\n```\n\nGet users, given the project id.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"query\":{\"projects\":{\"project_id\":\"29163de6-b5b0-496f-b75d-24be9aa2aa1d\",\"users\":null}}}' \\\n    https://cocalc.com/api/v1/query\n  ==> {\"event\":\"query\",\n       \"query\":{\"projects\":{\"project_id\":\"29163de6-b5b0-496f-b75d-24be9aa2aa1d\",\n                            \"users\":{\"6c28c5f4-3235-46be-b025-166b4dcaac7e\":{\"group\":\"owner\"},\n                                     \"111634c0-7048-41e7-b2d0-f87129fd409e\":{\"group\":\"collaborator\"}}}},\n       \"multi_response\":false,\n       \"id\":\"9dd3ef3f-002b-4893-b31f-ff51440c855f\"}\n```\n\nExamples of _set_ query.\n\nSet title and description for a project, given the project id.\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"query\":{\"projects\":{\"project_id\":\"29163de6-b5b0-496f-b75d-24be9aa2aa1d\", \\\n                              \"title\":\"REVISED TITLE\", \\\n                              \"description\":\"REVISED DESC\"}}}' \\\n    https://cocalc.com/api/v1/query\n    ==> {\"event\":\"query\",\n         \"query\":{},\n         \"multi_response\":false,\n         \"id\":\"ad7d6b17-f5a9-4c5c-abc3-3823b1e1773f\"}\n```\n\nMake a path public (publish a file).\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"query\":{\"public_paths\":{\"project_id\":\"29163de6-b5b0-496f-b75d-24be9aa2aa1d\", \\\n                                  \"path\":\"myfile.txt\", \\\n                                  \"description\":\"a shared text file\"}}}' \\\n    https://cocalc.com/api/v1/query\n    ==> {\"event\":\"query\",\n         \"query\":{},\n         \"multi_response\":false,\n         \"id\":\"ad7d6b17-f5a9-4c5c-abc3-3823b1e1773f\"}\n\n```\n\nInformation on which fields are gettable and settable in the database tables\nvia API message is in file 'db-schema.coffee', in CoCalc sources on GitHub at\nhttps://github.com/sagemathinc/cocalc/blob/master/src/smc-util/db-schema.coffee\n\nWithin file 'db-schema.coffee':\n\n- for _project_ fields you can get, see the definition of\n`schema.projects.user_query.get.fields`\n- for _project_ fields you can set, see the definition of\n`schema.projects.user_query.set.fields`\n- for _user account_ fields you can get, see the definition of\n`schema.accounts.user_query.get.fields`\n- for _user account_ fields you can set, see the definition of\n`schema.accounts.user_query.set.fields`",
    examples: [
      [
        {
          id: "uuid",
          query: 'example1-query'
        }, {
          id: "uuid",
          event: 'query',
          response: "..."
        }
      ], [
        {
          id: "uuid",
          query: 'example2-query'
        }, {
          id: "uuid",
          event: 'query',
          response: "..."
        }
      ]
    ]
  }));

  message({
    event: 'query_cancel',
    id: void 0
  });

  message({
    event: 'query_get_changefeed_ids',
    id: void 0,
    changefeed_ids: void 0
  });


  /*
  API Key management for an account
   */

  message({
    event: 'api_key',
    id: void 0,
    action: required,
    password: required
  });

  message({
    event: 'api_key_info',
    id: void 0,
    api_key: required
  });

  API(message2({
    event: 'user_auth',
    fields: {
      id: {
        init: void 0,
        desc: 'A unique UUID for the query'
      },
      account_id: {
        init: required,
        desc: 'account_id for account to get an auth token for'
      },
      password: {
        init: required,
        desc: 'password for account to get token for'
      }
    },
    desc: "Example:\n\nObtain a temporary authentication token for an account, which\nis a 24 character string. Tokens last for **12 hours**.  You can\nonly obtain an auth token for accounts that have a password.\n\n```\n  curl -u sk_abcdefQWERTY090900000000: \\\n    -d account_id=99ebde5c-58f8-4e29-b6e4-b55b8fd71a1b \\\n    -d password=secret_password \\\n    https://cocalc.com/api/v1/user_auth\n  ==> {\"event\":\"user_auth_token\",\"id\":\"9e8b68ac-08e8-432a-a853-398042fae8c9\",\"auth_token\":\"BQokikJOvBiI2HlWgH4olfQ2\"}\n```\n\nYou can now use the auth token to craft a URL like this:\n\n    https://cocalc.com/app?auth_token=BQokikJOvBiI2HlWgH4olfQ2\n\nand provide that to a user.  When they visit that URL, they will be temporarily signed in as that user."
  }));

  message({
    event: 'user_auth_token',
    id: void 0,
    auth_token: required
  });


  /*
   * Not fully implemented yet
   * client --> hub
  API message2
      event        : 'revoke_auth_token'
      fields:
          id:
             init  : undefined
             desc  : 'A unique UUID for the query'
          auth_token:
             init  : required
             desc  : 'an authentication token obtained using user_auth (24 character string)'
      desc         : """
  Example:
  
  Revoke a temporary authentication token for an account.
  ```
    curl -u sk_abcdefQWERTY090900000000: \\
      -d auth_token=BQokikJOvBiI2HlWgH4olfQ2 \\
      https://cocalc.com/api/v1/revoke_auth_token
    ==> {"event":"success","id":"9e8b68ac-08e8-432a-a853-398042fae8c9"}
  ```
  """
   */

}).call(this);
