
/*
Handling of input opts to functions and type checking.
 */

(function() {
  var DEBUG, PropTypes, TEST_MODE, immutable_types, key, ref, ref1, ref2, required, types, val;

  PropTypes = require('prop-types');

  immutable_types = require('./immutable-types');


  /*
  Testing related env/DEVEL/DEBUG stuff
   */

  if ((typeof process !== "undefined" && process !== null ? (ref = process.env) != null ? ref.DEVEL : void 0 : void 0) && !(typeof process !== "undefined" && process !== null ? (ref1 = process.env) != null ? ref1.SMC_TEST : void 0 : void 0)) {
    DEBUG = true;
  } else {
    DEBUG = false;
  }

  if (DEBUG) {
    console.debug = console.log;
  } else {
    console.debug = function() {};
  }

  if (typeof process !== "undefined" && process !== null ? (ref2 = process.env) != null ? ref2.SMC_TEST : void 0 : void 0) {
    TEST_MODE = true;
  }

  types = exports.types = function(target, declaration, identifier) {
    if (identifier == null) {
      identifier = "check.types";
    }
    if (typeof target !== 'object') {
      throw new Error("Types was given a non-object to check");
    }
    if (typeof declaration !== 'object') {
      throw new Error("Types was given a " + (typeof declaration) + " as a declaration instead of an object");
    }
    return PropTypes.checkPropTypes(declaration, target, 'checking a', identifier);
  };

  for (key in PropTypes) {
    val = PropTypes[key];
    if (key !== 'checkPropTypes' && key !== 'PropTypes') {
      types[key] = val;
    }
  }

  types.immutable = immutable_types.immutable;

  exports.defaults = function(obj1, obj2, allow_extra, strict) {
    var err, error, prop, r;
    if (strict == null) {
      strict = false;
    }
    if (obj1 == null) {
      obj1 = {};
    }
    error = function() {
      var err;
      try {
        return "(obj1=" + (exports.trunc(exports.to_json(obj1), 1024)) + ", obj2=" + (exports.trunc(exports.to_json(obj2), 1024)) + ")";
      } catch (error1) {
        err = error1;
        return "";
      }
    };
    if (obj1 == null) {
      obj1 = {};
    }
    if (typeof obj1 !== 'object') {
      err = "BUG -- Traceback -- misc.defaults -- TypeError: function takes inputs as an object " + (error());
      if (strict || DEBUG || TEST_MODE) {
        throw new Error(err);
      } else {
        console.log(err);
        console.trace();
        return obj2;
      }
    }
    r = {};
    for (prop in obj2) {
      val = obj2[prop];
      if (obj1.hasOwnProperty(prop) && (obj1[prop] != null)) {
        if (obj2[prop] === exports.defaults.required && (obj1[prop] == null)) {
          err = "misc.defaults -- TypeError: property '" + prop + "' must be specified: " + (error());
          if (strict || DEBUG || TEST_MODE) {
            throw new Error(err);
          } else {
            console.warn(err);
            console.trace();
          }
        }
        r[prop] = obj1[prop];
      } else if (obj2[prop] != null) {
        if (obj2[prop] === exports.defaults.required) {
          err = "misc.defaults -- TypeError: property '" + prop + "' must be specified: " + (error());
          if (strict || DEBUG || TEST_MODE) {
            throw new Error(err);
          } else {
            console.warn(err);
            console.trace();
          }
        } else {
          r[prop] = obj2[prop];
        }
      }
    }
    if (!allow_extra) {
      for (prop in obj1) {
        val = obj1[prop];
        if (!obj2.hasOwnProperty(prop)) {
          err = "misc.defaults -- TypeError: got an unexpected argument '" + prop + "' " + (error());
          if (strict || DEBUG || TEST_MODE) {
            throw new Error(err);
          } else {
            console.warn(err);
            console.trace();
          }
        }
      }
    }
    return r;
  };

  required = exports.required = exports.defaults.required = "__!!!!!!this is a required property!!!!!!__";

}).call(this);
