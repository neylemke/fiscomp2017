{"type":"settings","kernel":"python3","backend_state":"running","metadata":{"celltoolbar":"Slideshow","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}},"trust":false,"kernel_state":"idle"}
{"type":"file","last_load":1497480121829}
{"type":"cell","id":"ec7172","pos":59,"input":"** 3. Argumentos *default***\n- É possível dar valores default a argumentos se o chamador não especificar valores para esses argumentos:\n- Se apenas alguns argumentos têm default, esses devem ser os últimos, pois senão haveria ambigüidade na passagem de argumentos.\n- Formato: \n\n```bash\ndef nome (arg1=default1, ..., argN=defaultN)```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"3a2b86","pos":13,"input":"**5. Pertinência**\n- Além das operações tradicionais de união, interseção e diferença, também temos operações de verificação de pertinência. A seguir veremos algumas.\n- Para verificar se um determinado elemento pertence a um conjunto, podemos usar o já conhecido operador de pertinência *in*:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"01896a","pos":55,"input":"def f(x):\n    return x+x","cell_type":"code","exec_count":43}
{"type":"cell","id":"80fab4","pos":65,"input":"x=2\ndef f(y):\n    def g(z):\n        return x*y*z\n    return g","cell_type":"code","exec_count":53,"collapsed":true}
{"type":"cell","id":"4f4816","pos":62,"input":" f(\"Joao\")","output":{"0":{"data":{"text/plain":"'Oi,Joao!!'"},"output_type":"execute_result","exec_count":50}},"cell_type":"code","exec_count":50}
{"type":"cell","id":"1a81f9","pos":61,"input":"def f(nome,saudacao=\"Oi\",pontuacao=\"!!\"):\n    return saudacao+\",\"+nome+pontuacao","cell_type":"code","exec_count":49,"collapsed":true}
{"type":"cell","id":"2d1709","pos":43,"input":"**1. Estrutura *for***\n- A estrutura de laço for segue a mesma ideia do ***for*** do bash, com a adição da sentença ***else***. No laço ***for***, a variável do laço alterna seu conteúdo com os valores da lista passada e caso nenhum ***break*** seja encontrado, até que o último elemento da lista seja processado, os comandos da sentença ***else*** serão executados.\n- Sua sintaxe segue a forma abaixo:\n\n```bash \nfor <variável> in <lista ou tupla de valores>: \n    <comandos>\n    ...\n    break\n    continue\nelse:\n    <comandos>```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"00fa45","pos":58,"input":"f([1,2])","output":{"0":{"data":{"text/plain":"[1, 2, 1, 2]"},"output_type":"execute_result","exec_count":46}},"cell_type":"code","exec_count":46}
{"type":"cell","id":"952697","pos":67,"input":"h(1)","output":{"0":{"data":{"text/plain":"2"},"output_type":"execute_result","exec_count":60}},"cell_type":"code","exec_count":60}
{"type":"cell","id":"cab385","pos":80,"input":"- Também é possível carregar um pacote utilizando-se de ***Import \"pacote\" as \"inicial\"***.\n- Veja o exemplo abaixo.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"7c7b02","pos":51,"input":"**Código 1**\n\n```bash\nif a < 0:\n    a= -a\n    if b < 0:\n        b=-a\n        if b < 0:\n            b=-b\n            if a == b:\n                print ('Os valores absolutos de ', a, ' e ', b, ' são iguais')```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"e41bdc","pos":11,"input":"**4. Diferença simétrica**\n- Diferença simétrica é uma operação sobre os dois conjuntos, que retorna todos os elementos (de ambos os conjuntos a e b) que pertencem a somente um dos conjuntos.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"9b9b44","pos":17,"input":"dicionario = {}","cell_type":"code","exec_count":19,"collapsed":true}
{"type":"cell","id":"445be2","pos":16,"input":"## Estrutura de dados - Dicionários\n\n- Os dicionários em Python são estruturas de dados que contém pares de chave-valor.\n\n![estruturadedados](estdados.png)\n\n- São parecidos com as listas, mas o acesso a cada posição da lista é feito de forma diferente.\n- Para começar, vamos ver as maneiras de definir um dicionário. Sendo assim, inicialmente iremos definir um dicionário vazio:\n","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"c90c2f","pos":21,"input":"- Este dicionário pode receber valores futuramente durante a execução do programa.\n- Agora, imaginemos como seira montar um dicionário que relacionasse strings para os dias da semana, como 'seg' e 'ter' com números. Indispensável se você for fazer um calendário, não acha?","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"f10f99","pos":3,"input":"set([1, 2, 3, 4,1])","output":{"0":{"data":{"text/plain":"{1, 2, 3, 4}"},"output_type":"execute_result","exec_count":9}},"cell_type":"code","exec_count":9}
{"type":"cell","id":"8a88c6","pos":82,"input":"m.sin(30)","output":{"0":{"data":{"text/plain":"-0.9880316240928618"},"output_type":"execute_result","exec_count":65}},"cell_type":"code","exec_count":65}
{"type":"cell","id":"d8467f","pos":27,"input":"- Podemos usar ***List Comprehension*** usá-la para montar um dicionário que relaciona os inteiros de zero a dez e seus respectivos quadrados","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"37ccae","pos":84,"input":"vec=[1,-2,3]\ndef step(x):\n    if x>0:\n        return 1\n    else:\n        return 0\n[step(num) for num in vec]","output":{"0":{"data":{"text/plain":"[1, 0, 1]"},"output_type":"execute_result","exec_count":69}},"cell_type":"code","exec_count":69}
{"type":"cell","id":"c65a0d","pos":71,"input":"## Pacotes\n- Quando nossos módulos ficarem maiores, não vamos querer ter cinquenta classes e trezentas funções em um único arquivo. Vamos querer separar em diversos módulos. É para isso que pacotes existem.\n- Pacotes são módulos Python que podem conter outros pacotes. Em termos de armazenamento, enquanto módulos são estruturados em arquivos, pacotes são estruturados em pastas.\n- Para demonstração, vamos criar um pacote de utilitários com a seguinte estrutura e tabela de símbolos (apenas algumas classes e funções de exemplo):\n\n```bash\nutil/\n    __init__.py\n    sort.py [quicksort(), bubblesort()]\n    string/\n        __init__.py\n        format.py [Parser, Validator]\n        io.py [StringIO]\n    number/\n        __init__.py\n        format.py [DoubleFormat, IntFormat]```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"e27a59","pos":56,"input":"f(2)","output":{"0":{"data":{"text/plain":"4"},"output_type":"execute_result","exec_count":44}},"cell_type":"code","exec_count":44}
{"type":"cell","id":"5f7c4d","pos":18,"input":"dicionario.update({\"chocolate\": 'propina'})","cell_type":"code","exec_count":20}
{"type":"cell","id":"1c4c2d","pos":30,"input":"dic_char['6']","output":{"0":{"data":{"text/plain":"54"},"output_type":"execute_result","exec_count":25}},"cell_type":"code","exec_count":25}
{"type":"cell","id":"563b0c","pos":64,"input":"**4. Funções definidas em funções**\n- Observe que, se uma função g foi definida dentro de outra função f, então, se g é armazenada numa variável ou  transmitida para outra função ela carrega com si os valores do escopo de f (mas não o escopo global). \n- Veja o exemplo a seguir:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"bdf1bd","pos":15,"input":"5 in a","output":{"0":{"data":{"text/plain":"False"},"output_type":"execute_result","exec_count":16}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"9fa465","pos":0,"input":"# Bases de programação em Python (Parte 2)","cell_type":"markdown","slide":"slide"}
{"type":"cell","id":"97d136","pos":37,"input":"dic_char={chr(i):i for i in range(255) }\nstr=input(\"Entre com uma string\")\nlis=[dic_char[letter] for letter in str]\nlis","output":{"0":{"name":"stdout","output_type":"stream","text":"Entre com uma stringfdfdfdfdfdfshshah\n"},"1":{"data":{"text/plain":"[102,\n 100,\n 102,\n 100,\n 102,\n 100,\n 102,\n 100,\n 102,\n 100,\n 102,\n 115,\n 104,\n 115,\n 104,\n 97,\n 104]"},"output_type":"execute_result","exec_count":27}},"cell_type":"code","exec_count":27}
{"type":"cell","id":"7dd457","pos":72,"input":"**E o que são esses arquivos __init__.py? **\n- Esses são arquivos especiais e servem para que o interpretador possa identificar quais diretórios são pacotes e quais não são. Isso serve para que você possa explicitamente especificar quais pastas fazem parte da interface de seu pacote. Afinal, algumas podem conter apenas dados, por exemplo, imagens, dentre outros arquivos que não são módulos Python. Na maioria dos casos, o conteúdo dos arquivos __init__.py podem ser vazios.\n\n**1. Como importar pacotes**\n\n#####  ==> Importar todos os módulos de um pacote\n- O Para importar todos os módulos de um pacote utilizamos apenas o **import \"pacote\"**. Veja o exemplo a seguir:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"be94f2","pos":33,"input":"Podemos varrer  os dicionários  por chaves e por values. ","cell_type":"markdown"}
{"type":"cell","id":"68b847","pos":39,"input":"## Estruturas de controle\n\n- Os comandos de Python são executados pelo computador, linha por linha e as estruturas de controle permitem ao programador modificar a ordem em que cada comando ser´a executado bem como se ele será ou não executado.\n\n\n\n","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"97ccdd","pos":42,"input":"# Verifica se um número é par ou impar#\nn = input(\"Entre com um inteiro: \")\nif type(n) == int:\n    if (n % 2) == 0:\n        print ('%d é um par' % n)\n    else:\n        print ('%d é impar' % n)\nelse:\n    print ('Este número (%s) não é um inteiro!' % n)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Entre com um inteiro: 3.56\nEste número (3.56) não é um inteiro!\n"}},"cell_type":"code","exec_count":30}
{"type":"cell","id":"57c0a6","pos":32,"input":"dic_char['2']","output":{"0":{"data":{"text/plain":"50"},"output_type":"execute_result","exec_count":21}},"cell_type":"code","exec_count":21}
{"type":"cell","id":"d5552f","pos":29,"input":"dic_char={chr(i):i for i in range(32,55) }\ndic_char","output":{"0":{"data":{"text/plain":"{' ': 32,\n '!': 33,\n '\"': 34,\n '#': 35,\n '$': 36,\n '%': 37,\n '&': 38,\n \"'\": 39,\n '(': 40,\n ')': 41,\n '*': 42,\n '+': 43,\n ',': 44,\n '-': 45,\n '.': 46,\n '/': 47,\n '0': 48,\n '1': 49,\n '2': 50,\n '3': 51,\n '4': 52,\n '5': 53,\n '6': 54}"},"output_type":"execute_result","exec_count":23}},"cell_type":"code","exec_count":23}
{"type":"cell","id":"9dfedc","pos":79,"input":"pi","output":{"0":{"data":{"text/plain":"3.141592653589793"},"output_type":"execute_result","exec_count":63}},"cell_type":"code","exec_count":63}
{"type":"cell","id":"55c49f","pos":9,"input":"**3. Diferença**\n- A diferença entre dois conjuntos A e B retorna somente os elementos de A que não estão em B, ou seja, retira de A todos os elementos comuns a ambos os conjuntos:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"859ef5","pos":19,"input":"dicionario","cell_type":"raw"}
{"type":"cell","id":"47a86d","pos":78,"input":"from math import *","cell_type":"code","exec_count":62,"collapsed":true}
{"type":"cell","id":"b33888","pos":22,"input":"dias_semana = {'dom' : 0, 'seg' : 1, 'ter' : 2, 'qua' : 3,\\\n 'qui' : 4, 'sex' : 5, 'sab' : 6}","cell_type":"code","exec_count":16,"collapsed":true}
{"type":"cell","id":"880034","pos":77,"input":"- Observe que ao utilizar from package import item, o item pode ser um subpacote, submódulo, classe, função ou variável.\n- O comando import primeiro testa se o item está definido no pacote, senão assume que é um módulo e tenta carregá-lo. Se falhar em encontrar o módulo uma exceção ImportError é lançada (documentação Python).\n\n##### ==> Importar todas as funções do math\n- Para diminuir o tempo de digitação costuma-se a importar todas as funções do pacote ***math*** utilizando o ***from math import ****\n- Em geral, a prática do import * de um módulo ou pacote é desaprovada, uma vez que muitas vezes dificulta a leitura do código. O uso no terminal, com dito, é muito comum. Veja o próximo exemplo:\n\n","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"264690","pos":34,"input":"[key for key in dic_char.keys()]","output":{"0":{"data":{"text/plain":"['$',\n '2',\n '+',\n '6',\n ',',\n '\"',\n '1',\n \"'\",\n '(',\n '-',\n ')',\n '*',\n '%',\n '.',\n '4',\n '3',\n ' ',\n '/',\n '5',\n '!',\n '&',\n '#',\n '0']"},"output_type":"execute_result","exec_count":22}},"cell_type":"code","exec_count":22}
{"type":"cell","id":"d19dae","pos":85,"input":"","cell_type":"code","exec_count":0,"collapsed":true}
{"type":"cell","id":"edd827","pos":4,"input":"- Existem várias operações disponíveis nos conjuntos através de métodos, como as operações mais conhecidas de teoria.\n\n**1. União**","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"c0195a","pos":12,"input":"a = {1, 2, 3, 4}\nb = {3, 4, 5, 6}\nprint (a.symmetric_difference(b))","output":{"0":{"name":"stdout","output_type":"stream","text":"{1, 2, 5, 6}\n"}},"cell_type":"code","exec_count":8}
{"type":"cell","id":"ab7b12","pos":46,"input":"list(range(0, 5))","output":{"0":{"data":{"text/plain":"[0, 1, 2, 3, 4]"},"output_type":"execute_result","exec_count":35}},"cell_type":"code","exec_count":35}
{"type":"cell","id":"68b584","pos":40,"input":"**1. Estrutura *if***\n- O comando ***if*** direciona o computador a tomar uma decisão, baseado nas condições determinadas. Se a condição for atendida, um bloco de comandos será executado, caso contrário, o computador executa outros comandos, conforme a estrutura a seguir:\n\n```bash \nif <condição1>: \n    <comandos>\nelif <condição 2>:\n      <comandos>\nelif <condição 3>:\n     ....\nelse:\n    <comandos>```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"7797aa","pos":47,"input":"## imprime os primos\nprint ('Imprime os números primos de 1 até n.\\n')\n \n# Entra com o limite:\nn = int(input('Entre com o limite superior para o primo: '))\n \nprint ('\\nSão primos:')\nfor i in range(2, n):\n    for j in range(2, i):\n        if i % j == 0:\n            break\n    else:\n        print (i),","output":{"0":{"name":"stdout","output_type":"stream","text":"Imprime os números primos de 1 até n.\n\nEntre com o limite superior para o primo: 100\n\nSão primos:\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n"}},"cell_type":"code","exec_count":36,"slide":"subslide"}
{"type":"cell","id":"c1e3ed","pos":50,"input":"## Funções\n\n- As linguagens de programação em geral têm o intuito de automatizar ações tornando-as mais rápidas.\n- Se houver alguma ação que seja grande e utilizada com frequência, temos a opção de criar uma função que cumpra o seu objetivo, reduzindo o espaço ocupado pelo nosso programa final.\n- Essas funções também são muito úteis na tarefa de debuggar o seu código, visto que você não precisará vasculhar o código atrás do erro, basta entrar na função e modifcá-la.\n- Se em um determinado problema, precisarmos descobrir se dois valores absolutos são iguais podemos utilizar o código 1, descrito abaixo, todas as vezes que precisarmos realizar essa descoberta, ou podemos simplesmente usar o código 2 criando uma função que cumpra esse objetivo exigindo apenas que apresentemos os valores que devemos analisar.\n- Dado que temos os valores: a = 23 b = -23","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"a1fcf2","pos":57,"input":"f(2.)","output":{"0":{"data":{"text/plain":"4.0"},"output_type":"execute_result","exec_count":45}},"cell_type":"code","exec_count":45}
{"type":"cell","id":"eb05e5","pos":36,"input":"Vamos  gerar um exemplo mais complexo. ","cell_type":"markdown"}
{"type":"cell","id":"19d6e9","pos":28,"input":"Vamos inicialmente criar um dicionário contendo um caractere e seu código  ASCII. ","cell_type":"markdown"}
{"type":"cell","id":"fe3878","pos":48,"input":"**1. Estrutura *While***\n- Começaremos por uma estrutura de repetição. O ***loop while*** tem como função repetir determinado bloco de comando, até que uma determinada condição pare de ser atendida.\n- Para que o bloco seja executado no momento correto, devemos manter uma rígida identação, ou seja, tudo que pertencer ao bloco do while, deve estar um espaço a frente, isto ajuda a deixar o código legível e organizado.\n- Estrutura de comando:\n\n```bash\nwhile #condição for verdadeira :\n   #bloco de comandos pertencentes ao while\n   #continuação do programa```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"19f258","pos":38,"input":"[bin(num) for num in lis]","output":{"0":{"data":{"text/plain":"['0b1100110',\n '0b1100100',\n '0b1100110',\n '0b1100100',\n '0b1100110',\n '0b1100100',\n '0b1100110',\n '0b1100100',\n '0b1100110',\n '0b1100100',\n '0b1100110',\n '0b1110011',\n '0b1101000',\n '0b1110011',\n '0b1101000',\n '0b1100001',\n '0b1101000']"},"output_type":"execute_result","exec_count":28}},"cell_type":"code","exec_count":28}
{"type":"cell","id":"2a1968","pos":53,"input":"** 1. Definindo funções**\n- Formato geral de uma função:\n\n```bash \n   def nome (arg, arg, ... arg):\n      comando\n      . . . \n      comand```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"d95883","pos":54,"input":"** 2.  Argumentos de Funções**\n- Argumentos (ou parâmetros) são como variáveis que recebem seus valores iniciais do chamador. Essas variáveis, assim como outras definidas dentro da função são ditas locais, isto é, só existem no lugar onde foram definidas.\n- Ao retornar ao ponto de chamada, as variáveis locais são descartadas.\n- Se uma função define n argumentos, valores para todos eles devem ser passados pelo chamador. Com Exceção: argumentos com valores default.\n- Veja o exemplo abaixo:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"015d9e","pos":63,"input":" f(\"Joao\",saudacao=\"Hi \")","output":{"0":{"data":{"text/plain":"'Hi ,Joao!!'"},"output_type":"execute_result","exec_count":51}},"cell_type":"code","exec_count":51}
{"type":"cell","id":"60819c","pos":52,"input":"**Código 2**\n```bash \ndef compara_absolutos(a,b):\n   \" Essa função retorna se os valores absolutos das variáveis requeridas são iguais\"\n     if a < 0:\n         a = -a\n         if b < 0:\n             b = -b\n             if a == b:\n                 print ('Os valores absolutos de ', a, ' e ', b, ' são iguais')\n                 else:\n                   print ('Os valores absolutos de ', a, ' e ', b, ' são iguais')```","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"360fdb","pos":44,"input":"semana = ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sab']\nfor s in semana:\n    print (s)","output":{"0":{"name":"stdout","output_type":"stream","text":"dom\nseg\nter\nqua\nqui\nsex\nsab\n"}},"cell_type":"code","exec_count":31,"slide":"subslide"}
{"type":"cell","id":"ff7362","pos":26,"input":"pontos_cardeais","output":{"0":{"data":{"text/plain":"{'L': 1, 'N': 0, 'O': 3, 'S': 2}"},"output_type":"execute_result","exec_count":22}},"cell_type":"code","exec_count":22}
{"type":"cell","id":"0b17fe","pos":24,"input":"** 1. *dict ()***\n- permite transformar listas de tuplas em dicionários.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"64fe3e","pos":70,"input":"- Agora, salve o seu arquivo como IMC.py . De agora em diante, o módulo já pode ser utilizado por qualquer programa em Python.","cell_type":"markdown"}
{"type":"cell","id":"b2e008","pos":25,"input":"pontos_cardeais = dict([('N', 0), ('L', 1), ('S', 2), ('O', 3)])","cell_type":"code","exec_count":21}
{"type":"cell","id":"1de627","pos":81,"input":"import math as m","cell_type":"code","exec_count":64,"collapsed":true}
{"type":"cell","id":"75f393","pos":10,"input":"a = {1, 2, 3, 4}\nb = {3, 4, 5, 6}\nprint (\"a - b:\", a.difference(b))\nprint (\"b - a:\",b.difference(a))","output":{"0":{"name":"stdout","output_type":"stream","text":"a - b: {1, 2}\nb - a: {5, 6}\n"}},"cell_type":"code","exec_count":7}
{"type":"cell","id":"c7b7a1","pos":20,"input":"","cell_type":"code","exec_count":0,"collapsed":true}
{"type":"cell","id":"4288a0","pos":23,"input":"Nesse exemplo os dias da semana são chamados de _keys_ e os números de _values_.   ","cell_type":"markdown"}
{"type":"cell","id":"5d388a","pos":83,"input":"### Exercícios\n== >Crie um notebook jupyter com nome **Exerciciodeaula17.03.2017** no próprio diretório dessa aula e em modo MarkDown coloque a data de hoje da aula de hoje. (Fazer até as 16:00).\n\n\n==> (Valendo 0.5 pts - Entregar até o dia 20.04) \n**- 1. Calcule as raízes da equação do 2◦ grau ($Ax^2 + Bx + C = 0$) sendo os valores de A, B e C fornecidos pelo usuário, levando em consideração a existência de raízes reais.**\n\n**- 2. Dados três valores A, B e C, verifique se eles podem ser os comprimentos dos lados de um triângulo. Se forem, verificar se compõem um triângulo equilátero, isósceles ou escaleno. Informar se não compuserem nenhum triângulo. Lembrando que:**\n- Triângulo: (A < B + C) e (B < A + C) e (C < A + B)\n- Equilátero: (A = B) e (B = C)\n- Isósceles: (A = B) ou (A = C) ou (B = C)\n- Escaleno: (A <> B) e (B <> C) e (A <> C)\n\n**- 3. Construa uma função que calcule o volume de um paralelepído de lados a, b e c. Construa uma função que calcule a área lateral do mesmo paralelepipido. **\n\n**- 4. Implemente uma função que conte o número de algarismos pares em um número natural.**\n\n**- 5. faça um algoritmo que solicite ao usuário números e os armazene em um vetor de 30 posições. Crie uma função que recebe o vetor preenchido e substitua todas as ocorrência de valores positivos por 1 e todos os valores negativos por 0.**\n\n**- 6. Pesquise e monte um notebook em modo Markdown qual a função  e exemplos da utilização dos seguintes pacotes: ***math***, ***numpy***, ***matplotlib***, ***pandas*** e **string**. ","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"d278c8","pos":31,"input":"Para acessar um valor podemos usar a chave: ","cell_type":"markdown"}
{"type":"cell","id":"008546","pos":69,"input":"#IMC.py\ndef indice(altura,peso):\n    return peso/(altura**2)\n\n\ndef estado(imc):\n    if imc < 24.9:\n        print ('NORMAL')\n    elif 24.9 < imc < 29.9:\n        print ('PESO A MAIS')\n    elif 24.9 < imc < 29.9:\n        print ('LIGEIRA OBESIDADE')\n    elif imc > 40:\n        print ('OBESIDADE')\n    else:\n        print ('MAGRO DEMAIS')\n                        \ndef pesoideal(peso,altura):\n    a=20*(altura**2)\n    b= 24.9*(altura**2)\n    print ('Seu peso ideal se encontra entre %f e %f' %(a,b))","cell_type":"code","exec_count":2,"slide":"subslide"}
{"type":"cell","id":"7b6a3d","pos":74,"input":"","cell_type":"raw"}
{"type":"cell","id":"50d1cc","pos":75,"input":"##### ==> Importar um módulo do pacote\n- Para importar apenas um módulo utilizamos o **import \"pacote\"from**. Veja o exemplo abaixo.","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"61d7a7","pos":68,"input":"**4. Módulos**\n- Pensando na reutilização de código, a linguagem Python já possui um conjunto de funções prontas para serem usadas ou agregadas em seus programas. Essas funções estão agrupadas em estruturas denominadas módulos. Para a utilização desses módulos é preciso utilizar o comando **import nome_do_módulo**.\n- Após ter importado o módulo, qualquer função pertencente a ele pode ser utilizada através do comando **nome_do_módulo.função(argumento)**.\n- É possível importar do módulo apenas a função desejada. Para isso, utilizamos o comando **from nome_do_módulo import função**, e a função estará disponível para utilização.\n- É possível definir o seu próprio módulo. Defini-se as funções desejadas e ao final, você salva o seu módulo com a extensão *.py*.  Veja o exemplo:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"02a5a6","pos":6,"input":"b","output":{"0":{"data":{"text/plain":"{3, 4, 5, 6}"},"output_type":"execute_result","exec_count":12}},"cell_type":"code","exec_count":12}
{"type":"cell","id":"c11570","pos":60,"input":"** Exemplos**","cell_type":"markdown"}
{"type":"cell","id":"f51945","pos":45,"input":"## Utilizando range\nfor contador in range(0, 5):\n    print (contador)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n"}},"cell_type":"code","exec_count":33}
{"type":"cell","id":"5bbbe0","pos":1,"input":"## Sets\n- Sets (ou, como iremos chamar daqui para a frente, conjuntos) são estruturas disponíveis como builtins do Python, utilizadas para representar coleções desordenadas de elementos únicos. \n- Os elementos não são armazenados em uma ordem específica e confiável;\n- Conjuntos não contém elementos repetidos;\n- A característica número 1 é importante, porque o desenvolvedor jamais deve confiar na ordenação de um conjunto, visto que a ordem em que os elementos são mantidos nos conjuntos varia de implementação para implementação do interpretador Python. ","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"6f26d5","pos":7,"input":"** 2. Interseção**\n- Essa operação é muito útil quando precisamos descobrir elementos que duas listas possuem em comum:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"efe0d4","pos":66,"input":"h=f(1)","cell_type":"code","exec_count":59}
{"type":"cell","id":"adca4d","pos":8,"input":"l1 = [1, 2, 3]\nl2 = [2, 4, 3]\nl3 = set(l1).intersection(l2)\nprint (l3)","output":{"0":{"name":"stdout","output_type":"stream","text":"{2, 3}\n"}},"cell_type":"code","exec_count":13}
{"type":"cell","id":"266397","pos":76,"input":"from math import sqrt\nprint(sqrt(25))","output":{"0":{"name":"stdout","output_type":"stream","text":"5.0\n"}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"bd31d7","pos":41,"input":"- Segue abaixo um pequeno programa para fazer uma simples checagem da paridade de um número:","cell_type":"markdown","slide":"subslide"}
{"type":"cell","id":"24d03b","pos":35,"input":"[value for value in dic_char.values()]","output":{"0":{"data":{"text/plain":"[36,\n 50,\n 43,\n 54,\n 44,\n 34,\n 49,\n 39,\n 40,\n 45,\n 41,\n 42,\n 37,\n 46,\n 52,\n 51,\n 32,\n 47,\n 53,\n 33,\n 38,\n 35,\n 48]"},"output_type":"execute_result","exec_count":23}},"cell_type":"code","exec_count":23}
{"type":"cell","id":"09b138","pos":49,"input":"## Calcular numero fatorial\ni = 0\nwhile True:\n    print (\"Não vou parar nunca!\")\n    i = i + 1\n    if i > 100:\n        break  ","output":{"0":{"name":"stdout","output_type":"stream","text":"Não vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\nNão vou parar nunca!\n"}},"cell_type":"code","exec_count":37}
{"type":"cell","id":"dbf750","pos":2,"input":"s = {1, 1, 2, 4, 3}\nprint(s)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"{1, 2, 3, 4}\n"}},"cell_type":"code","exec_count":8}
{"type":"cell","id":"3c0093","pos":73,"input":"import math\nprint(math.sqrt(25))","output":{"0":{"name":"stdout","output_type":"stream","text":"5.0\n"}},"cell_type":"code","exec_count":61}
{"type":"cell","id":"e31683","pos":14,"input":"a = {1, 2, 3, 4}\n1 in a\n","output":{"0":{"data":{"text/plain":"True"},"output_type":"execute_result","exec_count":15}},"cell_type":"code","exec_count":15}
{"type":"cell","id":"7419a3","pos":5,"input":"a = {1, 2, 3, 4}\nb = {3, 4, 5, 6}\nprint (a.union(b))","output":{"0":{"name":"stdout","output_type":"stream","text":"{1, 2, 3, 4, 5, 6}\n"}},"cell_type":"code","exec_count":10}